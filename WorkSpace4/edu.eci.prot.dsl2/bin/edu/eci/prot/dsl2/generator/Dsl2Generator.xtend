/*
 * generated by Xtext 2.11.0
 */
package edu.eci.prot.dsl2.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import edu.eci.prot.dsl2.dsl2.Entity
import edu.eci.prot.dsl2.dsl2.Feature
import org.eclipse.xtext.naming.IQualifiedNameProvider
import com.google.inject.Inject
import java.util.ArrayList

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class Dsl2Generator extends AbstractGenerator {
	@Inject extension IQualifiedNameProvider
	
	ArrayList<Entity> classesToServe=new ArrayList<Entity>();
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		//Create POJO entities
		for (e : resource.allContents.toIterable.filter(Entity)) {
			if(e.service){
				classesToServe.add(e);
			}
			fsa.generateFile(
                e.fullyQualifiedName.toString("/") + ".java",
                e.compile)
			
        }
        //Create services classes
        for(e:classesToServe){
        	fsa.generateFile(
                ((e.fullyQualifiedName.toString("/").replace("/model/"+e.name, "")) + "/services/"+ e.name + "Services.java"),
                e.compileServiceInterface);
            fsa.generateFile(
                ((e.fullyQualifiedName.toString("/").replace("/model/"+e.name, "")) + "/services/"+ e.name + "ServicesImpl1.java"),
                e.compileServiceImplementation);
            fsa.generateFile(
                ((e.fullyQualifiedName.toString("/").replace("/model/"+e.name, "")) + "/controller/"+ e.name + "Controller.java"),
                e.compileRESTControllers);
        	//((e.fullyQualifiedName.toString("/").replace("/"+e.name, "")) + "/model/"+ e.name + ".java")
        	
        }
        classesToServe.clear;
	}
	
	def compileRESTControllers(Entity e)
		'''
		package «((e.fullyQualifiedName.toString(".").replace(".model."+e.name, "")) + ".controller;")»
		
		import «e.fullyQualifiedName.toString(".")»;
		import «((e.fullyQualifiedName.toString(".").replace(".model."+e.name, "")) + ".services")».«e.name»Services;
		import org.springframework.beans.factory.annotation.Autowired;
		import org.springframework.http.HttpStatus;
		import org.springframework.http.ResponseEntity;
		import org.springframework.web.bind.annotation.*;
		
		@RestController
		@RequestMapping(value = "/«e.name.toFirstLower»")
		public class «e.name»Controller {
		
		    @Autowired
		    private «e.name»Services ps;
		
		    @RequestMapping(method = RequestMethod.GET)
		    public ResponseEntity<?> get«e.name»s(){
		        return new ResponseEntity<>(ps.get«e.name»s(), HttpStatus.ACCEPTED);
		    }
		
		    @RequestMapping(method = RequestMethod.GET, path = "/{«e.name.toFirstLower»Id}")
		    public ResponseEntity<?> get«e.name»(@PathVariable Integer «e.name.toFirstLower»Id) {
		        return new ResponseEntity<>(ps.get«e.name»(«e.name.toFirstLower»Id), HttpStatus.ACCEPTED);
		    }
		
		    @RequestMapping(method = RequestMethod.POST)
		    public ResponseEntity<?> post«e.name»(@RequestBody «e.name» p) {
		        ps.save«e.name»(p);
		        return new ResponseEntity<>(HttpStatus.ACCEPTED);
		    }
		
		    @RequestMapping(method = RequestMethod.PUT)
		    public ResponseEntity<?> update«e.name»(@RequestBody «e.name» p) {
		        ps.update«e.name»(p);
		        return new ResponseEntity<>(HttpStatus.ACCEPTED);
		    }
		}
		'''
	
	def compileServiceImplementation(Entity e)
		'''
		package  «((e.fullyQualifiedName.toString(".").replace(".model."+e.name, "")) + ".services;")»
		import «e.fullyQualifiedName.toString(".")»;
		import org.springframework.stereotype.Service;
		
		import java.util.ArrayList;
		import java.util.List;

		@Service
		public class «e.name»ServicesImpl1 implements «e.name»Services{
		
		    List<«e.name»> «e.name.toFirstLower»List=new ArrayList<>();
		
		    @Override
		    public void save«e.name»(«e.name» p) {
		        «e.name.toFirstLower»List.add(p);
		    }
		
		    @Override
		    public List<«e.name»> get«e.name»s() {
		        return «e.name.toFirstLower»List;
		    }
		
		    @Override
		    public void update«e.name»(«e.name» p) {
		        for («e.name» pe :
		                «e.name.toFirstLower»List) {
		            if (p.getId()==pe.getId()) {
		                «e.name.toFirstLower»List.add(«e.name.toFirstLower»List.indexOf(pe), p);
		            }
		        }
		    }
		
		
		    @Override
		    public «e.name» get«e.name»(Integer pId) {
		        «e.name» ans=null;
		        for («e.name» pe :
		                «e.name.toFirstLower»List) {
		            if(pe.getId()==pId){
		                ans=pe;
		                break;
		            }
		        }
		        return ans;
		    }
		}
		'''
	
	def compileServiceInterface(Entity e)
		'''
		package  «((e.fullyQualifiedName.toString(".").replace(".model."+e.name, "")) + ".services;")»
		import «e.fullyQualifiedName.toString(".")»;
		import java.util.List;
		
		public interface «e.name»Services {
		    public void save«e.name»(«e.name» p);
		    public List<«e.name»> get«e.name»s();
		    public void update«e.name»(«e.name» p);
		    public «e.name» get«e.name»(Integer pId);
		}
		'''
	
	def compile(Entity e) 
	''' 
        «IF e.eContainer.fullyQualifiedName !== null»
package 
		«e.eContainer.fullyQualifiedName»;
        «ENDIF»
	    
        «FOR i : e.imports»
import «i.importedNamespace»;
	    «ENDFOR»
public class «e.name» «IF e.superType !== null»extends «e.superType.fullyQualifiedName» «ENDIF»{
	public «e.name»(){}
	private Integer id;
	
	public Integer getId() {
	return id;
	}
	
	public void setId(Integer id) {
	this.id = id;
	}
            «FOR f : e.features»
            	«IF !f.name.equals("id")»
                	«f.compile»
            	«ENDIF»
            «ENDFOR»
        }
    '''
 
    def compile(Feature f) '''
    	«IF f.many»
    		private java.util.ArrayList<«f.type.fullyQualifiedName»> «f.name» =new java.util.ArrayList<«f.type.fullyQualifiedName»>();
    		
    		public java.util.ArrayList<«f.type.fullyQualifiedName»> get«f.name.toFirstUpper»() {
    		return «f.name»;
    		}
    		
    		
    		public void set«f.name.toFirstUpper»(java.util.ArrayList<«f.type.fullyQualifiedName»> «f.name») {
    		this.«f.name» = «f.name»;
    		}
    	«ELSE»
    		private «f.type.fullyQualifiedName» «f.name»;
    		
    		public «f.type.fullyQualifiedName» get«f.name.toFirstUpper»() {
    		return «f.name»;
    		}
    		
    		public void set«f.name.toFirstUpper»(«f.type.fullyQualifiedName» «f.name») {
    		this.«f.name» = «f.name»;
    		}
    	«ENDIF»
    '''
}
