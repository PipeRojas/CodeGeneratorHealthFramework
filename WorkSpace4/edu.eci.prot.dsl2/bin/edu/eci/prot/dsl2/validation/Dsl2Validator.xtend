/*
 * generated by Xtext 2.11.0
 */
package edu.eci.prot.dsl2.validation

import edu.eci.prot.dsl2.dsl2.DataType
import edu.eci.prot.dsl2.dsl2.Dsl2Package
import edu.eci.prot.dsl2.dsl2.Entity
import edu.eci.prot.dsl2.dsl2.Feature
import edu.eci.prot.dsl2.dsl2.PackageDeclaration
import org.eclipse.xtext.validation.Check

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class Dsl2Validator extends AbstractDsl2Validator {
	
//	public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					Dsl2Package.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}

	
	@Check
	def void checkOnlyOnePrincipal(Entity en) {
		var counter=0;
		for (e : en.eResource.allContents.toIterable.filter(Entity)){
			if(e.principal){
				counter++;
			}
		}
		if(counter>1){
			error('Just one principal Entity must be present', Dsl2Package.Literals.ENTITY__PRINCIPAL)
		}else if(counter<1){
			error('At least one principal Entity must be present', Dsl2Package.Literals.ENTITY__PRINCIPAL)
		}
	}
	
	
	@Check
	def void checkRightPackageName(PackageDeclaration p){
		if(!(p.name).endsWith(".model")){
			error('Package name must end with ".model".', Dsl2Package.Literals.PACKAGE_DECLARATION__ELEMENTS)
		}
	}
	
	@Check
	def void checkManyCannotBeTransient(Feature f){
		if(f.many&&f.transient){
			error('Feature with "many" property cannot have "transient" property', Dsl2Package.Literals.ENTITY__FEATURES)
		}
	}
	
	@Check
	def void checkValidDataType(DataType d){
		if(!(d.name.equals("Byte")||d.name.equals("Short")||d.name.equals("Integer")||d.name.equals("Long")||d.name.equals("Float")||d.name.equals("Double")||d.name.equals("Char")||d.name.equals("String")||d.name.equals("Boolean")||d.name.equals("Date"))){
			error('datatype must be a primitive type like: Byte or Short or Integer or Long or Float or Double or Character or String or Boolean or Date', Dsl2Package.Literals.ABSTRACT_ELEMENT__NAME);
			//throw new Exception('datatype must be a primitive type like: Byte or Short or Integer or Long or Float or Double or Character or String or Boolean or Date');
		}
	}
	
	@Check
	def void checkNameAndIdForPrincipalEntity(Entity e){
		var flagName=false;
		var flagId=false;
		if(e.principal){
			for (var i=0;i<e.features.size&& !(flagName&&flagId); i++) {
				if(e.features.get(i).name.equals("id")&&(e.features.get(i).type.name.equals("Integer"))){
					flagId=true
				}else if(e.features.get(i).name.equals("name")&&(e.features.get(i).type.name.equals("String"))){
					flagName=true
				}
			}
			if(!flagId||!flagName){
				error("If "+e.name+" entity is principal, must have id of type Integer and name of type String features", Dsl2Package.Literals.ENTITY__FEATURES);
			}
		}
	}

	def void checkDiagnosticMustHaveDate(Feature f){
		var ans=false;
		if(f.diagnostic){
			for (inFea : f.type.eAllContents.toIterable) {
				var feature =inFea as Feature;
				if(feature.name.equals("date")&&feature.type.name.equals("Date")){
					ans=true;
				}
			}
			if(!ans){
				error(f.name+" feature is a diagnostic, so its entity must have an feature called 'date' of type 'Date'", Dsl2Package.Literals.FEATURE__TYPE)
			}
		}
	}
	
	@Check
	def void checkDiagnosticCannotBeDatatype(Feature d){
		if((d.diagnostic)&&(d.type.name.equals("Byte")||d.type.name.equals("Short")||d.type.name.equals("Integer")||d.type.name.equals("Long")||d.type.name.equals("Float")||d.type.name.equals("Double")||d.type.name.equals("Char")||d.type.name.equals("String")||d.type.name.equals("Boolean")||d.type.name.equals("Date"))){
			error("Diagnostic feature must reference an entity and not an datatype", Dsl2Package.Literals.FEATURE__TYPE);
		}else if(d.diagnostic){
			d.checkDiagnosticMustHaveDate
		}
		
	}
	
	@Check
	def void checkPrincipalIdCannotBeTransient(Entity e){
		if(e.principal){
			for (Feature f : e.features) {
				if(f.name.equals("id")&&f.transient){
					error("Principal entity id cannot be transient", Dsl2Package.Literals.ENTITY__FEATURES);
				}
			}
		}
	}
	
	@Check
	def void checkComposedFeaturesCannotHaveComposedFeatures(Feature f){
		if((!f.many)&&(f.type.eAllContents.toIterable.size>0)){
			for(dat: f.type.eAllContents.toIterable){
				var feature =dat as Feature
				if((feature.many)||(feature.type.eAllContents.toIterable.size>0)){
					error("Features with attributes cannot have features with attributes in their attributes", Dsl2Package.Literals.FEATURE__TYPE);
				}
			}
		}
	}
	
	@Check
	def void checkDiagnosticMustBeMany(Feature f){
		if(f.diagnostic&&!f.many){
			error("Every Diagnostic feature must be Many", Dsl2Package.Literals.FEATURE__MANY);
		}
	}
	
	@Check
	def void checkCommentFeaturePrimitiveFeatures(Feature f){
		var ans=true;
		var hasDate=false;
		var hasTitle=false;
		if(f.many&&!f.diagnostic){
			for(dat: f.type.eAllContents.toIterable){
				var feature =dat as Feature
				if((!feature.type.name.equals("String"))&&(!feature.type.name.equals("Integer"))&&(!feature.type.name.equals("Date"))){
					ans=false;
				}else if(feature.type.name.equals("Date")&&(feature.name.equals("date"))){
					hasDate=true;
				}else if(feature.type.name.equals("String")&&(feature.name.equals("title"))){
					hasTitle=true;
				}
			}
			if(!hasDate){
				error("At least one feature of comment feature must be called 'date' and have 'Date' type", Dsl2Package.Literals.FEATURE__TYPE);
			}else if(!hasTitle){
				error("At least one feature of comment feature must be called 'title and have 'String' type", Dsl2Package.Literals.FEATURE__TYPE);
			}
		}
		if(!ans){
			error(f.name+" feature is a comment feature and must have features of types String, Integer or Date only", Dsl2Package.Literals.FEATURE__TYPE);
		}
	}
	
	@Check
	def void checkDiagnosticFeaturePrimitiveFeatures(Feature f){
		var ans=true;
		var hasDate=false;
		if(f.many&&f.diagnostic){
			for(dat: f.type.eAllContents.toIterable){
				var feature =dat as Feature
				if((!feature.type.name.equals("String"))&&(!feature.type.name.equals("Integer"))&&(!feature.type.name.equals("Date"))){
					ans=false;
				}else if(feature.type.name.equals("Date")&&(feature.name.equals("date"))){
					hasDate=true;
				}
			}
			if(!hasDate){
				error("At least one feature of diagnostic feature must be called 'date' and have 'Date' type", Dsl2Package.Literals.FEATURE__TYPE);
			}
		}
		if(!ans){
			error(f.name+" feature is a diagnostic feature and must have features of types String, Integer or Date only", Dsl2Package.Literals.FEATURE__TYPE);
		}
	}
	
	@Check
	def void checkManyFeatureCannotBePrimitive(Feature d){
		if(d.many){
			if((d.type.name.equals("Byte")||d.type.name.equals("Short")||d.type.name.equals("Integer")||d.type.name.equals("Long")||d.type.name.equals("Float")||d.type.name.equals("Double")||d.type.name.equals("Char")||d.type.name.equals("String")||d.type.name.equals("Boolean")||d.type.name.equals("Date"))){
				error("Features with 'many' token cannot be primitive types", Dsl2Package.Literals.FEATURE__TYPE);
			}
		}
	}
	
	@Check
	def void checkOnlyAtomicFeaturesCanBeTransient(Feature f){
		if(f.transient){
			if(f.type.eAllContents.toIterable.size>0){
				error("Only atomic features (of primitive types) can be transient", Dsl2Package.Literals.FEATURE__TRANSIENT);
			}
		}
	}
	
	@Check
	def void checkEntityFeatureCanHaveTransientFeaturesIfIsNotMany(Feature f){
		if(f.many){
			for (dat : f.type.eAllContents.toIterable) {
				var feature=dat as Feature;
				if(feature.transient){
					error("An entity feature can have transient features only if is not many", Dsl2Package.Literals.FEATURE__MANY);
				}
			}
		}
	}
	
	@Check
	def void checkEntityNameStartsWithCapital(Entity entity) {
	    if (!Character.isUpperCase(entity.name.charAt(0))) {
	        error("Name should start with a capital", Dsl2Package.Literals.ABSTRACT_ELEMENT__NAME);
	    }
	}
	
	@Check
	def void checkFeatureNameStartsWithLower(Feature feature){
		if (Character.isUpperCase(feature.name.charAt(0))) {
	        error("Name should start with a lower case", Dsl2Package.Literals.FEATURE__NAME);
	    }
	}
}
