/**
 * generated by Xtext 2.11.0
 */
package edu.eci.prot.dsl2.generator;

import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import edu.eci.prot.dsl2.dsl2.Entity;
import edu.eci.prot.dsl2.dsl2.Feature;
import edu.eci.prot.dsl2.dsl2.Import;
import java.util.ArrayList;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class Dsl2Generator extends AbstractGenerator {
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  private ArrayList<Entity> classesToServe = new ArrayList<Entity>();
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<Entity> _filter = Iterables.<Entity>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Entity.class);
    for (final Entity e : _filter) {
      {
        boolean _isService = e.isService();
        if (_isService) {
          this.classesToServe.add(e);
        }
        String _string = this._iQualifiedNameProvider.getFullyQualifiedName(e).toString("/");
        String _plus = (_string + ".java");
        fsa.generateFile(_plus, 
          this.compile(e));
      }
    }
    for (final Entity e_1 : this.classesToServe) {
      {
        String _string = this._iQualifiedNameProvider.getFullyQualifiedName(e_1).toString("/");
        String _name = e_1.getName();
        String _plus = ("/model/" + _name);
        String _replace = _string.replace(_plus, "");
        String _plus_1 = (_replace + "/services/");
        String _name_1 = e_1.getName();
        String _plus_2 = (_plus_1 + _name_1);
        String _plus_3 = (_plus_2 + "Services.java");
        fsa.generateFile(_plus_3, 
          this.compileServiceInterface(e_1));
        String _string_1 = this._iQualifiedNameProvider.getFullyQualifiedName(e_1).toString("/");
        String _name_2 = e_1.getName();
        String _plus_4 = ("/model/" + _name_2);
        String _replace_1 = _string_1.replace(_plus_4, "");
        String _plus_5 = (_replace_1 + "/services/");
        String _name_3 = e_1.getName();
        String _plus_6 = (_plus_5 + _name_3);
        String _plus_7 = (_plus_6 + "ServicesImpl1.java");
        fsa.generateFile(_plus_7, 
          this.compileServiceImplementation(e_1));
        String _string_2 = this._iQualifiedNameProvider.getFullyQualifiedName(e_1).toString("/");
        String _name_4 = e_1.getName();
        String _plus_8 = ("/model/" + _name_4);
        String _replace_2 = _string_2.replace(_plus_8, "");
        String _plus_9 = (_replace_2 + "/controller/");
        String _name_5 = e_1.getName();
        String _plus_10 = (_plus_9 + _name_5);
        String _plus_11 = (_plus_10 + "Controller.java");
        fsa.generateFile(_plus_11, 
          this.compileRESTControllers(e_1));
      }
    }
    this.classesToServe.clear();
  }
  
  public CharSequence compileRESTControllers(final Entity e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _string = this._iQualifiedNameProvider.getFullyQualifiedName(e).toString(".");
    String _name = e.getName();
    String _plus = (".model." + _name);
    String _replace = _string.replace(_plus, "");
    String _plus_1 = (_replace + ".controller;");
    _builder.append(_plus_1);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import ");
    String _string_1 = this._iQualifiedNameProvider.getFullyQualifiedName(e).toString(".");
    _builder.append(_string_1);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("import ");
    String _string_2 = this._iQualifiedNameProvider.getFullyQualifiedName(e).toString(".");
    String _name_1 = e.getName();
    String _plus_2 = (".model." + _name_1);
    String _replace_1 = _string_2.replace(_plus_2, "");
    String _plus_3 = (_replace_1 + ".services");
    _builder.append(_plus_3);
    _builder.append(".");
    String _name_2 = e.getName();
    _builder.append(_name_2);
    _builder.append("Services;");
    _builder.newLineIfNotEmpty();
    _builder.append("import org.springframework.beans.factory.annotation.Autowired;");
    _builder.newLine();
    _builder.append("import org.springframework.http.HttpStatus;");
    _builder.newLine();
    _builder.append("import org.springframework.http.ResponseEntity;");
    _builder.newLine();
    _builder.append("import org.springframework.web.bind.annotation.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@RestController");
    _builder.newLine();
    _builder.append("@RequestMapping(value = \"/");
    String _firstLower = StringExtensions.toFirstLower(e.getName());
    _builder.append(_firstLower);
    _builder.append("\")");
    _builder.newLineIfNotEmpty();
    _builder.append("public class ");
    String _name_3 = e.getName();
    _builder.append(_name_3);
    _builder.append("Controller {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Autowired");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private ");
    String _name_4 = e.getName();
    _builder.append(_name_4, "    ");
    _builder.append("Services ps;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@RequestMapping(method = RequestMethod.GET)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public ResponseEntity<?> get");
    String _name_5 = e.getName();
    _builder.append(_name_5, "    ");
    _builder.append("s(){");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("return new ResponseEntity<>(ps.get");
    String _name_6 = e.getName();
    _builder.append(_name_6, "        ");
    _builder.append("s(), HttpStatus.ACCEPTED);");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@RequestMapping(method = RequestMethod.GET, path = \"/{");
    String _firstLower_1 = StringExtensions.toFirstLower(e.getName());
    _builder.append(_firstLower_1, "    ");
    _builder.append("Id}\")");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("public ResponseEntity<?> get");
    String _name_7 = e.getName();
    _builder.append(_name_7, "    ");
    _builder.append("(@PathVariable Integer ");
    String _firstLower_2 = StringExtensions.toFirstLower(e.getName());
    _builder.append(_firstLower_2, "    ");
    _builder.append("Id) {");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("return new ResponseEntity<>(ps.get");
    String _name_8 = e.getName();
    _builder.append(_name_8, "        ");
    _builder.append("(");
    String _firstLower_3 = StringExtensions.toFirstLower(e.getName());
    _builder.append(_firstLower_3, "        ");
    _builder.append("Id), HttpStatus.ACCEPTED);");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@RequestMapping(method = RequestMethod.POST)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public ResponseEntity<?> post");
    String _name_9 = e.getName();
    _builder.append(_name_9, "    ");
    _builder.append("(@RequestBody ");
    String _name_10 = e.getName();
    _builder.append(_name_10, "    ");
    _builder.append(" p) {");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("ps.save");
    String _name_11 = e.getName();
    _builder.append(_name_11, "        ");
    _builder.append("(p);");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("return new ResponseEntity<>(HttpStatus.ACCEPTED);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@RequestMapping(method = RequestMethod.PUT)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public ResponseEntity<?> update");
    String _name_12 = e.getName();
    _builder.append(_name_12, "    ");
    _builder.append("(@RequestBody ");
    String _name_13 = e.getName();
    _builder.append(_name_13, "    ");
    _builder.append(" p) {");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("ps.update");
    String _name_14 = e.getName();
    _builder.append(_name_14, "        ");
    _builder.append("(p);");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("return new ResponseEntity<>(HttpStatus.ACCEPTED);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileServiceImplementation(final Entity e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package  ");
    String _string = this._iQualifiedNameProvider.getFullyQualifiedName(e).toString(".");
    String _name = e.getName();
    String _plus = (".model." + _name);
    String _replace = _string.replace(_plus, "");
    String _plus_1 = (_replace + ".services;");
    _builder.append(_plus_1);
    _builder.newLineIfNotEmpty();
    _builder.append("import ");
    String _string_1 = this._iQualifiedNameProvider.getFullyQualifiedName(e).toString(".");
    _builder.append(_string_1);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("import org.springframework.stereotype.Service;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@Service");
    _builder.newLine();
    _builder.append("public class ");
    String _name_1 = e.getName();
    _builder.append(_name_1);
    _builder.append("ServicesImpl1 implements ");
    String _name_2 = e.getName();
    _builder.append(_name_2);
    _builder.append("Services{");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("List<");
    String _name_3 = e.getName();
    _builder.append(_name_3, "    ");
    _builder.append("> ");
    String _firstLower = StringExtensions.toFirstLower(e.getName());
    _builder.append(_firstLower, "    ");
    _builder.append("List=new ArrayList<>();");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void save");
    String _name_4 = e.getName();
    _builder.append(_name_4, "    ");
    _builder.append("(");
    String _name_5 = e.getName();
    _builder.append(_name_5, "    ");
    _builder.append(" p) {");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    String _firstLower_1 = StringExtensions.toFirstLower(e.getName());
    _builder.append(_firstLower_1, "        ");
    _builder.append("List.add(p);");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<");
    String _name_6 = e.getName();
    _builder.append(_name_6, "    ");
    _builder.append("> get");
    String _name_7 = e.getName();
    _builder.append(_name_7, "    ");
    _builder.append("s() {");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("return ");
    String _firstLower_2 = StringExtensions.toFirstLower(e.getName());
    _builder.append(_firstLower_2, "        ");
    _builder.append("List;");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void update");
    String _name_8 = e.getName();
    _builder.append(_name_8, "    ");
    _builder.append("(");
    String _name_9 = e.getName();
    _builder.append(_name_9, "    ");
    _builder.append(" p) {");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("for (");
    String _name_10 = e.getName();
    _builder.append(_name_10, "        ");
    _builder.append(" pe :");
    _builder.newLineIfNotEmpty();
    _builder.append("                ");
    String _firstLower_3 = StringExtensions.toFirstLower(e.getName());
    _builder.append(_firstLower_3, "                ");
    _builder.append("List) {");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("if (p.getId()==pe.getId()) {");
    _builder.newLine();
    _builder.append("                ");
    String _firstLower_4 = StringExtensions.toFirstLower(e.getName());
    _builder.append(_firstLower_4, "                ");
    _builder.append("List.add(");
    String _firstLower_5 = StringExtensions.toFirstLower(e.getName());
    _builder.append(_firstLower_5, "                ");
    _builder.append("List.indexOf(pe), p);");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public ");
    String _name_11 = e.getName();
    _builder.append(_name_11, "    ");
    _builder.append(" get");
    String _name_12 = e.getName();
    _builder.append(_name_12, "    ");
    _builder.append("(Integer pId) {");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    String _name_13 = e.getName();
    _builder.append(_name_13, "        ");
    _builder.append(" ans=null;");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("for (");
    String _name_14 = e.getName();
    _builder.append(_name_14, "        ");
    _builder.append(" pe :");
    _builder.newLineIfNotEmpty();
    _builder.append("                ");
    String _firstLower_6 = StringExtensions.toFirstLower(e.getName());
    _builder.append(_firstLower_6, "                ");
    _builder.append("List) {");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("if(pe.getId()==pId){");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("ans=pe;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return ans;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileServiceInterface(final Entity e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package  ");
    String _string = this._iQualifiedNameProvider.getFullyQualifiedName(e).toString(".");
    String _name = e.getName();
    String _plus = (".model." + _name);
    String _replace = _string.replace(_plus, "");
    String _plus_1 = (_replace + ".services;");
    _builder.append(_plus_1);
    _builder.newLineIfNotEmpty();
    _builder.append("import ");
    String _string_1 = this._iQualifiedNameProvider.getFullyQualifiedName(e).toString(".");
    _builder.append(_string_1);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public interface ");
    String _name_1 = e.getName();
    _builder.append(_name_1);
    _builder.append("Services {");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("public void save");
    String _name_2 = e.getName();
    _builder.append(_name_2, "    ");
    _builder.append("(");
    String _name_3 = e.getName();
    _builder.append(_name_3, "    ");
    _builder.append(" p);");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("public List<");
    String _name_4 = e.getName();
    _builder.append(_name_4, "    ");
    _builder.append("> get");
    String _name_5 = e.getName();
    _builder.append(_name_5, "    ");
    _builder.append("s();");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("public void update");
    String _name_6 = e.getName();
    _builder.append(_name_6, "    ");
    _builder.append("(");
    String _name_7 = e.getName();
    _builder.append(_name_7, "    ");
    _builder.append(" p);");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("public ");
    String _name_8 = e.getName();
    _builder.append(_name_8, "    ");
    _builder.append(" get");
    String _name_9 = e.getName();
    _builder.append(_name_9, "    ");
    _builder.append("(Integer pId);");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Entity e) {
    StringConcatenation _builder = new StringConcatenation();
    {
      QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(e.eContainer());
      boolean _tripleNotEquals = (_fullyQualifiedName != null);
      if (_tripleNotEquals) {
        _builder.append("package ");
        _builder.newLine();
        _builder.append("\t\t");
        QualifiedName _fullyQualifiedName_1 = this._iQualifiedNameProvider.getFullyQualifiedName(e.eContainer());
        _builder.append(_fullyQualifiedName_1, "\t\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t    ");
    _builder.newLine();
    {
      EList<Import> _imports = e.getImports();
      for(final Import i : _imports) {
        _builder.append("import ");
        String _importedNamespace = i.getImportedNamespace();
        _builder.append(_importedNamespace);
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("public class ");
    String _name = e.getName();
    _builder.append(_name);
    _builder.append(" ");
    {
      Entity _superType = e.getSuperType();
      boolean _tripleNotEquals_1 = (_superType != null);
      if (_tripleNotEquals_1) {
        _builder.append("extends ");
        QualifiedName _fullyQualifiedName_2 = this._iQualifiedNameProvider.getFullyQualifiedName(e.getSuperType());
        _builder.append(_fullyQualifiedName_2);
        _builder.append(" ");
      }
    }
    _builder.append("{");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("public ");
    String _name_1 = e.getName();
    _builder.append(_name_1, "\t");
    _builder.append("(){}");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("private Integer id;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Integer getId() {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return id;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setId(Integer id) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("this.id = id;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    {
      EList<Feature> _features = e.getFeatures();
      for(final Feature f : _features) {
        {
          boolean _equals = f.getName().equals("id");
          boolean _not = (!_equals);
          if (_not) {
            CharSequence _compile = this.compile(f);
            _builder.append(_compile);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Feature f) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _isMany = f.isMany();
      if (_isMany) {
        _builder.append("private java.util.ArrayList<");
        QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(f.getType());
        _builder.append(_fullyQualifiedName);
        _builder.append("> ");
        String _name = f.getName();
        _builder.append(_name);
        _builder.append(" =new java.util.ArrayList<");
        QualifiedName _fullyQualifiedName_1 = this._iQualifiedNameProvider.getFullyQualifiedName(f.getType());
        _builder.append(_fullyQualifiedName_1);
        _builder.append(">();");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("public java.util.ArrayList<");
        QualifiedName _fullyQualifiedName_2 = this._iQualifiedNameProvider.getFullyQualifiedName(f.getType());
        _builder.append(_fullyQualifiedName_2);
        _builder.append("> get");
        String _firstUpper = StringExtensions.toFirstUpper(f.getName());
        _builder.append(_firstUpper);
        _builder.append("() {");
        _builder.newLineIfNotEmpty();
        _builder.append("return ");
        String _name_1 = f.getName();
        _builder.append(_name_1);
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.newLine();
        _builder.append("public void set");
        String _firstUpper_1 = StringExtensions.toFirstUpper(f.getName());
        _builder.append(_firstUpper_1);
        _builder.append("(java.util.ArrayList<");
        QualifiedName _fullyQualifiedName_3 = this._iQualifiedNameProvider.getFullyQualifiedName(f.getType());
        _builder.append(_fullyQualifiedName_3);
        _builder.append("> ");
        String _name_2 = f.getName();
        _builder.append(_name_2);
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("this.");
        String _name_3 = f.getName();
        _builder.append(_name_3);
        _builder.append(" = ");
        String _name_4 = f.getName();
        _builder.append(_name_4);
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
      } else {
        _builder.append("private ");
        QualifiedName _fullyQualifiedName_4 = this._iQualifiedNameProvider.getFullyQualifiedName(f.getType());
        _builder.append(_fullyQualifiedName_4);
        _builder.append(" ");
        String _name_5 = f.getName();
        _builder.append(_name_5);
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("public ");
        QualifiedName _fullyQualifiedName_5 = this._iQualifiedNameProvider.getFullyQualifiedName(f.getType());
        _builder.append(_fullyQualifiedName_5);
        _builder.append(" get");
        String _firstUpper_2 = StringExtensions.toFirstUpper(f.getName());
        _builder.append(_firstUpper_2);
        _builder.append("() {");
        _builder.newLineIfNotEmpty();
        _builder.append("return ");
        String _name_6 = f.getName();
        _builder.append(_name_6);
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("public void set");
        String _firstUpper_3 = StringExtensions.toFirstUpper(f.getName());
        _builder.append(_firstUpper_3);
        _builder.append("(");
        QualifiedName _fullyQualifiedName_6 = this._iQualifiedNameProvider.getFullyQualifiedName(f.getType());
        _builder.append(_fullyQualifiedName_6);
        _builder.append(" ");
        String _name_7 = f.getName();
        _builder.append(_name_7);
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("this.");
        String _name_8 = f.getName();
        _builder.append(_name_8);
        _builder.append(" = ");
        String _name_9 = f.getName();
        _builder.append(_name_9);
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
      }
    }
    return _builder;
  }
}
