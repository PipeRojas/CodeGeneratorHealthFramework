/**
 * generated by Xtext 2.11.0
 */
package edu.eci.prot.dsl2.generator;

import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import edu.eci.prot.dsl2.dsl2.Entity;
import edu.eci.prot.dsl2.dsl2.Feature;
import edu.eci.prot.dsl2.dsl2.Import;
import edu.eci.prot.dsl2.generator.collections.JSModuleData;
import java.util.ArrayList;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class Dsl2Generator extends AbstractGenerator {
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  private Entity classToServe;
  
  private ArrayList<JSModuleData> appJSModules = new ArrayList<JSModuleData>();
  
  private ArrayList<Feature> diagnostics = new ArrayList<Feature>();
  
  private ArrayList<Feature> comments = new ArrayList<Feature>();
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<Entity> _filter = Iterables.<Entity>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Entity.class);
    for (final Entity e : _filter) {
      boolean _isPrincipal = e.isPrincipal();
      if (_isPrincipal) {
        this.classToServe = e;
      }
    }
    if ((this.classToServe != null)) {
      Iterable<Entity> _filter_1 = Iterables.<Entity>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Entity.class);
      for (final Entity e_1 : _filter_1) {
        {
          String _string = this._iQualifiedNameProvider.getFullyQualifiedName(e_1).toString("/");
          String _plus = (_string + ".java");
          fsa.generateFile(_plus, 
            this.compile(e_1));
          EList<Feature> _features = e_1.getFeatures();
          for (final Feature fea : _features) {
            boolean _isDiagnostic = fea.isDiagnostic();
            if (_isDiagnostic) {
              this.diagnostics.add(fea);
              String _firstUpper = StringExtensions.toFirstUpper(fea.getName());
              String _plus_1 = ("/static/app/RegistersInvestigatorView" + _firstUpper);
              String _plus_2 = (_plus_1 + "/RegistersInvestigatorView");
              String _firstUpper_1 = StringExtensions.toFirstUpper(fea.getName());
              String _plus_3 = (_plus_2 + _firstUpper_1);
              String _plus_4 = (_plus_3 + ".js");
              String _firstUpper_2 = StringExtensions.toFirstUpper(fea.getName());
              String _plus_5 = (("myApp." + "RegistersInvestigatorView") + _firstUpper_2);
              String _firstUpper_3 = StringExtensions.toFirstUpper(fea.getName());
              String _plus_6 = ("RegistersInvestigatorView" + _firstUpper_3);
              String _plus_7 = (_plus_6 + "/");
              String _plus_8 = (_plus_7 + "RegistersInvestigatorView");
              String _firstUpper_4 = StringExtensions.toFirstUpper(fea.getName());
              String _plus_9 = (_plus_8 + _firstUpper_4);
              String _plus_10 = (_plus_9 + ".js");
              JSModuleData _jSModuleData = new JSModuleData(_plus_4, _plus_5, _plus_10);
              this.appJSModules.add(_jSModuleData);
              String _firstUpper_5 = StringExtensions.toFirstUpper(fea.getName());
              String _plus_11 = ("/static/app/RegistersInvestigatorView" + _firstUpper_5);
              String _plus_12 = (_plus_11 + "/");
              String _plus_13 = (_plus_12 + "RegistersInvestigatorView");
              String _firstUpper_6 = StringExtensions.toFirstUpper(fea.getName());
              String _plus_14 = (_plus_13 + _firstUpper_6);
              String _plus_15 = (_plus_14 + ".html");
              fsa.generateFile(_plus_15, 
                this.compileRegistersInvestigatorViewHtml(fea));
              String _firstUpper_7 = StringExtensions.toFirstUpper(fea.getName());
              String _plus_16 = ("/static/app/RegistersInvestigatorView" + _firstUpper_7);
              String _plus_17 = (_plus_16 + "/");
              String _plus_18 = (_plus_17 + "RegistersInvestigatorView");
              String _firstUpper_8 = StringExtensions.toFirstUpper(fea.getName());
              String _plus_19 = (_plus_18 + _firstUpper_8);
              String _plus_20 = (_plus_19 + ".js");
              fsa.generateFile(_plus_20, 
                this.compileRegistersInvestigatorViewJS(fea));
              String _firstUpper_9 = StringExtensions.toFirstUpper(fea.getName());
              String _plus_21 = ("/static/app/RegisterDoctorView" + _firstUpper_9);
              String _plus_22 = (_plus_21 + "/RegisterDoctorView");
              String _firstUpper_10 = StringExtensions.toFirstUpper(fea.getName());
              String _plus_23 = (_plus_22 + _firstUpper_10);
              String _plus_24 = (_plus_23 + ".js");
              String _firstUpper_11 = StringExtensions.toFirstUpper(fea.getName());
              String _plus_25 = ("myApp.RegisterDoctorView" + _firstUpper_11);
              String _firstUpper_12 = StringExtensions.toFirstUpper(fea.getName());
              String _plus_26 = ("RegisterDoctorView" + _firstUpper_12);
              String _plus_27 = (_plus_26 + "/RegisterDoctorView");
              String _firstUpper_13 = StringExtensions.toFirstUpper(fea.getName());
              String _plus_28 = (_plus_27 + _firstUpper_13);
              String _plus_29 = (_plus_28 + ".js");
              JSModuleData _jSModuleData_1 = new JSModuleData(_plus_24, _plus_25, _plus_29);
              this.appJSModules.add(_jSModuleData_1);
              String _firstUpper_14 = StringExtensions.toFirstUpper(fea.getName());
              String _plus_30 = ("/static/app/RegisterDoctorView" + _firstUpper_14);
              String _plus_31 = (_plus_30 + "/");
              String _plus_32 = (_plus_31 + "RegisterDoctorView");
              String _firstUpper_15 = StringExtensions.toFirstUpper(fea.getName());
              String _plus_33 = (_plus_32 + _firstUpper_15);
              String _plus_34 = (_plus_33 + ".html");
              fsa.generateFile(_plus_34, 
                this.compileRegisterDoctorViewHtml(fea));
              String _firstUpper_16 = StringExtensions.toFirstUpper(fea.getName());
              String _plus_35 = ("/static/app/RegisterDoctorView" + _firstUpper_16);
              String _plus_36 = (_plus_35 + "/");
              String _plus_37 = (_plus_36 + "RegisterDoctorView");
              String _firstUpper_17 = StringExtensions.toFirstUpper(fea.getName());
              String _plus_38 = (_plus_37 + _firstUpper_17);
              String _plus_39 = (_plus_38 + ".js");
              fsa.generateFile(_plus_39, 
                this.compileRegisterDoctorViewJS(fea));
              String _firstUpper_18 = StringExtensions.toFirstUpper(fea.getName());
              String _plus_40 = ("/static/app/ControlRegister" + _firstUpper_18);
              String _plus_41 = (_plus_40 + "/");
              String _plus_42 = (_plus_41 + "ControlRegister");
              String _firstUpper_19 = StringExtensions.toFirstUpper(fea.getName());
              String _plus_43 = (_plus_42 + _firstUpper_19);
              String _plus_44 = (_plus_43 + ".js");
              String _firstUpper_20 = StringExtensions.toFirstUpper(fea.getName());
              String _plus_45 = ("myApp.ControlRegister" + _firstUpper_20);
              String _firstUpper_21 = StringExtensions.toFirstUpper(fea.getName());
              String _plus_46 = ("ControlRegister" + _firstUpper_21);
              String _plus_47 = (_plus_46 + "/");
              String _plus_48 = (_plus_47 + "ControlRegister");
              String _firstUpper_22 = StringExtensions.toFirstUpper(fea.getName());
              String _plus_49 = (_plus_48 + _firstUpper_22);
              String _plus_50 = (_plus_49 + ".js");
              JSModuleData _jSModuleData_2 = new JSModuleData(_plus_44, _plus_45, _plus_50);
              this.appJSModules.add(_jSModuleData_2);
              String _firstUpper_23 = StringExtensions.toFirstUpper(fea.getName());
              String _plus_51 = ("/static/app/ControlRegister" + _firstUpper_23);
              String _plus_52 = (_plus_51 + "/");
              String _plus_53 = (_plus_52 + "ControlRegister");
              String _firstUpper_24 = StringExtensions.toFirstUpper(fea.getName());
              String _plus_54 = (_plus_53 + _firstUpper_24);
              String _plus_55 = (_plus_54 + ".html");
              fsa.generateFile(_plus_55, 
                this.compileControlRegisterHtml(fea));
              String _firstUpper_25 = StringExtensions.toFirstUpper(fea.getName());
              String _plus_56 = ("/static/app/ControlRegister" + _firstUpper_25);
              String _plus_57 = (_plus_56 + "/");
              String _plus_58 = (_plus_57 + "ControlRegister");
              String _firstUpper_26 = StringExtensions.toFirstUpper(fea.getName());
              String _plus_59 = (_plus_58 + _firstUpper_26);
              String _plus_60 = (_plus_59 + ".js");
              fsa.generateFile(_plus_60, 
                this.compileControlRegisterJS(fea));
              String _firstUpper_27 = StringExtensions.toFirstUpper(fea.getName());
              String _plus_61 = ("/static/app/ControlView" + _firstUpper_27);
              String _plus_62 = (_plus_61 + "/");
              String _plus_63 = (_plus_62 + "ControlView");
              String _firstUpper_28 = StringExtensions.toFirstUpper(fea.getName());
              String _plus_64 = (_plus_63 + _firstUpper_28);
              String _plus_65 = (_plus_64 + ".js");
              String _firstUpper_29 = StringExtensions.toFirstUpper(fea.getName());
              String _plus_66 = ("myApp.ControlView" + _firstUpper_29);
              String _firstUpper_30 = StringExtensions.toFirstUpper(fea.getName());
              String _plus_67 = ("ControlView" + _firstUpper_30);
              String _plus_68 = (_plus_67 + "/");
              String _plus_69 = (_plus_68 + "ControlView");
              String _firstUpper_31 = StringExtensions.toFirstUpper(fea.getName());
              String _plus_70 = (_plus_69 + _firstUpper_31);
              String _plus_71 = (_plus_70 + ".js");
              JSModuleData _jSModuleData_3 = new JSModuleData(_plus_65, _plus_66, _plus_71);
              this.appJSModules.add(_jSModuleData_3);
              String _firstUpper_32 = StringExtensions.toFirstUpper(fea.getName());
              String _plus_72 = ("/static/app/ControlView" + _firstUpper_32);
              String _plus_73 = (_plus_72 + "/");
              String _plus_74 = (_plus_73 + "ControlView");
              String _firstUpper_33 = StringExtensions.toFirstUpper(fea.getName());
              String _plus_75 = (_plus_74 + _firstUpper_33);
              String _plus_76 = (_plus_75 + ".html");
              fsa.generateFile(_plus_76, 
                this.compileControlViewHtml(fea));
              String _firstUpper_34 = StringExtensions.toFirstUpper(fea.getName());
              String _plus_77 = ("/static/app/ControlView" + _firstUpper_34);
              String _plus_78 = (_plus_77 + "/");
              String _plus_79 = (_plus_78 + "ControlView");
              String _firstUpper_35 = StringExtensions.toFirstUpper(fea.getName());
              String _plus_80 = (_plus_79 + _firstUpper_35);
              String _plus_81 = (_plus_80 + ".js");
              fsa.generateFile(_plus_81, 
                this.compileControlViewJS(fea));
            } else {
              if (((!fea.isDiagnostic()) && fea.isMany())) {
                this.comments.add(fea);
                String _firstUpper_36 = StringExtensions.toFirstUpper(fea.getName());
                String _plus_82 = ("/static/app/CommentsDoctorView" + _firstUpper_36);
                String _plus_83 = (_plus_82 + "/CommentsDoctorView");
                String _firstUpper_37 = StringExtensions.toFirstUpper(fea.getName());
                String _plus_84 = (_plus_83 + _firstUpper_37);
                String _plus_85 = (_plus_84 + ".js");
                String _firstUpper_38 = StringExtensions.toFirstUpper(fea.getName());
                String _plus_86 = ("myApp.CommentsDoctorView" + _firstUpper_38);
                String _firstUpper_39 = StringExtensions.toFirstUpper(fea.getName());
                String _plus_87 = ("CommentsDoctorView" + _firstUpper_39);
                String _plus_88 = (_plus_87 + "/CommentsDoctorView");
                String _firstUpper_40 = StringExtensions.toFirstUpper(fea.getName());
                String _plus_89 = (_plus_88 + _firstUpper_40);
                String _plus_90 = (_plus_89 + ".js");
                JSModuleData _jSModuleData_4 = new JSModuleData(_plus_85, _plus_86, _plus_90);
                this.appJSModules.add(_jSModuleData_4);
                String _firstUpper_41 = StringExtensions.toFirstUpper(fea.getName());
                String _plus_91 = ("/static/app/CommentsDoctorView" + _firstUpper_41);
                String _plus_92 = (_plus_91 + "/");
                String _plus_93 = (_plus_92 + "CommentsDoctorView");
                String _firstUpper_42 = StringExtensions.toFirstUpper(fea.getName());
                String _plus_94 = (_plus_93 + _firstUpper_42);
                String _plus_95 = (_plus_94 + ".html");
                fsa.generateFile(_plus_95, 
                  this.compileCommentsDoctorViewHtml(fea));
                String _firstUpper_43 = StringExtensions.toFirstUpper(fea.getName());
                String _plus_96 = ("/static/app/CommentsDoctorView" + _firstUpper_43);
                String _plus_97 = (_plus_96 + "/");
                String _plus_98 = (_plus_97 + "CommentsDoctorView");
                String _firstUpper_44 = StringExtensions.toFirstUpper(fea.getName());
                String _plus_99 = (_plus_98 + _firstUpper_44);
                String _plus_100 = (_plus_99 + ".js");
                fsa.generateFile(_plus_100, 
                  this.compileCommentsDoctorViewJS(fea));
                String _firstUpper_45 = StringExtensions.toFirstUpper(fea.getName());
                String _plus_101 = ("/static/app/CommentRegister" + _firstUpper_45);
                String _plus_102 = (_plus_101 + "/");
                String _plus_103 = (_plus_102 + "CommentRegister");
                String _firstUpper_46 = StringExtensions.toFirstUpper(fea.getName());
                String _plus_104 = (_plus_103 + _firstUpper_46);
                String _plus_105 = (_plus_104 + ".js");
                String _firstUpper_47 = StringExtensions.toFirstUpper(fea.getName());
                String _plus_106 = ("myApp.CommentRegister" + _firstUpper_47);
                String _firstUpper_48 = StringExtensions.toFirstUpper(fea.getName());
                String _plus_107 = ("CommentRegister" + _firstUpper_48);
                String _plus_108 = (_plus_107 + "/");
                String _plus_109 = (_plus_108 + "CommentRegister");
                String _firstUpper_49 = StringExtensions.toFirstUpper(fea.getName());
                String _plus_110 = (_plus_109 + _firstUpper_49);
                String _plus_111 = (_plus_110 + ".js");
                JSModuleData _jSModuleData_5 = new JSModuleData(_plus_105, _plus_106, _plus_111);
                this.appJSModules.add(_jSModuleData_5);
                String _firstUpper_50 = StringExtensions.toFirstUpper(fea.getName());
                String _plus_112 = ("/static/app/CommentRegister" + _firstUpper_50);
                String _plus_113 = (_plus_112 + "/");
                String _plus_114 = (_plus_113 + "CommentRegister");
                String _firstUpper_51 = StringExtensions.toFirstUpper(fea.getName());
                String _plus_115 = (_plus_114 + _firstUpper_51);
                String _plus_116 = (_plus_115 + ".html");
                fsa.generateFile(_plus_116, 
                  this.compileCommentRegisterHtml(fea));
                String _firstUpper_52 = StringExtensions.toFirstUpper(fea.getName());
                String _plus_117 = ("/static/app/CommentRegister" + _firstUpper_52);
                String _plus_118 = (_plus_117 + "/");
                String _plus_119 = (_plus_118 + "CommentRegister");
                String _firstUpper_53 = StringExtensions.toFirstUpper(fea.getName());
                String _plus_120 = (_plus_119 + _firstUpper_53);
                String _plus_121 = (_plus_120 + ".js");
                fsa.generateFile(_plus_121, 
                  this.compileCommentRegisterJS(fea));
                String _firstUpper_54 = StringExtensions.toFirstUpper(fea.getName());
                String _plus_122 = ("/static/app/CommentsView" + _firstUpper_54);
                String _plus_123 = (_plus_122 + "/");
                String _plus_124 = (_plus_123 + "CommentsView");
                String _firstUpper_55 = StringExtensions.toFirstUpper(fea.getName());
                String _plus_125 = (_plus_124 + _firstUpper_55);
                String _plus_126 = (_plus_125 + ".js");
                String _firstUpper_56 = StringExtensions.toFirstUpper(fea.getName());
                String _plus_127 = ("myApp.CommentsView" + _firstUpper_56);
                String _firstUpper_57 = StringExtensions.toFirstUpper(fea.getName());
                String _plus_128 = ("CommentsView" + _firstUpper_57);
                String _plus_129 = (_plus_128 + "/");
                String _plus_130 = (_plus_129 + "CommentsView");
                String _firstUpper_58 = StringExtensions.toFirstUpper(fea.getName());
                String _plus_131 = (_plus_130 + _firstUpper_58);
                String _plus_132 = (_plus_131 + ".js");
                JSModuleData _jSModuleData_6 = new JSModuleData(_plus_126, _plus_127, _plus_132);
                this.appJSModules.add(_jSModuleData_6);
                String _firstUpper_59 = StringExtensions.toFirstUpper(fea.getName());
                String _plus_133 = ("/static/app/CommentsView" + _firstUpper_59);
                String _plus_134 = (_plus_133 + "/");
                String _plus_135 = (_plus_134 + "CommentsView");
                String _firstUpper_60 = StringExtensions.toFirstUpper(fea.getName());
                String _plus_136 = (_plus_135 + _firstUpper_60);
                String _plus_137 = (_plus_136 + ".html");
                fsa.generateFile(_plus_137, 
                  this.compileCommentsViewHtml(fea));
                String _firstUpper_61 = StringExtensions.toFirstUpper(fea.getName());
                String _plus_138 = ("/static/app/CommentsView" + _firstUpper_61);
                String _plus_139 = (_plus_138 + "/");
                String _plus_140 = (_plus_139 + "CommentsView");
                String _firstUpper_62 = StringExtensions.toFirstUpper(fea.getName());
                String _plus_141 = (_plus_140 + _firstUpper_62);
                String _plus_142 = (_plus_141 + ".js");
                fsa.generateFile(_plus_142, 
                  this.compileCommentsViewJS(fea));
              }
            }
          }
        }
      }
      String _string = this._iQualifiedNameProvider.getFullyQualifiedName(this.classToServe).toString("/");
      String _name = this.classToServe.getName();
      String _plus = ("/model/" + _name);
      String _replace = _string.replace(_plus, "");
      String _plus_1 = (_replace + "/services/");
      String _name_1 = this.classToServe.getName();
      String _plus_2 = (_plus_1 + _name_1);
      String _plus_3 = (_plus_2 + "Services.java");
      fsa.generateFile(_plus_3, 
        this.compileServiceInterface(this.classToServe));
      String _string_1 = this._iQualifiedNameProvider.getFullyQualifiedName(this.classToServe).toString("/");
      String _name_2 = this.classToServe.getName();
      String _plus_4 = ("/model/" + _name_2);
      String _replace_1 = _string_1.replace(_plus_4, "");
      String _plus_5 = (_replace_1 + "/services/");
      String _name_3 = this.classToServe.getName();
      String _plus_6 = (_plus_5 + _name_3);
      String _plus_7 = (_plus_6 + "ServicesImpl1.java");
      fsa.generateFile(_plus_7, 
        this.compileServiceImplementation(this.classToServe));
      String _string_2 = this._iQualifiedNameProvider.getFullyQualifiedName(this.classToServe).toString("/");
      String _name_4 = this.classToServe.getName();
      String _plus_8 = ("/model/" + _name_4);
      String _replace_2 = _string_2.replace(_plus_8, "");
      String _plus_9 = (_replace_2 + "/controller/");
      String _name_5 = this.classToServe.getName();
      String _plus_10 = (_plus_9 + _name_5);
      String _plus_11 = (_plus_10 + "Controller.java");
      fsa.generateFile(_plus_11, 
        this.compileRESTControllers(this.classToServe));
      fsa.generateFile("/static/app/services/services.js", this.compileJSServices(this.classToServe));
      fsa.generateFile("/static/app/PatientRegister/PatientRegister.html", 
        this.compilePatientRegisterHtml(this.classToServe));
      fsa.generateFile("/static/app/PatientRegister/PatientRegister.js", 
        this.compilePatientRegisterJS(this.classToServe));
      fsa.generateFile("/static/app/HomeDoctor/HomeDoctor.html", 
        this.compileHomeDoctorHtml(this.classToServe));
      fsa.generateFile("/static/app/HomeDoctor/HomeDoctor.js", 
        this.compileHomeDoctorJS(this.classToServe));
      fsa.generateFile("/static/app/HomePatient/HomePatient.html", 
        this.compileHomePatientHtml(this.classToServe));
      fsa.generateFile("/static/app/HomePatient/HomePatient.js", 
        this.compileHomePatientJS(this.classToServe));
      fsa.generateFile("/static/app/PatientProfile/PatientProfile.html", 
        this.compilePatientProfileHtml(this.classToServe));
      fsa.generateFile("/static/app/PatientProfile/PatientProfile.js", 
        this.compilePatientProfileJS(this.classToServe));
      fsa.generateFile("/static/app/UpdatePatient/UpdatePatient.html", 
        this.compileUpdatePatientHtml(this.classToServe));
      fsa.generateFile("/static/app/UpdatePatient/UpdatePatient.js", 
        this.compileUpdatePatientJS(this.classToServe));
      fsa.generateFile("/static/app/Templates/templateInvestigator.js", 
        this.compileTemplateInvestigatorViewJS(this.diagnostics));
      fsa.generateFile("/static/app/Templates/templateInvestigator.html", 
        this.compileTemplateInvestigatorViewHtml(this.diagnostics));
      fsa.generateFile("/static/app/Templates/templateDoctor.js", 
        this.compileTemplateDoctorViewJS(this.comments));
      fsa.generateFile("/static/app/Templates/templateDoctor.html", 
        this.compileTemplateDoctorViewHtml(this.comments));
      fsa.generateFile("/static/app/Templates/templatePatient.js", 
        this.compileTemplatePatientJS(this.diagnostics));
      fsa.generateFile("/static/app/Templates/templatePatient.html", 
        this.compileTemplatePatientHtml(this.diagnostics));
      fsa.generateFile(
        "/static/app/app.js", 
        this.compileAppJS(this.appJSModules));
      fsa.generateFile(
        "/static/app/index.html", 
        this.compileIndexHtml(this.appJSModules));
      fsa.generateFile("/static/app/LoginView/LoginView.js", 
        this.compileLoginViewJS(this.classToServe));
      fsa.generateFile("/static/app/LoginView/LoginView.html", 
        this.compileLoginViewHtml(this.classToServe));
    }
    this.comments.clear();
    this.appJSModules.clear();
    this.diagnostics.clear();
  }
  
  public CharSequence compileUpdatePatientJS(final Entity principal) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("angular.module(\'myApp.UpdatePatient\', [\'ngRoute\'])");
    _builder.newLine();
    _builder.newLine();
    _builder.append(".config([\'$routeProvider\', function($routeProvider) {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("$routeProvider.when(\'/UpdatePatient\', {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("templateUrl: \'UpdatePatient/UpdatePatient.html\',");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("controller: \'UpdatePatientCtrl\'");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("}])");
    _builder.newLine();
    _builder.newLine();
    _builder.append(".controller(\'UpdatePatientCtrl\', [\'$rootScope\', \'$scope\',\'");
    String _firstLower = StringExtensions.toFirstLower(principal.getName());
    _builder.append(_firstLower);
    _builder.append("\', \'");
    String _firstLower_1 = StringExtensions.toFirstLower(principal.getName());
    _builder.append(_firstLower_1);
    _builder.append("s\',\'$http\',\'$resource\', \'$location\', function ($rootScope, $scope, ");
    String _firstLower_2 = StringExtensions.toFirstLower(principal.getName());
    _builder.append(_firstLower_2);
    _builder.append(", ");
    String _firstLower_3 = StringExtensions.toFirstLower(principal.getName());
    _builder.append(_firstLower_3);
    _builder.append("s, $http, $resource, $location) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    {
      EList<Feature> _features = principal.getFeatures();
      for(final Feature f : _features) {
        {
          if ((f.isTransient() && (IterableExtensions.size(IteratorExtensions.<EObject>toIterable(f.getType().eAllContents())) == 0))) {
            _builder.append("\t\t");
            _builder.append("$scope.");
            String _name = f.getName();
            _builder.append(_name, "\t\t");
            _builder.append("=null;");
            _builder.newLineIfNotEmpty();
          } else {
            if (((!f.isMany()) && (IterableExtensions.size(IteratorExtensions.<EObject>toIterable(f.getType().eAllContents())) > 0))) {
              {
                Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(f.getType().eAllContents());
                for(final EObject dat : _iterable) {
                  Feature feature = ((Feature) dat);
                  _builder.newLineIfNotEmpty();
                  {
                    boolean _isTransient = feature.isTransient();
                    if (_isTransient) {
                      _builder.append("$scope.");
                      String _name_1 = f.getName();
                      _builder.append(_name_1);
                      String _firstUpper = StringExtensions.toFirstUpper(feature.getName());
                      _builder.append(_firstUpper);
                      _builder.append("=null;");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    _builder.append("        ");
    _builder.append("$rootScope.nameP=null;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$scope.update= function(){");
    _builder.newLine();
    _builder.append("            ");
    String _firstLower_4 = StringExtensions.toFirstLower(principal.getName());
    _builder.append(_firstLower_4, "            ");
    _builder.append(".get({");
    String _firstLower_5 = StringExtensions.toFirstLower(principal.getName());
    _builder.append(_firstLower_5, "            ");
    _builder.append("Id:\"\"+$rootScope.id");
    String _name_2 = principal.getName();
    _builder.append(_name_2, "            ");
    _builder.append("})");
    _builder.newLineIfNotEmpty();
    _builder.append("                    ");
    _builder.append(".$promise.then(");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("//success");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("function( value ){");
    _builder.newLine();
    _builder.append("                                ");
    _builder.append("$scope.");
    String _firstLower_6 = StringExtensions.toFirstLower(principal.getName());
    _builder.append(_firstLower_6, "                                ");
    _builder.append("T=value;");
    _builder.newLineIfNotEmpty();
    {
      EList<Feature> _features_1 = principal.getFeatures();
      for(final Feature f_1 : _features_1) {
        {
          if ((f_1.isTransient() && (IterableExtensions.size(IteratorExtensions.<EObject>toIterable(f_1.getType().eAllContents())) == 0))) {
            _builder.append("if($scope.");
            String _name_3 = f_1.getName();
            _builder.append(_name_3);
            _builder.append("!=null){");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("$scope.");
            String _firstLower_7 = StringExtensions.toFirstLower(principal.getName());
            _builder.append(_firstLower_7, "\t");
            _builder.append("T.");
            String _name_4 = f_1.getName();
            _builder.append(_name_4, "\t");
            _builder.append("=$scope.");
            String _name_5 = f_1.getName();
            _builder.append(_name_5, "\t");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
            _builder.append("}");
            _builder.newLine();
          } else {
            if (((!f_1.isMany()) && (IterableExtensions.size(IteratorExtensions.<EObject>toIterable(f_1.getType().eAllContents())) > 0))) {
              {
                Iterable<EObject> _iterable_1 = IteratorExtensions.<EObject>toIterable(f_1.getType().eAllContents());
                for(final EObject dat_1 : _iterable_1) {
                  Feature feature_1 = ((Feature) dat_1);
                  _builder.newLineIfNotEmpty();
                  {
                    boolean _isTransient_1 = feature_1.isTransient();
                    if (_isTransient_1) {
                      _builder.append("if($scope.");
                      String _name_6 = f_1.getName();
                      _builder.append(_name_6);
                      String _firstUpper_1 = StringExtensions.toFirstUpper(feature_1.getName());
                      _builder.append(_firstUpper_1);
                      _builder.append("!=null){");
                      _builder.newLineIfNotEmpty();
                      _builder.append("    ");
                      _builder.append("$scope.");
                      String _firstLower_8 = StringExtensions.toFirstLower(principal.getName());
                      _builder.append(_firstLower_8, "    ");
                      _builder.append("T.");
                      String _name_7 = f_1.getName();
                      _builder.append(_name_7, "    ");
                      _builder.append(".");
                      String _name_8 = feature_1.getName();
                      _builder.append(_name_8, "    ");
                      _builder.append("=$scope.");
                      String _name_9 = f_1.getName();
                      _builder.append(_name_9, "    ");
                      String _firstUpper_2 = StringExtensions.toFirstUpper(feature_1.getName());
                      _builder.append(_firstUpper_2, "    ");
                      _builder.append(";");
                      _builder.newLineIfNotEmpty();
                      _builder.append("}");
                      _builder.newLine();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    _builder.append("                                ");
    String _firstLower_9 = StringExtensions.toFirstLower(principal.getName());
    _builder.append(_firstLower_9, "                                ");
    _builder.append("s.update($scope.");
    String _firstLower_10 = StringExtensions.toFirstLower(principal.getName());
    _builder.append(_firstLower_10, "                                ");
    _builder.append("T)");
    _builder.newLineIfNotEmpty();
    _builder.append("                                ");
    _builder.append(".$promise.then(");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("//success");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("function(value){");
    _builder.newLine();
    _builder.append("                                        ");
    _builder.append("console.log(\"Registro Exitoso\");");
    _builder.newLine();
    _builder.append("                                        ");
    _builder.append("alert(\"Registro Exitoso\");");
    _builder.newLine();
    _builder.append("            \t\t\t\t\t\t\t");
    _builder.append("$location.path(\"HomePatient\");");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("//error");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("function( error ){");
    _builder.newLine();
    _builder.append("                                        ");
    _builder.append("console.log(\"El paciente no se pudo actualizar\");");
    _builder.newLine();
    _builder.append("                                        ");
    _builder.append("alert(\"No se puedo registrar\");");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                                ");
    _builder.append(");");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("//error");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("function( error ){");
    _builder.newLine();
    _builder.append("                                ");
    _builder.append("alert(\"El Identificador no se encuentra registrado\");");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append(");");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("};");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}]);");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileUpdatePatientHtml(final Entity principal) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<div ng-include=\"\'/app/Templates/templatePatient.html\'\"></div>");
    _builder.newLine();
    _builder.append("<div id=\"wrapper\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<div id=\"page-wrapper\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<div class=\"row\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<div class=\"col-lg-12\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<h1 class=\"page-header\">Registra tus datos</h1>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<!-- /.col-lg-12 -->");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<!-- /.row -->");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<div class=\"row\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<div class=\"col-lg-12\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<div class=\"panel panel-default\">");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<div class=\"panel-body\">");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("<div class=\"row\">");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("<div class=\"col-lg-6\">");
    _builder.newLine();
    _builder.append("                                ");
    _builder.append("<form role=\"form\">");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("<div class=\"form-group\">");
    _builder.newLine();
    {
      EList<Feature> _features = principal.getFeatures();
      for(final Feature f : _features) {
        {
          if ((f.isTransient() && (IterableExtensions.size(IteratorExtensions.<EObject>toIterable(f.getType().eAllContents())) == 0))) {
            {
              boolean _equals = f.getType().getName().equals("String");
              if (_equals) {
                _builder.append("<label> ");
                String _firstUpper = StringExtensions.toFirstUpper(f.getName());
                _builder.append(_firstUpper);
                _builder.append(" </label>");
                _builder.newLineIfNotEmpty();
                _builder.append("<br><br>");
                _builder.newLine();
                _builder.append("<input type=\"text\" ng-model=\"");
                String _name = f.getName();
                _builder.append(_name);
                _builder.append("\">");
                _builder.newLineIfNotEmpty();
                _builder.append("<br><br>");
                _builder.newLine();
              } else {
                boolean _equals_1 = f.getType().getName().equals("Integer");
                if (_equals_1) {
                  _builder.append("<label> ");
                  String _firstUpper_1 = StringExtensions.toFirstUpper(f.getName());
                  _builder.append(_firstUpper_1);
                  _builder.append(" </label>");
                  _builder.newLineIfNotEmpty();
                  _builder.append("<br><br>");
                  _builder.newLine();
                  _builder.append("<input type=\"number\" ng-model=\"");
                  String _name_1 = f.getName();
                  _builder.append(_name_1);
                  _builder.append("\">");
                  _builder.newLineIfNotEmpty();
                  _builder.append("<br><br>");
                  _builder.newLine();
                } else {
                  boolean _equals_2 = f.getType().getName().equals("Date");
                  if (_equals_2) {
                    _builder.append("<label> ");
                    String _firstUpper_2 = StringExtensions.toFirstUpper(f.getName());
                    _builder.append(_firstUpper_2);
                    _builder.append(" </label>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("<br><br>");
                    _builder.newLine();
                    _builder.append("<input type=\"date\" ng-model=\"");
                    String _name_2 = f.getName();
                    _builder.append(_name_2);
                    _builder.append("\">");
                    _builder.newLineIfNotEmpty();
                    _builder.append("<br><br>");
                    _builder.newLine();
                  }
                }
              }
            }
          } else {
            if (((!f.isMany()) && (IterableExtensions.size(IteratorExtensions.<EObject>toIterable(f.getType().eAllContents())) > 0))) {
              _builder.append("<label><h2> Datos de ");
              String _firstUpper_3 = StringExtensions.toFirstUpper(f.getName());
              _builder.append(_firstUpper_3);
              _builder.append(" </h2></label>");
              _builder.newLineIfNotEmpty();
              _builder.append("<br><br>");
              _builder.newLine();
              {
                Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(f.getType().eAllContents());
                for(final EObject dat : _iterable) {
                  Feature feature = ((Feature) dat);
                  _builder.newLineIfNotEmpty();
                  {
                    boolean _isTransient = feature.isTransient();
                    if (_isTransient) {
                      {
                        boolean _equals_3 = feature.getType().getName().equals("String");
                        if (_equals_3) {
                          _builder.append("<label> ");
                          String _firstUpper_4 = StringExtensions.toFirstUpper(feature.getName());
                          _builder.append(_firstUpper_4);
                          _builder.append(" </label>");
                          _builder.newLineIfNotEmpty();
                          _builder.append("<br><br>");
                          _builder.newLine();
                          _builder.append("<input type=\"text\" ng-model=\"");
                          String _name_3 = f.getName();
                          _builder.append(_name_3);
                          String _firstUpper_5 = StringExtensions.toFirstUpper(feature.getName());
                          _builder.append(_firstUpper_5);
                          _builder.append("\">");
                          _builder.newLineIfNotEmpty();
                          _builder.append("<br><br>");
                          _builder.newLine();
                        } else {
                          boolean _equals_4 = feature.getType().getName().equals("Integer");
                          if (_equals_4) {
                            _builder.append("<label> ");
                            String _firstUpper_6 = StringExtensions.toFirstUpper(feature.getName());
                            _builder.append(_firstUpper_6);
                            _builder.append(" </label>");
                            _builder.newLineIfNotEmpty();
                            _builder.append("<br><br>");
                            _builder.newLine();
                            _builder.append("<input type=\"number\" ng-model=\"");
                            String _name_4 = f.getName();
                            _builder.append(_name_4);
                            String _firstUpper_7 = StringExtensions.toFirstUpper(feature.getName());
                            _builder.append(_firstUpper_7);
                            _builder.append("\">");
                            _builder.newLineIfNotEmpty();
                            _builder.append("<br><br>");
                            _builder.newLine();
                          } else {
                            boolean _equals_5 = feature.getType().getName().equals("Date");
                            if (_equals_5) {
                              _builder.append("<label> ");
                              String _firstUpper_8 = StringExtensions.toFirstUpper(feature.getName());
                              _builder.append(_firstUpper_8);
                              _builder.append(" </label>");
                              _builder.newLineIfNotEmpty();
                              _builder.append("<br><br>");
                              _builder.newLine();
                              _builder.append("<input type=\"date\" ng-model=\"");
                              String _name_5 = f.getName();
                              _builder.append(_name_5);
                              String _firstUpper_9 = StringExtensions.toFirstUpper(feature.getName());
                              _builder.append(_firstUpper_9);
                              _builder.append("\">");
                              _builder.newLineIfNotEmpty();
                              _builder.append("<br><br>");
                              _builder.newLine();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    _builder.append("                                    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("<button type=\"submit\" class=\"btn btn-default\" ng-click=\"update()\">Actualizar</button>");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("<button type=\"reset\" class=\"btn btn-default\">Reiniciar</button>");
    _builder.newLine();
    _builder.append("                                ");
    _builder.append("</form>");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("<!-- /.row (nested) -->");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<!-- /.panel-body -->");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<!-- /.panel -->");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<!-- /.col-lg-12 -->");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<!-- /.row -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!-- /#page-wrapper -->");
    _builder.newLine();
    _builder.newLine();
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("<!-- /#wrapper -->");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compilePatientProfileJS(final Entity principal) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("angular.module(\'myApp.PatientProfile\', [\'ngRoute\'])");
    _builder.newLine();
    _builder.newLine();
    _builder.append(".config([\'$routeProvider\', function($routeProvider) {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("$routeProvider.when(\'/PatientProfile\', {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("templateUrl: \'PatientProfile/PatientProfile.html\',");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("controller: \'PatientProfileCtrl\'");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("}])");
    _builder.newLine();
    _builder.newLine();
    _builder.append(".controller(\'PatientProfileCtrl\', [\'$rootScope\', \'$scope\', \'");
    String _firstLower = StringExtensions.toFirstLower(principal.getName());
    _builder.append(_firstLower);
    _builder.append("\', \'$location\', function ($rootScope, $scope, ");
    String _firstLower_1 = StringExtensions.toFirstLower(principal.getName());
    _builder.append(_firstLower_1);
    _builder.append(",$location) {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    String _firstLower_2 = StringExtensions.toFirstLower(principal.getName());
    _builder.append(_firstLower_2, "    ");
    _builder.append(".get({");
    String _firstLower_3 = StringExtensions.toFirstLower(principal.getName());
    _builder.append(_firstLower_3, "    ");
    _builder.append("Id:\"\"+$rootScope.id");
    String _name = principal.getName();
    _builder.append(_name, "    ");
    _builder.append("})");
    _builder.newLineIfNotEmpty();
    _builder.append("                ");
    _builder.append(".$promise.then(");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("//success");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("function( value ){");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("$scope.");
    String _firstLower_4 = StringExtensions.toFirstLower(principal.getName());
    _builder.append(_firstLower_4, "                            ");
    _builder.append("=value;");
    _builder.newLineIfNotEmpty();
    _builder.append("                        ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("//error");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("function( error ){");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("alert(\"El paciente no se encuentra registrado\");");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append(");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$scope.continueUP=function(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$location.path(\"UpdatePatient\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("};");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}]);");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compilePatientProfileHtml(final Entity principal) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<div ng-include=\"\'/app/Templates/templatePatient.html\'\"></div>");
    _builder.newLine();
    _builder.append("<div id=\"page-wrapper\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<div class=\"row\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<div class=\"col-lg-12\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<h1 class=\"page-header\">Tus Datos</h1>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<!-- /.col-lg-12 -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!-- /.row -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<div class=\"row\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<div class=\"col-lg-4\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<div class=\"panel panel-default\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<div class=\"panel-heading\">");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("Datos personales");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<div class=\"panel-body\">");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<h2> Numero de Identificacion");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("<br><br>");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("<small> {{");
    String _firstLower = StringExtensions.toFirstLower(principal.getName());
    _builder.append(_firstLower, "                        ");
    _builder.append(".id}} </small>");
    _builder.newLineIfNotEmpty();
    _builder.append("                    ");
    _builder.append("</h2>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<br><br>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<h2> Nombre");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("<br><br>");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("<small> {{");
    String _firstLower_1 = StringExtensions.toFirstLower(principal.getName());
    _builder.append(_firstLower_1, "                        ");
    _builder.append(".name}} </small>");
    _builder.newLineIfNotEmpty();
    _builder.append("                    ");
    _builder.append("</h2>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<br><br>");
    _builder.newLine();
    _builder.newLine();
    {
      EList<Feature> _features = principal.getFeatures();
      for(final Feature f : _features) {
        {
          if (((!f.getName().equals("id")) && (!f.getName().equals("name")))) {
            {
              if ((f.getType().getName().equals("String") || f.getType().getName().equals("Integer"))) {
                _builder.append("<h2> ");
                String _firstUpper = StringExtensions.toFirstUpper(f.getName());
                _builder.append(_firstUpper);
                _builder.newLineIfNotEmpty();
                _builder.append("\t                        ");
                _builder.append("<br><br>");
                _builder.newLine();
                _builder.append("\t                        ");
                _builder.append("<small> {{");
                String _firstLower_2 = StringExtensions.toFirstLower(principal.getName());
                _builder.append(_firstLower_2, "\t                        ");
                _builder.append(".");
                String _name = f.getName();
                _builder.append(_name, "\t                        ");
                _builder.append("}} </small>");
                _builder.newLineIfNotEmpty();
                _builder.append("\t                    ");
                _builder.append("</h2>");
                _builder.newLine();
                _builder.append("\t                    ");
                _builder.append("<br><br>");
                _builder.newLine();
              } else {
                boolean _equals = f.getType().getName().equals("Date");
                if (_equals) {
                  _builder.append("<h2> ");
                  String _firstUpper_1 = StringExtensions.toFirstUpper(f.getName());
                  _builder.append(_firstUpper_1);
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t                        ");
                  _builder.append("<br><br>");
                  _builder.newLine();
                  _builder.append("\t                        ");
                  _builder.append("<small> {{");
                  String _firstLower_3 = StringExtensions.toFirstLower(principal.getName());
                  _builder.append(_firstLower_3, "\t                        ");
                  _builder.append(".");
                  String _name_1 = f.getName();
                  _builder.append(_name_1, "\t                        ");
                  _builder.append(" | date:\'yyyy-MM-dd\'}} </small>");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t                    ");
                  _builder.append("</h2>");
                  _builder.newLine();
                  _builder.append("\t                    ");
                  _builder.append("<br><br>");
                  _builder.newLine();
                } else {
                  if (((!f.isMany()) && (IterableExtensions.size(IteratorExtensions.<EObject>toIterable(f.getType().eAllContents())) > 0))) {
                    _builder.append("<label><h1> Datos de ");
                    String _firstUpper_2 = StringExtensions.toFirstUpper(f.getName());
                    _builder.append(_firstUpper_2);
                    _builder.append(" </h1></label>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("<br><br>");
                    _builder.newLine();
                    {
                      Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(f.getType().eAllContents());
                      for(final EObject dat : _iterable) {
                        _builder.append("        ");
                        Feature feature = ((Feature) dat);
                        _builder.newLineIfNotEmpty();
                        {
                          if ((feature.getType().getName().equals("String") || feature.getType().getName().equals("Integer"))) {
                            _builder.append("<h2> ");
                            String _firstUpper_3 = StringExtensions.toFirstUpper(feature.getName());
                            _builder.append(_firstUpper_3);
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t\t\t\t                        ");
                            _builder.append("<br><br>");
                            _builder.newLine();
                            _builder.append("\t\t\t\t                        ");
                            _builder.append("<small> {{");
                            String _firstLower_4 = StringExtensions.toFirstLower(principal.getName());
                            _builder.append(_firstLower_4, "\t\t\t\t                        ");
                            _builder.append(".");
                            String _name_2 = f.getName();
                            _builder.append(_name_2, "\t\t\t\t                        ");
                            _builder.append(".");
                            String _name_3 = feature.getName();
                            _builder.append(_name_3, "\t\t\t\t                        ");
                            _builder.append("}} </small>");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t\t\t\t                    ");
                            _builder.append("</h2>");
                            _builder.newLine();
                            _builder.append("\t\t\t\t                    ");
                            _builder.append("<br><br>");
                            _builder.newLine();
                          } else {
                            boolean _equals_1 = feature.getType().getName().equals("Date");
                            if (_equals_1) {
                              _builder.append("<h2> ");
                              String _firstUpper_4 = StringExtensions.toFirstUpper(feature.getName());
                              _builder.append(_firstUpper_4);
                              _builder.newLineIfNotEmpty();
                              _builder.append("\t\t\t\t                        ");
                              _builder.append("<br><br>");
                              _builder.newLine();
                              _builder.append("\t\t\t\t                        ");
                              _builder.append("<small> {{");
                              String _firstLower_5 = StringExtensions.toFirstLower(principal.getName());
                              _builder.append(_firstLower_5, "\t\t\t\t                        ");
                              _builder.append(".");
                              String _name_4 = f.getName();
                              _builder.append(_name_4, "\t\t\t\t                        ");
                              _builder.append(".");
                              String _name_5 = feature.getName();
                              _builder.append(_name_5, "\t\t\t\t                        ");
                              _builder.append(" | date:\'yyyy-MM-dd\'}} </small>");
                              _builder.newLineIfNotEmpty();
                              _builder.append("\t\t\t\t                    ");
                              _builder.append("</h2>");
                              _builder.newLine();
                              _builder.append("\t\t\t\t                    ");
                              _builder.append("<br><br>");
                              _builder.newLine();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<button type=\"button\" class=\"btn btn-primary btn-lg btn-block\" ng-click=\"continueUP()\">Actualizar Datos</button>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<!-- /.panel-body -->");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<!-- /.panel -->");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<!-- /.col-lg-4 -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!-- /.row -->");
    _builder.newLine();
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("<!-- /#page-wrapper -->");
    _builder.newLine();
    _builder.newLine();
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("<!-- /#wrapper -->");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileControlViewJS(final Feature diagnostic) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("angular.module(\'myApp.ControlView");
    String _firstUpper = StringExtensions.toFirstUpper(diagnostic.getName());
    _builder.append(_firstUpper);
    _builder.append("\', [\'ngRoute\'])");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append(".config([\'$routeProvider\', function($routeProvider) {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("$routeProvider.when(\'/ControlView");
    String _firstUpper_1 = StringExtensions.toFirstUpper(diagnostic.getName());
    _builder.append(_firstUpper_1, "  ");
    _builder.append("\', {");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("templateUrl: \'ControlView");
    String _firstUpper_2 = StringExtensions.toFirstUpper(diagnostic.getName());
    _builder.append(_firstUpper_2, "    ");
    _builder.append("/ControlView");
    String _firstUpper_3 = StringExtensions.toFirstUpper(diagnostic.getName());
    _builder.append(_firstUpper_3, "    ");
    _builder.append(".html\',");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("controller: \'ControlView");
    String _firstUpper_4 = StringExtensions.toFirstUpper(diagnostic.getName());
    _builder.append(_firstUpper_4, "    ");
    _builder.append("Ctrl\'");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("}])");
    _builder.newLine();
    _builder.newLine();
    _builder.append(".controller(\'ControlView");
    String _firstUpper_5 = StringExtensions.toFirstUpper(diagnostic.getName());
    _builder.append(_firstUpper_5);
    _builder.append("Ctrl\', [\'$rootScope\', \'$scope\', \'");
    String _firstLower = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower);
    _builder.append("\', function ($rootScope, $scope, ");
    String _firstLower_1 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_1);
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    String _firstLower_2 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_2, "    ");
    _builder.append(".get({");
    String _firstLower_3 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_3, "    ");
    _builder.append("Id:\"\"+$rootScope.id");
    String _name = this.classToServe.getName();
    _builder.append(_name, "    ");
    _builder.append("})");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append(".$promise.then(");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("//success");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("function( value ){");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("$scope.");
    String _firstLower_4 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_4, "                ");
    _builder.append("=value;");
    _builder.newLineIfNotEmpty();
    _builder.append("                ");
    _builder.append("$scope.diagnostics=$scope.");
    String _firstLower_5 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_5, "                ");
    _builder.append(".");
    String _name_1 = diagnostic.getName();
    _builder.append(_name_1, "                ");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    {
      Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(diagnostic.getType().eAllContents());
      for(final EObject dat : _iterable) {
        Feature feature = ((Feature) dat);
        _builder.newLineIfNotEmpty();
        {
          boolean _equals = feature.getName().equals("date");
          boolean _not = (!_equals);
          if (_not) {
            _builder.append("$scope.");
            String _name_2 = feature.getName();
            _builder.append(_name_2);
            _builder.append("=[];");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("                ");
    _builder.append("$scope.labels=[];");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("$scope.series = [\'Datos de Control\'];");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("for(var n=0; n<$scope.diagnostics.length; n++){");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("var dd=$scope.diagnostics[n];");
    _builder.newLine();
    {
      Iterable<EObject> _iterable_1 = IteratorExtensions.<EObject>toIterable(diagnostic.getType().eAllContents());
      for(final EObject dat_1 : _iterable_1) {
        Feature feature_1 = ((Feature) dat_1);
        _builder.newLineIfNotEmpty();
        {
          boolean _equals_1 = feature_1.getType().getName().equals("Integer");
          if (_equals_1) {
            _builder.append("$scope.");
            String _name_3 = feature_1.getName();
            _builder.append(_name_3);
            _builder.append(".push(dd.");
            String _name_4 = feature_1.getName();
            _builder.append(_name_4);
            _builder.append(");");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("                    ");
    _builder.append("var datee=new Date(dd.date);");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("var dia = datee.getDate();");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("var mes = parseInt(datee.getMonth()) + 1;");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("var year = datee.getFullYear();");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("var dated=dia+\"/\"+mes+\"/\"+year;");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("$scope.labels.push(dated);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("//error");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("function( error ){");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("alert(\"Error\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(");");
    _builder.newLine();
    _builder.append("}]);");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileControlViewHtml(final Feature diagnostic) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<div ng-include=\"\'/app/Templates/templatePatient.html\'\"></div>");
    _builder.newLine();
    _builder.append("<div id=\"page-wrapper\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<div class=\"row\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<div class=\"col-lg-12\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<h1 class=\"page-header\">Tus datos de control de ");
    String _firstUpper = StringExtensions.toFirstUpper(diagnostic.getName());
    _builder.append(_firstUpper, "            ");
    _builder.append("</h1>");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<!-- /.col-lg-12 -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<div class=\"row\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<div class=\"col-lg-12\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<div class=\"panel panel-default\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<div class=\"panel-heading\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<!-- /.panel-heading -->");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<div class=\"panel-body\">");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<table width=\"100%\" class=\"table table-striped table-bordered table-hover\" id=\"dataTables-example\">");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("<thead>");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("<tr>");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("<th>Fecha de control</th>");
    _builder.newLine();
    {
      Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(diagnostic.getType().eAllContents());
      for(final EObject dat : _iterable) {
        _builder.append("                            ");
        Feature feature = ((Feature) dat);
        _builder.newLineIfNotEmpty();
        {
          boolean _equals = feature.getName().equals("date");
          boolean _not = (!_equals);
          if (_not) {
            _builder.append("                            ");
            _builder.append("<th>");
            String _firstUpper_1 = StringExtensions.toFirstUpper(feature.getName());
            _builder.append(_firstUpper_1, "                            ");
            _builder.append("</th>");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("                        ");
    _builder.append("</tr>");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("</thead>");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("<tbody>");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("<tr ng-repeat=\"d in diagnostics\" >");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("<td>{{d.date | date:\"dd/MMMM/yyyy\"}}</td>");
    _builder.newLine();
    {
      Iterable<EObject> _iterable_1 = IteratorExtensions.<EObject>toIterable(diagnostic.getType().eAllContents());
      for(final EObject dat_1 : _iterable_1) {
        _builder.append("                            ");
        Feature feature_1 = ((Feature) dat_1);
        _builder.newLineIfNotEmpty();
        {
          boolean _equals_1 = feature_1.getName().equals("date");
          boolean _not_1 = (!_equals_1);
          if (_not_1) {
            _builder.append("                            ");
            _builder.append("<td>{{d.");
            String _name = feature_1.getName();
            _builder.append(_name, "                            ");
            _builder.append("}}</td>");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("                        ");
    _builder.append("</tr>");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("</tbody>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("</table>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<!-- /.table-responsive -->");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<!-- /.panel-body -->");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<!-- /.panel -->");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<!-- /.col-lg-12 -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!-- /.row -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<div class=\"row\">");
    _builder.newLine();
    {
      Iterable<EObject> _iterable_2 = IteratorExtensions.<EObject>toIterable(diagnostic.getType().eAllContents());
      for(final EObject dat_2 : _iterable_2) {
        _builder.append("\t    ");
        Feature feature_2 = ((Feature) dat_2);
        _builder.newLineIfNotEmpty();
        {
          boolean _equals_2 = feature_2.getType().getName().equals("Integer");
          if (_equals_2) {
            _builder.append("\t    ");
            _builder.append("<div class=\"col-lg-4\">");
            _builder.newLine();
            _builder.append("\t    ");
            _builder.append("<div class=\"panel panel-default\">");
            _builder.newLine();
            _builder.append("\t    ");
            _builder.append("<div class=\"panel-heading\">");
            _builder.newLine();
            _builder.append("\t    ");
            String _firstUpper_2 = StringExtensions.toFirstUpper(feature_2.getName());
            _builder.append(_firstUpper_2, "\t    ");
            _builder.newLineIfNotEmpty();
            _builder.append("\t    ");
            _builder.append("</div>");
            _builder.newLine();
            _builder.append("\t    ");
            _builder.append("<div class=\"panel-body\">");
            _builder.newLine();
            _builder.append("\t    ");
            _builder.append("<canvas  id=\"");
            String _name_1 = feature_2.getName();
            _builder.append(_name_1, "\t    ");
            _builder.append("\" class=\"chart chart-bar\"");
            _builder.newLineIfNotEmpty();
            _builder.append("\t    ");
            _builder.append("chart-data=\"");
            String _name_2 = feature_2.getName();
            _builder.append(_name_2, "\t    ");
            _builder.append("\" chart-labels=\"labels\" chart-series=\"series\">");
            _builder.newLineIfNotEmpty();
            _builder.append("\t    ");
            _builder.append("</canvas>");
            _builder.newLine();
            _builder.append("\t    ");
            _builder.append("</div>");
            _builder.newLine();
            _builder.append("\t    ");
            _builder.append("<!-- /.panel-body -->");
            _builder.newLine();
            _builder.append("\t    ");
            _builder.append("</div>");
            _builder.newLine();
            _builder.append("\t    ");
            _builder.append("<!-- /.panel -->");
            _builder.newLine();
            _builder.append("\t    ");
            _builder.append("</div>");
            _builder.newLine();
            _builder.append("\t    ");
            _builder.append("<!-- /.col-lg-4 -->");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("<!-- /#page-wrapper -->");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileControlRegisterJS(final Feature diagnostic) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("angular.module(\'myApp.ControlRegister");
    String _firstUpper = StringExtensions.toFirstUpper(diagnostic.getName());
    _builder.append(_firstUpper);
    _builder.append("\', [\'ngRoute\'])");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append(".config([\'$routeProvider\', function($routeProvider) {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("$routeProvider.when(\'/ControlRegister");
    String _firstUpper_1 = StringExtensions.toFirstUpper(diagnostic.getName());
    _builder.append(_firstUpper_1, "  ");
    _builder.append("\', {");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("templateUrl: \'ControlRegister");
    String _firstUpper_2 = StringExtensions.toFirstUpper(diagnostic.getName());
    _builder.append(_firstUpper_2, "    ");
    _builder.append("/ControlRegister");
    String _firstUpper_3 = StringExtensions.toFirstUpper(diagnostic.getName());
    _builder.append(_firstUpper_3, "    ");
    _builder.append(".html\',");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("controller: \'ControlRegister");
    String _firstUpper_4 = StringExtensions.toFirstUpper(diagnostic.getName());
    _builder.append(_firstUpper_4, "    ");
    _builder.append("Ctrl\'");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("}])");
    _builder.newLine();
    _builder.newLine();
    _builder.append(".controller(\'ControlRegister");
    String _firstUpper_5 = StringExtensions.toFirstUpper(diagnostic.getName());
    _builder.append(_firstUpper_5);
    _builder.append("Ctrl\', [\'$rootScope\', \'$scope\', \'");
    String _firstLower = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower);
    _builder.append("s\',\'");
    String _firstLower_1 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_1);
    _builder.append("\',\'$http\',\'$resource\', \'$location\', function ($rootScope, $scope, ");
    String _firstLower_2 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_2);
    _builder.append("s,");
    String _firstLower_3 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_3);
    _builder.append(", $http, $resource, $location) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("$scope.date=null;");
    _builder.newLine();
    {
      Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(diagnostic.getType().eAllContents());
      for(final EObject dat : _iterable) {
        _builder.append("\t\t");
        Feature feature = ((Feature) dat);
        _builder.newLineIfNotEmpty();
        {
          boolean _equals = feature.getName().equals("date");
          boolean _not = (!_equals);
          if (_not) {
            _builder.append("\t\t");
            _builder.append("$scope.");
            String _name = feature.getName();
            _builder.append(_name, "\t\t");
            _builder.append("=null;");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$scope.saveRegister= function(){");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$scope.diagnostic={\"date\":$scope.date");
    _builder.newLine();
    {
      Iterable<EObject> _iterable_1 = IteratorExtensions.<EObject>toIterable(diagnostic.getType().eAllContents());
      for(final EObject dat_1 : _iterable_1) {
        Feature feature_1 = ((Feature) dat_1);
        _builder.newLineIfNotEmpty();
        {
          boolean _equals_1 = feature_1.getName().equals("date");
          boolean _not_1 = (!_equals_1);
          if (_not_1) {
            _builder.append(", \"");
            String _name_1 = feature_1.getName();
            _builder.append(_name_1);
            _builder.append("\":$scope.");
            String _name_2 = feature_1.getName();
            _builder.append(_name_2);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("            ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("            ");
    String _firstLower_4 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_4, "            ");
    _builder.append(".get({");
    String _firstLower_5 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_5, "            ");
    _builder.append("Id:\"\"+$rootScope.id");
    String _name_3 = this.classToServe.getName();
    _builder.append(_name_3, "            ");
    _builder.append("})");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append(".$promise.then(");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("//success");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("function( value ){");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("$scope.");
    String _firstLower_6 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_6, "                        ");
    _builder.append("T=value;");
    _builder.newLineIfNotEmpty();
    _builder.append("                        ");
    _builder.append("$scope.");
    String _firstLower_7 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_7, "                        ");
    _builder.append("T.");
    String _name_4 = diagnostic.getName();
    _builder.append(_name_4, "                        ");
    _builder.append(".push($scope.diagnostic);");
    _builder.newLineIfNotEmpty();
    _builder.append("                        ");
    String _firstLower_8 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_8, "                        ");
    _builder.append("s.update($scope.");
    String _firstLower_9 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_9, "                        ");
    _builder.append("T)");
    _builder.newLineIfNotEmpty();
    _builder.append("                        ");
    _builder.append(".$promise.then(");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("//success");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("function(value){");
    _builder.newLine();
    _builder.append("                                ");
    _builder.append("console.log(\"Patient update\"+ $scope.");
    String _firstLower_10 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_10, "                                ");
    _builder.append("T.");
    String _name_5 = diagnostic.getName();
    _builder.append(_name_5, "                                ");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("                                ");
    _builder.append("$location.path(\"HomePatient\");");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("//error");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("function( error ){");
    _builder.newLine();
    _builder.append("                                ");
    _builder.append("console.log(\"El ");
    String _firstLower_11 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_11, "                                ");
    _builder.append(" no se pudo actualizar\");");
    _builder.newLineIfNotEmpty();
    _builder.append("                            ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                        ");
    _builder.append(");");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("//error");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("function( error ){");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("alert(\"El Identificador no se encuentra registrado\");");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append(");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("}]);");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileControlRegisterHtml(final Feature diagnostic) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<div ng-include=\"\'/app/Templates/templatePatient.html\'\"></div>");
    _builder.newLine();
    _builder.append("<div id=\"wrapper\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<div id=\"page-wrapper\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<div class=\"row\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<div class=\"col-lg-12\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<h1 class=\"page-header\">Registra los datos de tu control de ");
    String _firstUpper = StringExtensions.toFirstUpper(diagnostic.getName());
    _builder.append(_firstUpper, "                ");
    _builder.append("</h1>");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<!-- /.col-lg-12 -->");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<!-- /.row -->");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<div class=\"row\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<div class=\"col-lg-12\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<div class=\"panel panel-default\">");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<div class=\"panel-heading\">");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<div class=\"panel-body\">");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("<div class=\"row\">");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("<div class=\"col-lg-6\">");
    _builder.newLine();
    _builder.append("                                ");
    _builder.append("<form role=\"form\">");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("<div class=\"form-group\">");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                                        ");
    _builder.append("<label>Fecha del control</label>");
    _builder.newLine();
    _builder.append("                                        ");
    _builder.append("<br><br>");
    _builder.newLine();
    _builder.append("                                        ");
    _builder.append("<input type=\"date\" ng-model=\"date\">");
    _builder.newLine();
    _builder.append("                                        ");
    _builder.append("<br><br>");
    _builder.newLine();
    _builder.newLine();
    {
      Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(diagnostic.getType().eAllContents());
      for(final EObject dat : _iterable) {
        Feature feature = ((Feature) dat);
        _builder.newLineIfNotEmpty();
        {
          if ((feature.getType().getName().equals("Date") && (!feature.getName().equals("date")))) {
            _builder.append("<label>");
            String _firstUpper_1 = StringExtensions.toFirstUpper(feature.getName());
            _builder.append(_firstUpper_1);
            _builder.append("</label>");
            _builder.newLineIfNotEmpty();
            _builder.append("<br><br>");
            _builder.newLine();
            _builder.append("<input type=\"date\" ng-model=\"");
            String _name = feature.getName();
            _builder.append(_name);
            _builder.append("\">");
            _builder.newLineIfNotEmpty();
            _builder.append("<br><br>");
            _builder.newLine();
          } else {
            if ((feature.getType().getName().equals("Integer") || feature.getType().getName().equals("Float"))) {
              _builder.append("<label> ");
              String _firstUpper_2 = StringExtensions.toFirstUpper(feature.getName());
              _builder.append(_firstUpper_2);
              _builder.append(" </label>");
              _builder.newLineIfNotEmpty();
              _builder.append("<br><br>");
              _builder.newLine();
              _builder.append("<input type=\"number\" ng-model=\"");
              String _name_1 = feature.getName();
              _builder.append(_name_1);
              _builder.append("\">");
              _builder.newLineIfNotEmpty();
              _builder.append("<br><br>");
              _builder.newLine();
            } else {
              boolean _equals = feature.getType().getName().equals("String");
              if (_equals) {
                _builder.append("<label> ");
                String _firstUpper_3 = StringExtensions.toFirstUpper(feature.getName());
                _builder.append(_firstUpper_3);
                _builder.append(" </label>");
                _builder.newLineIfNotEmpty();
                _builder.append("<br><br>");
                _builder.newLine();
                _builder.append("<input type=\"String\" ng-model=\"");
                String _name_2 = feature.getName();
                _builder.append(_name_2);
                _builder.append("\">");
                _builder.newLineIfNotEmpty();
                _builder.append("<br><br>");
                _builder.newLine();
              }
            }
          }
        }
      }
    }
    _builder.append("                                    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("<button type=\"submit\" class=\"btn btn-default\" ng-click=\"saveRegister()\">Aceptar</button>");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("<button type=\"reset\" class=\"btn btn-default\">Reiniciar</button>");
    _builder.newLine();
    _builder.append("                                ");
    _builder.append("</form>");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("<!-- /.row (nested) -->");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<!-- /.panel-body -->");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<!-- /.panel -->");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<!-- /.col-lg-12 -->");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<!-- /.row -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!-- /#page-wrapper -->");
    _builder.newLine();
    _builder.newLine();
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("<!-- /#wrapper -->");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileCommentsViewJS(final Feature comment) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("angular.module(\'myApp.CommentsView");
    String _firstUpper = StringExtensions.toFirstUpper(comment.getName());
    _builder.append(_firstUpper);
    _builder.append("\', [\'ngRoute\'])");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append(".config([\'$routeProvider\', function($routeProvider) {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("$routeProvider.when(\'/CommentsView");
    String _firstUpper_1 = StringExtensions.toFirstUpper(comment.getName());
    _builder.append(_firstUpper_1, "  ");
    _builder.append("\', {");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("templateUrl: \'CommentsView");
    String _firstUpper_2 = StringExtensions.toFirstUpper(comment.getName());
    _builder.append(_firstUpper_2, "    ");
    _builder.append("/CommentsView");
    String _firstUpper_3 = StringExtensions.toFirstUpper(comment.getName());
    _builder.append(_firstUpper_3, "    ");
    _builder.append(".html\',");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("controller: \'CommentsView");
    String _firstUpper_4 = StringExtensions.toFirstUpper(comment.getName());
    _builder.append(_firstUpper_4, "    ");
    _builder.append("Ctrl\'");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("}])");
    _builder.newLine();
    _builder.newLine();
    _builder.append(".controller(\'CommentsView");
    String _firstUpper_5 = StringExtensions.toFirstUpper(comment.getName());
    _builder.append(_firstUpper_5);
    _builder.append("Ctrl\', [\'$rootScope\', \'$scope\', \'");
    String _firstLower = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower);
    _builder.append("\', function ($rootScope, $scope, ");
    String _firstLower_1 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_1);
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("     ");
    String _firstLower_2 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_2, "     ");
    _builder.append(".get({");
    String _firstLower_3 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_3, "     ");
    _builder.append("Id:\"\"+$rootScope.id");
    String _name = this.classToServe.getName();
    _builder.append(_name, "     ");
    _builder.append("})");
    _builder.newLineIfNotEmpty();
    _builder.append("                ");
    _builder.append(".$promise.then(");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("//success");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("function( value ){");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("$scope.");
    String _firstLower_4 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_4, "                            ");
    _builder.append("C=value;");
    _builder.newLineIfNotEmpty();
    _builder.append("                            ");
    _builder.append("$scope.comments=$scope.");
    String _firstLower_5 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_5, "                            ");
    _builder.append("C.");
    String _name_1 = comment.getName();
    _builder.append(_name_1, "                            ");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("                            ");
    _builder.append("if (typeof $scope.comments == \"undefined\"){");
    _builder.newLine();
    _builder.append("                                ");
    _builder.append("$scope.commentsY=false;");
    _builder.newLine();
    _builder.append("                                ");
    _builder.append("$scope.commentsTitle=\"No tienes ningun comentario\";");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("if(typeof $scope.comments != \"undefined\"){");
    _builder.newLine();
    _builder.append("                                ");
    _builder.append("$scope.commentsY=true;");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("//error");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("function( error ){");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("alert(\"Identificador no se encuentra registrado\");");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append(");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}]);");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileCommentsViewHtml(final Feature comment) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<div ng-include=\"\'/app/Templates/templatePatient.html\'\"></div>");
    _builder.newLine();
    _builder.append("<div id=\"page-wrapper\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<div class=\"row\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<div class=\"col-lg-12\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<h1 class=\"page-header\">Comentarios de ");
    String _firstUpper = StringExtensions.toFirstUpper(comment.getName());
    _builder.append(_firstUpper, "            ");
    _builder.append("</h1>");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<!-- /.col-lg-12 -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<div class=\"row\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<div class=\"col-lg-12\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<div class=\"panel panel-default\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<div class=\"panel-heading\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<!-- /.panel-heading -->");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<div class=\"panel-body\">");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<div ng-hide=\"commentsY\">");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("{{commentsTitle}}");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<div ng-show=\"commentsY\">");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("<table width=\"100%\" class=\"table table-striped table-bordered table-hover\" id=\"dataTables-example\">");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("<thead>");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("<tr>");
    _builder.newLine();
    _builder.append("                                ");
    _builder.append("<th>Comentarios ");
    String _firstUpper_1 = StringExtensions.toFirstUpper(comment.getName());
    _builder.append(_firstUpper_1, "                                ");
    _builder.append("</th>");
    _builder.newLineIfNotEmpty();
    _builder.append("                            ");
    _builder.append("</tr>");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("</thead>");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("<tbody>");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("<tr ng-repeat=\"c in comments\" >");
    _builder.newLine();
    _builder.append("                                ");
    _builder.append("<td>");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("<div class=\"panel panel-green\">");
    _builder.newLine();
    {
      Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(comment.getType().eAllContents());
      for(final EObject dat : _iterable) {
        Feature feature = ((Feature) dat);
        _builder.newLineIfNotEmpty();
        {
          boolean _equals = feature.getType().getName().equals("Date");
          if (_equals) {
            _builder.append("<div class=\"panel-footer\">");
            _builder.newLine();
            _builder.append("\t");
            String _firstUpper_2 = StringExtensions.toFirstUpper(feature.getName());
            _builder.append(_firstUpper_2, "\t");
            _builder.append(": {{c.");
            String _name = feature.getName();
            _builder.append(_name, "\t");
            _builder.append(" | date:\"dd/MMMM/yyyy\"}}");
            _builder.newLineIfNotEmpty();
            _builder.append("</div>");
            _builder.newLine();
          } else {
            _builder.append("<div class=\"panel-heading\">");
            _builder.newLine();
            _builder.append("\t");
            String _firstUpper_3 = StringExtensions.toFirstUpper(feature.getName());
            _builder.append(_firstUpper_3, "\t");
            _builder.append(": {{c.");
            String _name_1 = feature.getName();
            _builder.append(_name_1, "\t");
            _builder.append("}}");
            _builder.newLineIfNotEmpty();
            _builder.append("</div>");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("                                    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                                ");
    _builder.append("</td>");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("</tr>");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("</tbody>");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("</table>");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("<!-- /.table-responsive -->");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<!-- /.panel-body -->");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<!-- /.panel -->");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<!-- /.col-lg-12 -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!-- /.row -->");
    _builder.newLine();
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("<!-- /#page-wrapper -->");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileHomePatientJS(final Entity principal) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("angular.module(\'myApp.HomePatient\', [\'ngRoute\'])");
    _builder.newLine();
    _builder.newLine();
    _builder.append(".config([\'$routeProvider\', function($routeProvider) {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("$routeProvider.when(\'/HomePatient\', {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("templateUrl: \'HomePatient/HomePatient.html\',");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("controller: \'HomePatientCtrl\'");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("}])");
    _builder.newLine();
    _builder.newLine();
    _builder.append(".controller(\'HomePatientCtrl\', [\'$rootScope\', \'$scope\', \'");
    String _firstLower = StringExtensions.toFirstLower(principal.getName());
    _builder.append(_firstLower);
    _builder.append("\', \'$location\', function ($rootScope, $scope, ");
    String _firstLower_1 = StringExtensions.toFirstLower(principal.getName());
    _builder.append(_firstLower_1);
    _builder.append(",$location) {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("      ");
    String _firstLower_2 = StringExtensions.toFirstLower(principal.getName());
    _builder.append(_firstLower_2, "      ");
    _builder.append(".get({");
    String _firstLower_3 = StringExtensions.toFirstLower(principal.getName());
    _builder.append(_firstLower_3, "      ");
    _builder.append("Id:\"\"+$rootScope.id");
    String _name = principal.getName();
    _builder.append(_name, "      ");
    _builder.append("})");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append(".$promise.then(");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("//success");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("function( value ){");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("$scope.");
    String _firstLower_4 = StringExtensions.toFirstLower(principal.getName());
    _builder.append(_firstLower_4, "                        ");
    _builder.append("H=value;");
    _builder.newLineIfNotEmpty();
    {
      for(final Feature comm : this.comments) {
        _builder.append("                        ");
        _builder.append("$scope.commentsH");
        String _firstUpper = StringExtensions.toFirstUpper(comm.getName());
        _builder.append(_firstUpper, "                        ");
        _builder.append("=$scope.");
        String _firstLower_5 = StringExtensions.toFirstLower(principal.getName());
        _builder.append(_firstLower_5, "                        ");
        _builder.append("H.");
        String _name_1 = comm.getName();
        _builder.append(_name_1, "                        ");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("                        ");
        _builder.append("if (typeof $scope.commentsH");
        String _firstUpper_1 = StringExtensions.toFirstUpper(comm.getName());
        _builder.append(_firstUpper_1, "                        ");
        _builder.append(" == \"undefined\"){");
        _builder.newLineIfNotEmpty();
        _builder.append("                        ");
        _builder.append("    ");
        _builder.append("$scope.recomendacionesH");
        String _firstUpper_2 = StringExtensions.toFirstUpper(comm.getName());
        _builder.append(_firstUpper_2, "                            ");
        _builder.append("=\"No tienes ninguna recomendacion sobre ");
        String _firstUpper_3 = StringExtensions.toFirstUpper(comm.getName());
        _builder.append(_firstUpper_3, "                            ");
        _builder.append("\";");
        _builder.newLineIfNotEmpty();
        _builder.append("                        ");
        _builder.append("    ");
        _builder.append("$scope.cantH");
        String _firstUpper_4 = StringExtensions.toFirstUpper(comm.getName());
        _builder.append(_firstUpper_4, "                            ");
        _builder.append("=undefined;");
        _builder.newLineIfNotEmpty();
        _builder.append("                        ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("                        ");
        _builder.append("if(typeof $scope.commentsH");
        String _firstUpper_5 = StringExtensions.toFirstUpper(comm.getName());
        _builder.append(_firstUpper_5, "                        ");
        _builder.append(" != \"undefined\"){");
        _builder.newLineIfNotEmpty();
        _builder.append("                        ");
        _builder.append("    ");
        _builder.append("$scope.recomendacionesH");
        String _firstUpper_6 = StringExtensions.toFirstUpper(comm.getName());
        _builder.append(_firstUpper_6, "                            ");
        _builder.append("=\"Comentarios sobre ");
        String _firstUpper_7 = StringExtensions.toFirstUpper(comm.getName());
        _builder.append(_firstUpper_7, "                            ");
        _builder.append(" de tu medico!!\";");
        _builder.newLineIfNotEmpty();
        _builder.append("                        ");
        _builder.append("    ");
        _builder.append("$scope.cantH");
        String _firstUpper_8 = StringExtensions.toFirstUpper(comm.getName());
        _builder.append(_firstUpper_8, "                            ");
        _builder.append("=$scope.commentsH");
        String _firstUpper_9 = StringExtensions.toFirstUpper(comm.getName());
        _builder.append(_firstUpper_9, "                            ");
        _builder.append(".length;");
        _builder.newLineIfNotEmpty();
        _builder.append("                        ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      for(final Feature diag : this.diagnostics) {
        _builder.append("\t\t\t\t\t\t");
        _builder.append("$scope.diagnosticsH");
        String _firstUpper_10 = StringExtensions.toFirstUpper(diag.getName());
        _builder.append(_firstUpper_10, "\t\t\t\t\t\t");
        _builder.append("=$scope.");
        String _firstLower_6 = StringExtensions.toFirstLower(principal.getName());
        _builder.append(_firstLower_6, "\t\t\t\t\t\t");
        _builder.append("H.");
        String _name_2 = diag.getName();
        _builder.append(_name_2, "\t\t\t\t\t\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        {
          Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(diag.getType().eAllContents());
          for(final EObject dat : _iterable) {
            _builder.append("                            ");
            Feature feature = ((Feature) dat);
            _builder.newLineIfNotEmpty();
            {
              boolean _equals = feature.getType().getName().equals("Integer");
              if (_equals) {
                _builder.append("                            ");
                _builder.append("$scope.");
                String _name_3 = feature.getName();
                _builder.append(_name_3, "                            ");
                String _firstUpper_11 = StringExtensions.toFirstUpper(diag.getName());
                _builder.append(_firstUpper_11, "                            ");
                _builder.append("=[];");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        _builder.append("\t\t\t\t\t\t");
        _builder.append("$scope.labels");
        String _firstUpper_12 = StringExtensions.toFirstUpper(diag.getName());
        _builder.append(_firstUpper_12, "\t\t\t\t\t\t");
        _builder.append("=[];");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("$scope.series");
        String _firstUpper_13 = StringExtensions.toFirstUpper(diag.getName());
        _builder.append(_firstUpper_13, "\t\t\t\t\t\t");
        _builder.append(" = [\'Datos de Control ");
        String _firstUpper_14 = StringExtensions.toFirstUpper(diag.getName());
        _builder.append(_firstUpper_14, "\t\t\t\t\t\t");
        _builder.append("\'];");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("for(var n=0; n<$scope.diagnosticsH");
        String _firstUpper_15 = StringExtensions.toFirstUpper(diag.getName());
        _builder.append(_firstUpper_15, "\t\t\t\t\t\t");
        _builder.append(".length; n++){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("var dd=$scope.diagnosticsH");
        String _firstUpper_16 = StringExtensions.toFirstUpper(diag.getName());
        _builder.append(_firstUpper_16, "\t\t\t\t\t\t\t");
        _builder.append("[n];");
        _builder.newLineIfNotEmpty();
        {
          Iterable<EObject> _iterable_1 = IteratorExtensions.<EObject>toIterable(diag.getType().eAllContents());
          for(final EObject dat_1 : _iterable_1) {
            _builder.append("\t                            ");
            Feature feature_1 = ((Feature) dat_1);
            _builder.newLineIfNotEmpty();
            {
              boolean _equals_1 = feature_1.getType().getName().equals("Integer");
              if (_equals_1) {
                _builder.append("\t                            ");
                _builder.append("$scope.");
                String _name_4 = feature_1.getName();
                _builder.append(_name_4, "\t                            ");
                String _firstUpper_17 = StringExtensions.toFirstUpper(diag.getName());
                _builder.append(_firstUpper_17, "\t                            ");
                _builder.append(".push(dd.");
                String _name_5 = feature_1.getName();
                _builder.append(_name_5, "\t                            ");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("var datee=new Date(dd.date);");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("var dia = datee.getDate();");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("var mes = parseInt(datee.getMonth()) + 1;");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("var year = datee.getFullYear();");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("var dated=dia+\"/\"+mes+\"/\"+year;");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("$scope.labels");
        String _firstUpper_18 = StringExtensions.toFirstUpper(diag.getName());
        _builder.append(_firstUpper_18, "\t\t\t\t\t\t\t");
        _builder.append(".push(dated);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("                    ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("//error");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("function( error ){");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("alert(\"El Identificador no se encuentra registrado\");");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append(");");
    _builder.newLine();
    {
      for(final Feature comm_1 : this.comments) {
        _builder.append("$scope.continueCS");
        String _firstUpper_19 = StringExtensions.toFirstUpper(comm_1.getName());
        _builder.append(_firstUpper_19);
        _builder.append("=function(){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t          \t");
        _builder.append("$location.path(\"CommentsView");
        String _firstUpper_20 = StringExtensions.toFirstUpper(comm_1.getName());
        _builder.append(_firstUpper_20, "\t          \t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t          \t");
        _builder.append("};");
        _builder.newLine();
      }
    }
    _builder.append("}]);");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileHomePatientHtml(final Entity principal) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<div ng-include=\"\'/app/Templates/templatePatient.html\'\"></div>");
    _builder.newLine();
    _builder.append("<div id=\"page-wrapper\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<div class=\"row\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<div class=\"col-lg-12\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<h1 class=\"page-header\">Bienvenido</h1>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<!-- /.col-lg-12 -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</div>");
    _builder.newLine();
    {
      for(final Feature comm : this.comments) {
        _builder.append("    ");
        _builder.append("<!-- /.row -->");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("<div class=\"row\">");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("<div class=\"col-lg-3 col-md-6\">");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("<div class=\"panel panel-primary\">");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("            ");
        _builder.append("<div class=\"panel-heading\">");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("                ");
        _builder.append("<div class=\"row\">");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("                    ");
        _builder.append("<div class=\"col-xs-3\">");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("                        ");
        _builder.append("<i class=\"fa fa-comments fa-5x\"></i>");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("                    ");
        _builder.append("</div>");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("                    ");
        _builder.append("<div class=\"col-xs-9 text-right\">");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("                        ");
        _builder.append("<div class=\"huge\">{{cantH");
        String _firstUpper = StringExtensions.toFirstUpper(comm.getName());
        _builder.append(_firstUpper, "                            ");
        _builder.append("}}</div>");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("                        ");
        _builder.append("<div>{{recomendacionesH");
        String _firstUpper_1 = StringExtensions.toFirstUpper(comm.getName());
        _builder.append(_firstUpper_1, "                            ");
        _builder.append("}}</div>");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("                    ");
        _builder.append("</div>");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("                ");
        _builder.append("</div>");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("            ");
        _builder.append("</div>");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("            ");
        _builder.append("<a  ng-click=\"continueCS");
        String _firstUpper_2 = StringExtensions.toFirstUpper(comm.getName());
        _builder.append(_firstUpper_2, "                ");
        _builder.append("()\">");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("                ");
        _builder.append("<div class=\"panel-footer\">");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("                    ");
        _builder.append("<span class=\"pull-left\">Detalles</span>");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("                    ");
        _builder.append("<span class=\"pull-right\"><i class=\"fa fa-arrow-circle-right\"></i></span>");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("                    ");
        _builder.append("<div class=\"clearfix\"></div>");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("                ");
        _builder.append("</div>");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("            ");
        _builder.append("</a>");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("</div>");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("</div>");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("</div>");
        _builder.newLine();
      }
    }
    {
      for(final Feature diag : this.diagnostics) {
        _builder.append("\t");
        _builder.append("<div class=\"row\">");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("<br>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("<h2>Registros de ");
        String _firstUpper_3 = StringExtensions.toFirstUpper(diag.getName());
        _builder.append(_firstUpper_3, "\t\t");
        _builder.append("</h2>");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("<br>");
        _builder.newLine();
        {
          Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(diag.getType().eAllContents());
          for(final EObject data : _iterable) {
            _builder.append("\t    \t");
            Feature feature = ((Feature) data);
            _builder.newLineIfNotEmpty();
            {
              boolean _equals = feature.getType().getName().equals("Integer");
              if (_equals) {
                _builder.append("\t    \t");
                _builder.append("<div class=\"col-lg-4\">");
                _builder.newLine();
                _builder.append("\t    \t");
                _builder.append("<div class=\"panel panel-default\">");
                _builder.newLine();
                _builder.append("\t    \t");
                _builder.append("<div class=\"panel-heading\">");
                _builder.newLine();
                _builder.append("\t                    ");
                String _firstUpper_4 = StringExtensions.toFirstUpper(feature.getName());
                _builder.append(_firstUpper_4, "\t                    ");
                _builder.newLineIfNotEmpty();
                _builder.append("\t    \t");
                _builder.append("</div>");
                _builder.newLine();
                _builder.append("\t    \t");
                _builder.append("<div class=\"panel-body\">");
                _builder.newLine();
                _builder.append("\t    \t");
                _builder.append("<canvas  id=\"");
                String _name = feature.getName();
                _builder.append(_name, "\t    \t");
                String _firstUpper_5 = StringExtensions.toFirstUpper(diag.getName());
                _builder.append(_firstUpper_5, "\t    \t");
                _builder.append("\" class=\"chart chart-bar\"");
                _builder.newLineIfNotEmpty();
                _builder.append("\t    \t");
                _builder.append("chart-data=\"");
                String _name_1 = feature.getName();
                _builder.append(_name_1, "\t    \t");
                String _firstUpper_6 = StringExtensions.toFirstUpper(diag.getName());
                _builder.append(_firstUpper_6, "\t    \t");
                _builder.append("\" chart-labels=\"labels");
                String _firstUpper_7 = StringExtensions.toFirstUpper(diag.getName());
                _builder.append(_firstUpper_7, "\t    \t");
                _builder.append("\" chart-series=\"series");
                String _firstUpper_8 = StringExtensions.toFirstUpper(diag.getName());
                _builder.append(_firstUpper_8, "\t    \t");
                _builder.append("\">");
                _builder.newLineIfNotEmpty();
                _builder.append("\t    \t");
                _builder.append("</canvas>");
                _builder.newLine();
                _builder.append("\t    \t");
                _builder.append("</div>");
                _builder.newLine();
                _builder.append("\t    \t");
                _builder.append("<!-- /.panel-body -->");
                _builder.newLine();
                _builder.append("\t    \t");
                _builder.append("</div>");
                _builder.newLine();
                _builder.append("\t    \t");
                _builder.append("<!-- /.panel -->");
                _builder.newLine();
                _builder.append("\t    \t");
                _builder.append("</div>");
                _builder.newLine();
                _builder.append("\t    \t");
                _builder.append("<!-- /.col-lg-4 -->");
                _builder.newLine();
              }
            }
          }
        }
        _builder.append("\t");
        _builder.append("</div>");
        _builder.newLine();
      }
    }
    _builder.append("    ");
    _builder.append("<!-- /.row -->");
    _builder.newLine();
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("<!-- /#page-wrapper -->");
    _builder.newLine();
    _builder.newLine();
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("<!-- /#wrapper -->");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compilePatientRegisterJS(final Entity principal) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("angular.module(\'myApp.PatientRegister\', [\'ngRoute\'])");
    _builder.newLine();
    _builder.newLine();
    _builder.append(".config([\'$routeProvider\', function($routeProvider) {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("$routeProvider.when(\'/PatientRegister\', {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("templateUrl: \'PatientRegister/PatientRegister.html\',");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("controller: \'PatientRegisterCtrl\'");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("}])");
    _builder.newLine();
    _builder.newLine();
    _builder.append(".controller(\'PatientRegisterCtrl\', [\'$rootScope\', \'$scope\', \'");
    String _firstLower = StringExtensions.toFirstLower(principal.getName());
    _builder.append(_firstLower);
    _builder.append("s\',\'$http\',\'$resource\', \'$location\', function ($rootScope, $scope, ");
    String _firstLower_1 = StringExtensions.toFirstLower(principal.getName());
    _builder.append(_firstLower_1);
    _builder.append("s, $http, $resource, $location) {");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("$scope.id=null;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$scope.name=null;");
    _builder.newLine();
    {
      EList<Feature> _features = principal.getFeatures();
      for(final Feature f : _features) {
        {
          if ((((!f.isMany()) && (!f.getName().equals("id"))) && (!f.getName().equals("name")))) {
            {
              int _size = IterableExtensions.size(IteratorExtensions.<EObject>toIterable(f.getType().eAllContents()));
              boolean _equals = (_size == 0);
              if (_equals) {
                _builder.append("$scope.");
                String _name = f.getName();
                _builder.append(_name);
                _builder.append("=null;");
                _builder.newLineIfNotEmpty();
              } else {
                int _size_1 = IterableExtensions.size(IteratorExtensions.<EObject>toIterable(f.getType().eAllContents()));
                boolean _greaterThan = (_size_1 > 0);
                if (_greaterThan) {
                  {
                    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(f.getType().eAllContents());
                    for(final EObject dat : _iterable) {
                      Feature feature = ((Feature) dat);
                      _builder.newLineIfNotEmpty();
                      _builder.append("$scope.");
                      String _name_1 = feature.getName();
                      _builder.append(_name_1);
                      _builder.append("=null;");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    _builder.append("        ");
    _builder.append("$rootScope.nameP=null;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$scope.save= function(){");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$rootScope.id");
    String _firstUpper = StringExtensions.toFirstUpper(principal.getName());
    _builder.append(_firstUpper, "            ");
    _builder.append("=$scope.id;");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("$rootScope.");
    String _firstLower_2 = StringExtensions.toFirstLower(principal.getName());
    _builder.append(_firstLower_2, "            ");
    _builder.append("={\"id\":$scope.id,\"name\":$scope.name");
    _builder.newLineIfNotEmpty();
    {
      EList<Feature> _features_1 = principal.getFeatures();
      for(final Feature f_1 : _features_1) {
        {
          if ((((!f_1.isMany()) && (!f_1.getName().equals("id"))) && (!f_1.getName().equals("name")))) {
            {
              int _size_2 = IterableExtensions.size(IteratorExtensions.<EObject>toIterable(f_1.getType().eAllContents()));
              boolean _equals_1 = (_size_2 == 0);
              if (_equals_1) {
                _builder.append("\t\t\t");
                _builder.append(", \"");
                String _name_2 = f_1.getName();
                _builder.append(_name_2, "\t\t\t");
                _builder.append("\":$scope.");
                String _name_3 = f_1.getName();
                _builder.append(_name_3, "\t\t\t");
                _builder.newLineIfNotEmpty();
              } else {
                int _size_3 = IterableExtensions.size(IteratorExtensions.<EObject>toIterable(f_1.getType().eAllContents()));
                boolean _greaterThan_1 = (_size_3 > 0);
                if (_greaterThan_1) {
                  _builder.append("\t\t\t");
                  _builder.append(", \"");
                  String _name_4 = f_1.getName();
                  _builder.append(_name_4, "\t\t\t");
                  _builder.append("\":{");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t\t\t");
                  _builder.append("//");
                  int count = IterableExtensions.size(IteratorExtensions.<EObject>toIterable(f_1.getType().eAllContents()));
                  _builder.newLineIfNotEmpty();
                  {
                    Iterable<EObject> _iterable_1 = IteratorExtensions.<EObject>toIterable(f_1.getType().eAllContents());
                    for(final EObject dat_1 : _iterable_1) {
                      _builder.append("\t\t\t");
                      Feature feature_1 = ((Feature) dat_1);
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t\t\t");
                      _builder.append("\"");
                      String _name_5 = feature_1.getName();
                      _builder.append(_name_5, "\t\t\t");
                      _builder.append("\":$scope.");
                      String _name_6 = feature_1.getName();
                      _builder.append(_name_6, "\t\t\t");
                      {
                        if ((count > 1)) {
                          _builder.append(", ");
                        }
                      }
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t\t\t");
                      _builder.append("//");
                      int _minusMinus = count--;
                      _builder.append(_minusMinus, "\t\t\t");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                  _builder.append("\t\t\t");
                  _builder.append("}");
                  _builder.newLine();
                }
              }
            }
          } else {
            boolean _isMany = f_1.isMany();
            if (_isMany) {
              _builder.append("\t\t\t");
              _builder.append(", \"");
              String _name_7 = f_1.getName();
              _builder.append(_name_7, "\t\t\t");
              _builder.append("\":[]");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
    }
    _builder.append("\t\t\t");
    _builder.append("};");
    _builder.newLine();
    _builder.append("            ");
    String _firstLower_3 = StringExtensions.toFirstLower(principal.getName());
    _builder.append(_firstLower_3, "            ");
    _builder.append("s.save($rootScope.");
    String _firstLower_4 = StringExtensions.toFirstLower(principal.getName());
    _builder.append(_firstLower_4, "            ");
    _builder.append(",function(){");
    _builder.newLineIfNotEmpty();
    _builder.append("                ");
    _builder.append("console.info(\"Person saved   \"+ $rootScope.");
    String _firstLower_5 = StringExtensions.toFirstLower(principal.getName());
    _builder.append(_firstLower_5, "                ");
    _builder.append(".name);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("$location.path(\"HomePatient\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("});");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("};");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}]);");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compilePatientRegisterHtml(final Entity principal) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<div id=\"wrapper\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<div id=\"page-wrapper\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<div class=\"row\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<div class=\"col-lg-12\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<h1 class=\"page-header\">Nuevo Registro ");
    String _name = principal.getName();
    _builder.append(_name, "                ");
    _builder.append("</h1>");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<!-- /.col-lg-12 -->");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<!-- /.row -->");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<div class=\"row\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<div class=\"col-lg-12\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<div class=\"panel panel-default\">");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<div class=\"panel-body\">");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("<div class=\"row\">");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("<div class=\"col-lg-6\">");
    _builder.newLine();
    _builder.append("                                ");
    _builder.append("<form role=\"form\">");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("<div class=\"form-group\">");
    _builder.newLine();
    _builder.append("                                        ");
    _builder.append("<label> Numero de identificacion </label>");
    _builder.newLine();
    _builder.append("                                        ");
    _builder.append("<br><br>");
    _builder.newLine();
    _builder.append("                                        ");
    _builder.append("<input type=\"number\" ng-model=\"id\">");
    _builder.newLine();
    _builder.append("                                        ");
    _builder.append("<br><br>");
    _builder.newLine();
    _builder.append("                                        ");
    _builder.append("<label> Nombre </label>");
    _builder.newLine();
    _builder.append("                                        ");
    _builder.append("<br><br>");
    _builder.newLine();
    _builder.append("                                        ");
    _builder.append("<input type=\"text\" ng-model=\"name\">");
    _builder.newLine();
    _builder.append("                                        ");
    _builder.append("<br><br>");
    _builder.newLine();
    {
      EList<Feature> _features = principal.getFeatures();
      for(final Feature f : _features) {
        {
          if (((!f.getName().equals("id")) && (!f.getName().equals("name")))) {
            {
              boolean _equals = f.getType().getName().equals("String");
              if (_equals) {
                _builder.append("<label> ");
                String _firstUpper = StringExtensions.toFirstUpper(f.getName());
                _builder.append(_firstUpper);
                _builder.append(" </label>");
                _builder.newLineIfNotEmpty();
                _builder.append("\t                                        \t");
                _builder.append("<br><br>");
                _builder.newLine();
                _builder.append("\t\t\t                                        ");
                _builder.append("<input type=\"text\" ng-model=\"");
                String _name_1 = f.getName();
                _builder.append(_name_1, "\t\t\t                                        ");
                _builder.append("\">");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t                                        ");
                _builder.append("<br><br>");
                _builder.newLine();
              } else {
                boolean _equals_1 = f.getType().getName().equals("Integer");
                if (_equals_1) {
                  _builder.append("<label> ");
                  String _firstUpper_1 = StringExtensions.toFirstUpper(f.getName());
                  _builder.append(_firstUpper_1);
                  _builder.append(" </label>");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t\t\t                                        ");
                  _builder.append("<br><br>");
                  _builder.newLine();
                  _builder.append("\t\t\t                                        ");
                  _builder.append("<input type=\"number\" ng-model=\"");
                  String _name_2 = f.getName();
                  _builder.append(_name_2, "\t\t\t                                        ");
                  _builder.append("\">");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t\t\t                                        ");
                  _builder.append("<br><br>");
                  _builder.newLine();
                } else {
                  boolean _equals_2 = f.getType().getName().equals("Date");
                  if (_equals_2) {
                    _builder.append("<label> ");
                    String _firstUpper_2 = StringExtensions.toFirstUpper(f.getName());
                    _builder.append(_firstUpper_2);
                    _builder.append(" </label>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t\t                                        ");
                    _builder.append("<br><br>");
                    _builder.newLine();
                    _builder.append("\t\t\t                                        ");
                    _builder.append("<input type=\"date\" ng-model=\"");
                    String _name_3 = f.getName();
                    _builder.append(_name_3, "\t\t\t                                        ");
                    _builder.append("\">");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t\t                                        ");
                    _builder.append("<br><br>");
                    _builder.newLine();
                  } else {
                    if (((!f.isMany()) && (IterableExtensions.size(IteratorExtensions.<EObject>toIterable(f.getType().eAllContents())) > 0))) {
                      _builder.append("<label><h2> Datos de ");
                      String _firstUpper_3 = StringExtensions.toFirstUpper(f.getName());
                      _builder.append(_firstUpper_3);
                      _builder.append(" </h2></label>");
                      _builder.newLineIfNotEmpty();
                      _builder.append("<br><br>");
                      _builder.newLine();
                      {
                        Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(f.getType().eAllContents());
                        for(final EObject dat : _iterable) {
                          Feature feature = ((Feature) dat);
                          _builder.newLineIfNotEmpty();
                          {
                            boolean _equals_3 = feature.getType().getName().equals("String");
                            if (_equals_3) {
                              _builder.append("<label> ");
                              String _firstUpper_4 = StringExtensions.toFirstUpper(feature.getName());
                              _builder.append(_firstUpper_4);
                              _builder.append(" </label>");
                              _builder.newLineIfNotEmpty();
                              _builder.append("<br><br>");
                              _builder.newLine();
                              _builder.append("<input type=\"text\" ng-model=\"");
                              String _name_4 = feature.getName();
                              _builder.append(_name_4);
                              _builder.append("\">");
                              _builder.newLineIfNotEmpty();
                              _builder.append("<br><br>");
                              _builder.newLine();
                            } else {
                              boolean _equals_4 = feature.getType().getName().equals("Integer");
                              if (_equals_4) {
                                _builder.append("<label> ");
                                String _firstUpper_5 = StringExtensions.toFirstUpper(feature.getName());
                                _builder.append(_firstUpper_5);
                                _builder.append(" </label>");
                                _builder.newLineIfNotEmpty();
                                _builder.append("<br><br>");
                                _builder.newLine();
                                _builder.append("<input type=\"number\" ng-model=\"");
                                String _name_5 = feature.getName();
                                _builder.append(_name_5);
                                _builder.append("\">");
                                _builder.newLineIfNotEmpty();
                                _builder.append("<br><br>");
                                _builder.newLine();
                              } else {
                                boolean _equals_5 = feature.getType().getName().equals("Date");
                                if (_equals_5) {
                                  _builder.append("<label> ");
                                  String _firstUpper_6 = StringExtensions.toFirstUpper(feature.getName());
                                  _builder.append(_firstUpper_6);
                                  _builder.append(" </label>");
                                  _builder.newLineIfNotEmpty();
                                  _builder.append("<br><br>");
                                  _builder.newLine();
                                  _builder.append("<input type=\"date\" ng-model=\"");
                                  String _name_6 = feature.getName();
                                  _builder.append(_name_6);
                                  _builder.append("\">");
                                  _builder.newLineIfNotEmpty();
                                  _builder.append("<br><br>");
                                  _builder.newLine();
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    _builder.append("                                    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("<button type=\"submit\" class=\"btn btn-default\" ng-click=\"save()\">Aceptar</button>");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("<button type=\"reset\" class=\"btn btn-default\">Reiniciar</button>");
    _builder.newLine();
    _builder.append("                                ");
    _builder.append("</form>");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("<!-- /.row (nested) -->");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<!-- /.panel-body -->");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<!-- /.panel -->");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<!-- /.col-lg-12 -->");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<!-- /.row -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!-- /#page-wrapper -->");
    _builder.newLine();
    _builder.newLine();
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("<!-- /#wrapper -->");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileLoginViewJS(final Entity principal) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("angular.module(\'myApp.LoginView\', [\'ngRoute\'])");
    _builder.newLine();
    _builder.newLine();
    _builder.append(".config([\'$routeProvider\', function($routeProvider) {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("$routeProvider.when(\'/LoginView\', {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("templateUrl: \'LoginView/LoginView.html\',");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("controller: \'LoginViewCtrl\'");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("}])");
    _builder.newLine();
    _builder.newLine();
    _builder.append(".controller(\'LoginViewCtrl\', [\'$rootScope\', \'$scope\', \'");
    String _firstLower = StringExtensions.toFirstLower(principal.getName());
    _builder.append(_firstLower);
    _builder.append("\',\'");
    String _firstLower_1 = StringExtensions.toFirstLower(principal.getName());
    _builder.append(_firstLower_1);
    _builder.append("s\',\'$http\',\'$resource\', \'$location\', function ($rootScope, $scope, ");
    String _firstLower_2 = StringExtensions.toFirstLower(principal.getName());
    _builder.append(_firstLower_2);
    _builder.append(", ");
    String _firstLower_3 = StringExtensions.toFirstLower(principal.getName());
    _builder.append(_firstLower_3);
    _builder.append("s, $http, $resource, $location) {");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("$scope.");
    String _firstLower_4 = StringExtensions.toFirstLower(principal.getName());
    _builder.append(_firstLower_4, "        ");
    _builder.append("Id=null;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$scope.");
    String _firstLower_5 = StringExtensions.toFirstLower(principal.getName());
    _builder.append(_firstLower_5, "        ");
    _builder.append("=$rootScope.");
    String _firstLower_6 = StringExtensions.toFirstLower(principal.getName());
    _builder.append(_firstLower_6, "        ");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("$scope.accept=function(){");
    _builder.newLine();
    _builder.append("            ");
    String _firstLower_7 = StringExtensions.toFirstLower(principal.getName());
    _builder.append(_firstLower_7, "            ");
    _builder.append(".get({");
    String _firstLower_8 = StringExtensions.toFirstLower(principal.getName());
    _builder.append(_firstLower_8, "            ");
    _builder.append("Id:\"\"+$scope.");
    String _firstLower_9 = StringExtensions.toFirstLower(principal.getName());
    _builder.append(_firstLower_9, "            ");
    _builder.append("Id})");
    _builder.newLineIfNotEmpty();
    _builder.append("                ");
    _builder.append(".$promise.then(");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("//success");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("function( value ){");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("$rootScope.");
    String _firstLower_10 = StringExtensions.toFirstLower(principal.getName());
    _builder.append(_firstLower_10, "                            ");
    _builder.append("=value;");
    _builder.newLineIfNotEmpty();
    _builder.append("                            ");
    _builder.append("$rootScope.id");
    String _firstUpper = StringExtensions.toFirstUpper(principal.getName());
    _builder.append(_firstUpper, "                            ");
    _builder.append("=$scope.");
    String _firstLower_11 = StringExtensions.toFirstLower(principal.getName());
    _builder.append(_firstLower_11, "                            ");
    _builder.append("Id;");
    _builder.newLineIfNotEmpty();
    _builder.append("                            ");
    _builder.append("$location.path(\"HomePatient\");");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("//error");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("function( error ){");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("alert(\"El Identificador no se encuentra registrado\");");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append(");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("}]);");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileLoginViewHtml(final Entity principal) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<div class=\"container\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<div class=\"row\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<div class=\"col-md-4 col-md-offset-4\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<div class=\"login-panel panel panel-default\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<div class=\"panel-heading\">");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<h3 class=\"panel-title\">Inicia sesion</h3>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<div class=\"panel-body\">");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<form role=\"form\">");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("<fieldset>");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("<div class=\"form-group\">");
    _builder.newLine();
    _builder.append("                                ");
    _builder.append("<label>Numero de Identificacion</label>");
    _builder.newLine();
    _builder.append("                                ");
    _builder.append("<input class=\"form-control\" type=\"number\" ng-model=\"");
    String _firstLower = StringExtensions.toFirstLower(principal.getName());
    _builder.append(_firstLower, "                                ");
    _builder.append("Id\" autofocus>");
    _builder.newLineIfNotEmpty();
    _builder.append("                            ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("<!-- Change this to a button or input when using this as a form -->");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("<a href=\"index.html\" class=\"btn btn-lg btn-success btn-block\" ng-click=\"accept()\">Aceptar</a>");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("</fieldset>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("</form>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("</div>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileTemplatePatientJS(final ArrayList<Feature> diagnostics) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("angular.module(\'myApp.templatePatient\', [\'ngRoute\'])");
    _builder.newLine();
    _builder.newLine();
    _builder.append(".controller(\'templatePatientCtrl\', [\'$rootScope\', \'$scope\', \'");
    String _firstLower = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower);
    _builder.append("\', \'$location\', function ($rootScope, $scope, ");
    String _firstLower_1 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_1);
    _builder.append(", $location) {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("      ");
    _builder.append("$scope.continuePerfil=function(){");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$location.path(\"PatientProfile\");");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("$scope.continueLogout=function(){");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$location.path(\"view1\");");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("$scope.continueHome=function(){");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$location.path(\"HomePatient\");");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("      ");
    _builder.newLine();
    {
      for(final Feature comm : this.comments) {
        _builder.append("      ");
        _builder.append("$scope.continueComments");
        String _firstUpper = StringExtensions.toFirstUpper(comm.getName());
        _builder.append(_firstUpper, "      ");
        _builder.append("=function(){");
        _builder.newLineIfNotEmpty();
        _builder.append("      ");
        _builder.append("\t");
        _builder.append("$location.path(\"CommentsView");
        String _firstUpper_1 = StringExtensions.toFirstUpper(comm.getName());
        _builder.append(_firstUpper_1, "      \t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("      ");
        _builder.append("};");
        _builder.newLine();
      }
    }
    {
      for(final Feature diag : diagnostics) {
        _builder.append("      ");
        _builder.append("$scope.continueCRegister");
        String _firstUpper_2 = StringExtensions.toFirstUpper(diag.getName());
        _builder.append(_firstUpper_2, "      ");
        _builder.append("=function(){");
        _builder.newLineIfNotEmpty();
        _builder.append("      ");
        _builder.append("      ");
        _builder.append("$location.path(\"ControlRegister");
        String _firstUpper_3 = StringExtensions.toFirstUpper(diag.getName());
        _builder.append(_firstUpper_3, "            ");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("      ");
        _builder.append("};");
        _builder.newLine();
        _builder.append("      ");
        _builder.append("$scope.continueCView");
        String _firstUpper_4 = StringExtensions.toFirstUpper(diag.getName());
        _builder.append(_firstUpper_4, "      ");
        _builder.append("=function(){");
        _builder.newLineIfNotEmpty();
        _builder.append("      ");
        _builder.append("      ");
        _builder.append("$location.path(\"ControlView");
        String _firstUpper_5 = StringExtensions.toFirstUpper(diag.getName());
        _builder.append(_firstUpper_5, "            ");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("      ");
        _builder.append("};");
        _builder.newLine();
      }
    }
    _builder.append("}]);");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileTemplatePatientHtml(final ArrayList<Feature> diagnostics) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<div ng-controller=\"templatePatientCtrl\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!-- Navigation -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<nav class=\"navbar navbar-default navbar-static-top\" role=\"navigation\" style=\"margin-bottom: 0\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<div class=\"navbar-header\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\".navbar-collapse\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<span class=\"sr-only\">Toggle navigation</span>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<span class=\"icon-bar\"></span>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<span class=\"icon-bar\"></span>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<span class=\"icon-bar\"></span>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</button>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<a class=\"navbar-brand\" href=\"index.html\">Multiple Client</a>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<!-- /.navbar-header -->");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<ul class=\"nav navbar-top-links navbar-right\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<li><a ng-click=\"continuePerfil()\"><i class=\"fa fa-user fa-fw\"></i> Perfil </a>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</li>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<li><a ng-click=\"continueLogout()\"><i class=\"fa fa-sign-out fa-fw\"></i> Cerrar Sesion</a>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</li>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</ul>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<!-- /.navbar-top-links -->");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<div class=\"navbar-default sidebar\" role=\"navigation\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<div class=\"sidebar-nav navbar-collapse\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<ul class=\"nav\" id=\"side-menu\">");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<li>");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("<a ng-click=\"continueHome()\"><i class=\"fa fa-dashboard fa-fw\"></i>Inicio</a>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("</li>");
    _builder.newLine();
    {
      for(final Feature comm : this.comments) {
        _builder.append("        \t\t\t");
        _builder.append("<li>");
        _builder.newLine();
        _builder.append("        \t\t\t");
        _builder.append("<a ng-click=\"continueComments");
        String _firstUpper = StringExtensions.toFirstUpper(comm.getName());
        _builder.append(_firstUpper, "        \t\t\t");
        _builder.append("()\"><i class=\"fa fa-edit fa-fw\"></i> Comentarios para ");
        String _firstUpper_1 = StringExtensions.toFirstUpper(comm.getName());
        _builder.append(_firstUpper_1, "        \t\t\t");
        _builder.append("</a>");
        _builder.newLineIfNotEmpty();
        _builder.append("        \t\t\t");
        _builder.append("</li>");
        _builder.newLine();
      }
    }
    _builder.append("                    ");
    _builder.append("<li>");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("<a><i class=\"fa fa-bar-chart-o fa-fw\"></i> Registros de Diagnostico</a>");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("<ul class=\"nav nav-second-level\">");
    _builder.newLine();
    {
      for(final Feature diag : diagnostics) {
        _builder.append("                        \t");
        _builder.append("<li>");
        _builder.newLine();
        _builder.append("                        \t");
        _builder.append("<a ng-click=\"continueCRegister");
        String _firstUpper_2 = StringExtensions.toFirstUpper(diag.getName());
        _builder.append(_firstUpper_2, "                        \t");
        _builder.append("()\">Nuevo Registro ");
        String _firstUpper_3 = StringExtensions.toFirstUpper(diag.getName());
        _builder.append(_firstUpper_3, "                        \t");
        _builder.append("</a>");
        _builder.newLineIfNotEmpty();
        _builder.append("                        \t");
        _builder.append("</li>");
        _builder.newLine();
        _builder.append("                        \t");
        _builder.append("<li>");
        _builder.newLine();
        _builder.append("                        \t");
        _builder.append("<a ng-click=\"continueCView");
        String _firstUpper_4 = StringExtensions.toFirstUpper(diag.getName());
        _builder.append(_firstUpper_4, "                        \t");
        _builder.append("()\">Consultar Registros ");
        String _firstUpper_5 = StringExtensions.toFirstUpper(diag.getName());
        _builder.append(_firstUpper_5, "                        \t");
        _builder.append("</a>");
        _builder.newLineIfNotEmpty();
        _builder.append("                        \t");
        _builder.append("</li>");
        _builder.newLine();
      }
    }
    _builder.append("                        ");
    _builder.append("</ul>");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("<!-- /.nav-second-level -->");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("</li>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("</ul>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<!-- /.sidebar-collapse -->");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<!-- /.navbar-static-side -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</nav>");
    _builder.newLine();
    _builder.append("</div>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileCommentRegisterJS(final Feature comment) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("angular.module(\'myApp.CommentRegister");
    String _firstUpper = StringExtensions.toFirstUpper(comment.getName());
    _builder.append(_firstUpper);
    _builder.append("\', [\'ngRoute\'])");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append(".config([\'$routeProvider\', function($routeProvider) {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("$routeProvider.when(\'/CommentRegister");
    String _firstUpper_1 = StringExtensions.toFirstUpper(comment.getName());
    _builder.append(_firstUpper_1, "  ");
    _builder.append("\', {");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("templateUrl: \'CommentRegister");
    String _firstUpper_2 = StringExtensions.toFirstUpper(comment.getName());
    _builder.append(_firstUpper_2, "    ");
    _builder.append("/CommentRegister");
    String _firstUpper_3 = StringExtensions.toFirstUpper(comment.getName());
    _builder.append(_firstUpper_3, "    ");
    _builder.append(".html\',");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("controller: \'CommentRegister");
    String _firstUpper_4 = StringExtensions.toFirstUpper(comment.getName());
    _builder.append(_firstUpper_4, "    ");
    _builder.append("Ctrl\'");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("}])");
    _builder.newLine();
    _builder.newLine();
    _builder.append(".controller(\'CommentRegister");
    String _firstUpper_5 = StringExtensions.toFirstUpper(comment.getName());
    _builder.append(_firstUpper_5);
    _builder.append("Ctrl\', [\'$rootScope\', \'$scope\', \'");
    String _firstLower = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower);
    _builder.append("\',\'");
    String _firstLower_1 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_1);
    _builder.append("s\',\'$http\',\'$resource\', \'$location\', function ($rootScope, $scope, ");
    String _firstLower_2 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_2);
    _builder.append(", ");
    String _firstLower_3 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_3);
    _builder.append("s, $http, $resource, $location) {");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("$scope.title=null;");
    _builder.newLine();
    {
      Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(comment.getType().eAllContents());
      for(final EObject dat : _iterable) {
        Feature feature = ((Feature) dat);
        _builder.newLineIfNotEmpty();
        {
          if (((!feature.getName().equals("title")) && (!feature.getName().equals("date")))) {
            _builder.append("$scope.");
            String _name = feature.getName();
            _builder.append(_name);
            _builder.append("=null;");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("        ");
    _builder.append("$scope.date=new Date();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$scope.pId=$rootScope.patientId;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$scope.foundC=$rootScope.FindID;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$scope.saveComment= function(){");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$scope.comment={\"date\":$scope.date");
    {
      Iterable<EObject> _iterable_1 = IteratorExtensions.<EObject>toIterable(comment.getType().eAllContents());
      for(final EObject dat_1 : _iterable_1) {
        _builder.newLineIfNotEmpty();
        _builder.append("            ");
        Feature feature_1 = ((Feature) dat_1);
        _builder.newLineIfNotEmpty();
        {
          if (((!feature_1.getName().equals("title")) && (!feature_1.getName().equals("date")))) {
            _builder.append("            ");
            _builder.append(",\"");
            String _name_1 = feature_1.getName();
            _builder.append(_name_1, "            ");
            _builder.append("\":$scope.");
            String _name_2 = feature_1.getName();
            _builder.append(_name_2, "            ");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("            ");
      }
    }
    _builder.append(" ,\"title\":$scope.title};");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    String _firstLower_4 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_4, "            ");
    _builder.append(".get({");
    String _firstLower_5 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_5, "            ");
    _builder.append("Id:\"\"+$scope.pId})");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append(".$promise.then(");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("//success");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("function( value ){");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("$scope.principal=value;");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("$scope.principal.");
    String _name_3 = comment.getName();
    _builder.append(_name_3, "                        ");
    _builder.append(".push($scope.comment);");
    _builder.newLineIfNotEmpty();
    _builder.append("                        ");
    String _firstLower_6 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_6, "                        ");
    _builder.append("s.update($scope.principal)");
    _builder.newLineIfNotEmpty();
    _builder.append("                        ");
    _builder.append(".$promise.then(");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("//success");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("function(value){");
    _builder.newLine();
    _builder.append("                                ");
    _builder.append("$location.path(\"CommentsDoctorView");
    String _firstUpper_6 = StringExtensions.toFirstUpper(comment.getName());
    _builder.append(_firstUpper_6, "                                ");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("                            ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("//error");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("function( error ){");
    _builder.newLine();
    _builder.append("                                ");
    _builder.append("console.log(\"No se pudo actualizar\");");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                        ");
    _builder.append(");");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("//error");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("function( error ){");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("alert(\"Identificador no se encuentra registrado\");");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append(");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("}]);");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileCommentRegisterHtml(final Feature comment) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<div ng-include=\"\'/app/Templates/templateDoctor.html\'\"></div>");
    _builder.newLine();
    _builder.append("<div id=\"wrapper\" ng-show=\"foundC\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<div id=\"page-wrapper\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<div class=\"row\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<div class=\"col-lg-12\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<h1 class=\"page-header\">Registra Comentario ");
    String _firstUpper = StringExtensions.toFirstUpper(comment.getName());
    _builder.append(_firstUpper, "                ");
    _builder.append("</h1>");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<!-- /.col-lg-12 -->");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<!-- /.row -->");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<div class=\"row\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<div class=\"col-lg-12\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<div class=\"panel panel-default\">");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<div class=\"panel-heading\">");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<div class=\"panel-body\">");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("<div class=\"row\">");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("<div class=\"col-lg-6\">");
    _builder.newLine();
    _builder.append("                                ");
    _builder.append("<form role=\"form\">");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("<div class=\"form-group\">");
    _builder.newLine();
    {
      Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(comment.getType().eAllContents());
      for(final EObject dat : _iterable) {
        Feature feature = ((Feature) dat);
        _builder.newLineIfNotEmpty();
        {
          boolean _equals = feature.getName().equals("title");
          if (_equals) {
            _builder.append("<label> ");
            String _firstUpper_1 = StringExtensions.toFirstUpper(feature.getName());
            _builder.append(_firstUpper_1);
            _builder.append(" </label>");
            _builder.newLineIfNotEmpty();
            _builder.append("<br><br>");
            _builder.newLine();
            _builder.append("<input type=\"String\" ng-model=\"");
            String _name = feature.getName();
            _builder.append(_name);
            _builder.append("\">");
            _builder.newLineIfNotEmpty();
            _builder.append("<br><br>");
            _builder.newLine();
          } else {
            if (((!feature.getName().equals("date")) && feature.getType().getName().equals("Date"))) {
              _builder.append("<label> ");
              String _firstUpper_2 = StringExtensions.toFirstUpper(feature.getName());
              _builder.append(_firstUpper_2);
              _builder.append(" </label>");
              _builder.newLineIfNotEmpty();
              _builder.append("<br><br>");
              _builder.newLine();
              _builder.append("<input type=\"date\" ng-model=\"");
              String _name_1 = feature.getName();
              _builder.append(_name_1);
              _builder.append("\">");
              _builder.newLineIfNotEmpty();
              _builder.append("<br><br>");
              _builder.newLine();
            } else {
              boolean _equals_1 = feature.getType().getName().equals("Integer");
              if (_equals_1) {
                _builder.append("<label> ");
                String _firstUpper_3 = StringExtensions.toFirstUpper(feature.getName());
                _builder.append(_firstUpper_3);
                _builder.append(" </label>");
                _builder.newLineIfNotEmpty();
                _builder.append("<br><br>");
                _builder.newLine();
                _builder.append("<input type=\"number\" ng-model=\"");
                String _name_2 = feature.getName();
                _builder.append(_name_2);
                _builder.append("\">");
                _builder.newLineIfNotEmpty();
                _builder.append("<br><br>");
                _builder.newLine();
              } else {
                boolean _equals_2 = feature.getType().getName().equals("String");
                if (_equals_2) {
                  _builder.append("<label> ");
                  String _firstUpper_4 = StringExtensions.toFirstUpper(feature.getName());
                  _builder.append(_firstUpper_4);
                  _builder.append(" </label>");
                  _builder.newLineIfNotEmpty();
                  _builder.append("<br><br>");
                  _builder.newLine();
                  _builder.append("<textarea class=\"form-control\" rows=\"3\" ng-model=\"");
                  String _name_3 = feature.getName();
                  _builder.append(_name_3);
                  _builder.append("\"></textarea>");
                  _builder.newLineIfNotEmpty();
                  _builder.append("<br><br>");
                  _builder.newLine();
                }
              }
            }
          }
        }
      }
    }
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("<button type=\"submit\" class=\"btn btn-default\" ng-click=\"saveComment()\">Aceptar</button>");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("<button type=\"reset\" class=\"btn btn-default\">Reiniciar</button>");
    _builder.newLine();
    _builder.append("                                ");
    _builder.append("</form>");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("<!-- /.row (nested) -->");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<!-- /.panel-body -->");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<!-- /.panel -->");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<!-- /.col-lg-12 -->");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<!-- /.row -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!-- /#page-wrapper -->");
    _builder.newLine();
    _builder.newLine();
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("<!-- /#wrapper -->");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileCommentsDoctorViewJS(final Feature comment) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("angular.module(\'myApp.CommentsDoctorView");
    String _firstUpper = StringExtensions.toFirstUpper(comment.getName());
    _builder.append(_firstUpper);
    _builder.append("\', [\'ngRoute\'])");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append(".config([\'$routeProvider\', function($routeProvider) {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("$routeProvider.when(\'/CommentsDoctorView");
    String _firstUpper_1 = StringExtensions.toFirstUpper(comment.getName());
    _builder.append(_firstUpper_1, "  ");
    _builder.append("\', {");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("templateUrl: \'CommentsDoctorView");
    String _firstUpper_2 = StringExtensions.toFirstUpper(comment.getName());
    _builder.append(_firstUpper_2, "    ");
    _builder.append("/CommentsDoctorView");
    String _firstUpper_3 = StringExtensions.toFirstUpper(comment.getName());
    _builder.append(_firstUpper_3, "    ");
    _builder.append(".html\',");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("controller: \'CommentsDoctorView");
    String _firstUpper_4 = StringExtensions.toFirstUpper(comment.getName());
    _builder.append(_firstUpper_4, "    ");
    _builder.append("Ctrl\'");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("}])");
    _builder.newLine();
    _builder.newLine();
    _builder.append(".controller(\'CommentsDoctorView");
    String _firstUpper_5 = StringExtensions.toFirstUpper(comment.getName());
    _builder.append(_firstUpper_5);
    _builder.append("Ctrl\', [\'$rootScope\', \'$scope\', \'");
    String _firstLower = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower);
    _builder.append("\', function ($rootScope, $scope, ");
    String _firstLower_1 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_1);
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("     ");
    _builder.append("$scope.foundCD=$rootScope.FindID;");
    _builder.newLine();
    _builder.append("     ");
    String _firstLower_2 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_2, "     ");
    _builder.append(".get({");
    String _firstLower_3 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_3, "     ");
    _builder.append("Id:\"\"+$rootScope.patientId})");
    _builder.newLineIfNotEmpty();
    _builder.append("                ");
    _builder.append(".$promise.then(");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("//success");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("function( value ){");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("$scope.");
    String _firstLower_4 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_4, "                            ");
    _builder.append("C=value;");
    _builder.newLineIfNotEmpty();
    _builder.append("                            ");
    _builder.append("$scope.comments=$scope.");
    String _firstLower_5 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_5, "                            ");
    _builder.append("C.");
    String _name = comment.getName();
    _builder.append(_name, "                            ");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("                            ");
    _builder.append("if (typeof $scope.comments == \"undefined\"){");
    _builder.newLine();
    _builder.append("                                ");
    _builder.append("$scope.commentsY=false;");
    _builder.newLine();
    _builder.append("                                ");
    _builder.append("$scope.commentsTitle=\"No tiene ningun comentario\";");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("if(typeof $scope.comments != \"undefined\"){");
    _builder.newLine();
    _builder.append("                                ");
    _builder.append("$scope.commentsY=true;");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("//error");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("function( error ){");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("console.log(\"Identificador no se encuentra registrado\");");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append(");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}]);");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileCommentsDoctorViewHtml(final Feature comment) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<div ng-include=\"\'/app/Templates/templateDoctor.html\'\"></div>");
    _builder.newLine();
    _builder.append("<div id=\"page-wrapper\" ng-show=\"foundCD\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<div class=\"row\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<div class=\"col-lg-12\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<h1 class=\"page-header\">Comentarios de ");
    String _firstUpper = StringExtensions.toFirstUpper(comment.getName());
    _builder.append(_firstUpper, "            ");
    _builder.append("</h1>");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<!-- /.col-lg-12 -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<div class=\"row\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<div class=\"col-lg-12\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<div class=\"panel panel-default\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<div class=\"panel-heading\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<!-- /.panel-heading -->");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<div class=\"panel-body\">");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<div ng-hide=\"commentsY\">");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("{{commentsTitle}}");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<div ng-show=\"commentsY\">");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("<table width=\"100%\" class=\"table table-striped table-bordered table-hover\" id=\"dataTables-example\">");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("<thead>");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("<tr>");
    _builder.newLine();
    _builder.append("                                ");
    _builder.append("<th>Comentarios ");
    String _firstUpper_1 = StringExtensions.toFirstUpper(comment.getName());
    _builder.append(_firstUpper_1, "                                ");
    _builder.append("</th>");
    _builder.newLineIfNotEmpty();
    _builder.append("                            ");
    _builder.append("</tr>");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("</thead>");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("<tbody>");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("<tr ng-repeat=\"c in comments\" >");
    _builder.newLine();
    _builder.append("                                ");
    _builder.append("<td>");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("<div class=\"panel panel-green\">");
    _builder.newLine();
    {
      Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(comment.getType().eAllContents());
      for(final EObject dat : _iterable) {
        Feature feature = ((Feature) dat);
        _builder.newLineIfNotEmpty();
        {
          boolean _equals = feature.getType().getName().equals("Date");
          if (_equals) {
            _builder.append("<div class=\"panel-footer\">");
            _builder.newLine();
            _builder.append("\t");
            String _firstUpper_2 = StringExtensions.toFirstUpper(feature.getName());
            _builder.append(_firstUpper_2, "\t");
            _builder.append(": {{c.");
            String _name = feature.getName();
            _builder.append(_name, "\t");
            _builder.append(" | date:\"dd/MMMM/yyyy\"}}");
            _builder.newLineIfNotEmpty();
            _builder.append("</div>");
            _builder.newLine();
          } else {
            _builder.append("<div class=\"panel-heading\">");
            _builder.newLine();
            _builder.append("\t");
            String _firstUpper_3 = StringExtensions.toFirstUpper(feature.getName());
            _builder.append(_firstUpper_3, "\t");
            _builder.append(": {{c.");
            String _name_1 = feature.getName();
            _builder.append(_name_1, "\t");
            _builder.append("}}");
            _builder.newLineIfNotEmpty();
            _builder.append("</div>");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("                                    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                                ");
    _builder.append("</td>");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("</tr>");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("</tbody>");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("</table>");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("<!-- /.table-responsive -->");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<!-- /.panel-body -->");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<!-- /.panel -->");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<!-- /.col-lg-12 -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!-- /.row -->");
    _builder.newLine();
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("<!-- /#page-wrapper -->");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileRegisterDoctorViewJS(final Feature diagnostic) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("angular.module(\'myApp.RegisterDoctorView");
    String _firstUpper = StringExtensions.toFirstUpper(diagnostic.getName());
    _builder.append(_firstUpper);
    _builder.append("\', [\'ngRoute\'])");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append(".config([\'$routeProvider\', function($routeProvider) {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("$routeProvider.when(\'/RegisterDoctorView");
    String _firstUpper_1 = StringExtensions.toFirstUpper(diagnostic.getName());
    _builder.append(_firstUpper_1, "  ");
    _builder.append("\', {");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("templateUrl: \'RegisterDoctorView");
    String _firstUpper_2 = StringExtensions.toFirstUpper(diagnostic.getName());
    _builder.append(_firstUpper_2, "    ");
    _builder.append("/RegisterDoctorView");
    String _firstUpper_3 = StringExtensions.toFirstUpper(diagnostic.getName());
    _builder.append(_firstUpper_3, "    ");
    _builder.append(".html\',");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("controller: \'RegisterDoctorView");
    String _firstUpper_4 = StringExtensions.toFirstUpper(diagnostic.getName());
    _builder.append(_firstUpper_4, "    ");
    _builder.append("Ctrl\'");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("}])");
    _builder.newLine();
    _builder.newLine();
    _builder.append(".controller(\'RegisterDoctorView");
    String _firstUpper_5 = StringExtensions.toFirstUpper(diagnostic.getName());
    _builder.append(_firstUpper_5);
    _builder.append("Ctrl\', [\'$rootScope\', \'$scope\', \'");
    String _firstLower = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower);
    _builder.append("\', \'");
    String _firstLower_1 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_1);
    _builder.append("s\', function ($rootScope, $scope, ");
    String _firstLower_2 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_2);
    _builder.append(", ");
    String _firstLower_3 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_3);
    _builder.append("s) {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$scope.foundRD=$rootScope.FindID;");
    _builder.newLine();
    _builder.append("    ");
    String _firstLower_4 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_4, "    ");
    _builder.append(".get({");
    String _firstLower_5 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_5, "    ");
    _builder.append("Id:\"\"+$rootScope.patientId})");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append(".$promise.then(");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("//success");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("function( value ){");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("$scope.principal=value;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("$scope.diagnostics=$scope.principal.");
    String _name = diagnostic.getName();
    _builder.append(_name, "                ");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    {
      Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(diagnostic.getType().eAllContents());
      for(final EObject dat : _iterable) {
        _builder.append("                    ");
        Feature feature = ((Feature) dat);
        _builder.newLineIfNotEmpty();
        {
          if ((((((feature.getType().getName().equals("Byte") || feature.getType().getName().equals("Double")) || feature.getType().getName().equals("Float")) || feature.getType().getName().equals("Integer")) || feature.getType().getName().equals("Long")) || feature.getType().getName().equals("Short"))) {
            _builder.append("$scope.");
            String _name_1 = feature.getName();
            _builder.append(_name_1);
            _builder.append("=[];");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("                ");
    _builder.append("$scope.labels=[];");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("$scope.series = [\'Datos de Control ");
    String _firstUpper_6 = StringExtensions.toFirstUpper(diagnostic.getName());
    _builder.append(_firstUpper_6, "                ");
    _builder.append("\'];");
    _builder.newLineIfNotEmpty();
    _builder.append("                ");
    _builder.append("for(var n=0; n<$scope.diagnostics.length; n++){");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("var dd=$scope.diagnostics[n];");
    _builder.newLine();
    {
      Iterable<EObject> _iterable_1 = IteratorExtensions.<EObject>toIterable(diagnostic.getType().eAllContents());
      for(final EObject dat_1 : _iterable_1) {
        _builder.append("                        ");
        Feature feature_1 = ((Feature) dat_1);
        _builder.newLineIfNotEmpty();
        {
          if ((((((feature_1.getType().getName().equals("Byte") || feature_1.getType().getName().equals("Double")) || feature_1.getType().getName().equals("Float")) || feature_1.getType().getName().equals("Integer")) || feature_1.getType().getName().equals("Long")) || feature_1.getType().getName().equals("Short"))) {
            _builder.append("$scope.");
            String _name_2 = feature_1.getName();
            _builder.append(_name_2);
            _builder.append(".push(dd.");
            String _name_3 = feature_1.getName();
            _builder.append(_name_3);
            _builder.append(");");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("                    ");
    _builder.append("var datee=new Date(dd.date);");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("var dia = datee.getDate();");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("var mes = parseInt(datee.getMonth()) + 1;");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("var year = datee.getFullYear();");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("var dated=dia+\"/\"+mes+\"/\"+year;");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("$scope.labels.push(dated);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("//error");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("function( error ){");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("console.log(\"Error\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}]);");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileRegisterDoctorViewHtml(final Feature diagnostic) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<div ng-include=\"\'/app/Templates/templateDoctor.html\'\"></div>");
    _builder.newLine();
    _builder.append("<div id=\"page-wrapper\" ng-show=\"foundRD\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<div class=\"row\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<div class=\"col-lg-12\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<h1 class=\"page-header\">Datos de control de {{principal.name}} para ");
    String _firstUpper = StringExtensions.toFirstUpper(diagnostic.getName());
    _builder.append(_firstUpper, "            ");
    _builder.append("</h1>");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<!-- /.col-lg-12 -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<div class=\"row\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<div class=\"col-lg-12\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<div class=\"panel panel-default\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<div class=\"panel-heading\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<!-- /.panel-heading -->");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<div class=\"panel-body\">");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<table width=\"100%\" class=\"table table-striped table-bordered table-hover\" id=\"dataTables-example\">");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("<thead>");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("<tr>");
    _builder.newLine();
    {
      Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(diagnostic.getType().eAllContents());
      for(final EObject dat : _iterable) {
        _builder.append("\t\t\t                    ");
        Feature feature = ((Feature) dat);
        _builder.newLineIfNotEmpty();
        {
          if ((((((((feature.getType().getName().equals("Date") || feature.getType().getName().equals("String")) || feature.getType().getName().equals("Byte")) || feature.getType().getName().equals("Double")) || feature.getType().getName().equals("Float")) || feature.getType().getName().equals("Integer")) || feature.getType().getName().equals("Long")) || feature.getType().getName().equals("Short"))) {
            _builder.append("<th>");
            String _firstUpper_1 = StringExtensions.toFirstUpper(this._iQualifiedNameProvider.getFullyQualifiedName(dat).getLastSegment());
            _builder.append(_firstUpper_1);
            _builder.append("</th>");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("                        ");
    _builder.append("</tr>");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("</thead>");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("<tbody>");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("<tr ng-repeat=\"d in diagnostics\" >");
    _builder.newLine();
    {
      Iterable<EObject> _iterable_1 = IteratorExtensions.<EObject>toIterable(diagnostic.getType().eAllContents());
      for(final EObject dat_1 : _iterable_1) {
        Feature feature_1 = ((Feature) dat_1);
        _builder.newLineIfNotEmpty();
        {
          if (((((((feature_1.getType().getName().equals("String") || feature_1.getType().getName().equals("Byte")) || feature_1.getType().getName().equals("Double")) || feature_1.getType().getName().equals("Float")) || feature_1.getType().getName().equals("Integer")) || feature_1.getType().getName().equals("Long")) || feature_1.getType().getName().equals("Short"))) {
            _builder.append("<td>{{d.");
            String _name = feature_1.getName();
            _builder.append(_name);
            _builder.append("}}</td>");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          boolean _equals = feature_1.getType().getName().equals("Date");
          if (_equals) {
            _builder.append("<td>{{d.");
            String _name_1 = feature_1.getName();
            _builder.append(_name_1);
            _builder.append(" | date:\"dd/MMMM/yyyy\"}}</td>");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("                        ");
    _builder.append("</tr>");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("</tbody>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("</table>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<!-- /.table-responsive -->");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<!-- /.panel-body -->");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<!-- /.panel -->");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<!-- /.col-lg-12 -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<div class=\"row\">");
    _builder.newLine();
    {
      Iterable<EObject> _iterable_2 = IteratorExtensions.<EObject>toIterable(diagnostic.getType().eAllContents());
      for(final EObject dat_2 : _iterable_2) {
        Feature feature_2 = ((Feature) dat_2);
        _builder.newLineIfNotEmpty();
        {
          if ((((((feature_2.getType().getName().equals("Byte") || feature_2.getType().getName().equals("Double")) || feature_2.getType().getName().equals("Float")) || feature_2.getType().getName().equals("Integer")) || feature_2.getType().getName().equals("Long")) || feature_2.getType().getName().equals("Short"))) {
            _builder.append("<div class=\"col-lg-4\">");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("<div class=\"panel panel-default\">");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("<div class=\"panel-heading\">");
            _builder.newLine();
            _builder.append("\t\t\t");
            String _firstUpper_2 = StringExtensions.toFirstUpper(feature_2.getName());
            _builder.append(_firstUpper_2, "\t\t\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("</div>");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("<div class=\"panel-body\">");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("<canvas  id=\"");
            String _name_2 = feature_2.getName();
            _builder.append(_name_2, "\t\t\t");
            _builder.append("\" class=\"chart chart-bar\"");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t\t");
            _builder.append("chart-data=\"");
            String _name_3 = feature_2.getName();
            _builder.append(_name_3, "\t\t\t\t");
            _builder.append("\" chart-labels=\"labels\" chart-series=\"series\">");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t");
            _builder.append("</canvas>");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("</div>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("<!-- /.panel-body -->");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("</div>");
            _builder.newLine();
            _builder.append("<!-- /.panel -->");
            _builder.newLine();
            _builder.append("</div>");
            _builder.newLine();
            _builder.append("<!-- /.col-lg-4 -->");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!-- /.row -->");
    _builder.newLine();
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("<!-- /#page-wrapper -->");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileHomeDoctorJS(final Entity e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("angular.module(\'myApp.HomeDoctor\', [\'ngRoute\'])");
    _builder.newLine();
    _builder.newLine();
    _builder.append(".config([\'$routeProvider\', function($routeProvider) {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("$routeProvider.when(\'/HomeDoctor\', {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("templateUrl: \'HomeDoctor/HomeDoctor.html\',");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("controller: \'HomeDoctorCtrl\'");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("}])");
    _builder.newLine();
    _builder.newLine();
    _builder.append(".controller(\'HomeDoctorCtrl\', [\'$rootScope\', \'$scope\', \'");
    String _firstLower = StringExtensions.toFirstLower(e.getName());
    _builder.append(_firstLower);
    _builder.append("\',\'$location\', function ($rootScope, $scope, ");
    String _firstLower_1 = StringExtensions.toFirstLower(e.getName());
    _builder.append(_firstLower_1);
    _builder.append(",$location) {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$rootScope.FindID=false;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$rootScope.patientId=null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$scope.found=false;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$scope.pId=null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$rootScope.patientId=$scope.pId;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$scope.consultar=function(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$rootScope.patientId=$scope.pId;");
    _builder.newLine();
    _builder.append("        ");
    String _firstLower_2 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_2, "        ");
    _builder.append(".get({");
    String _firstLower_3 = StringExtensions.toFirstLower(e.getName());
    _builder.append(_firstLower_3, "        ");
    _builder.append("Id:\"\"+$rootScope.patientId})");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append(".$promise.then(");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("//success");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("function( value ){");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("$rootScope.FindID=true;");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("$scope.principal=value;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("//error");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("function( error ){");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("alert(\"Identificador no se encuentra registrado\");");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append(");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$scope.NuevaConsulta=function(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$rootScope.FindID=false;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("};");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}]);");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileHomeDoctorHtml(final Entity e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<div ng-include=\"\'/app/Templates/templateDoctor.html\'\"></div>");
    _builder.newLine();
    _builder.append("<div id=\"page-wrapper\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<div class=\"row\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<div class=\"col-lg-12\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<h1 class=\"page-header\">Consulta los datos de control</h1>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<!-- /.col-lg-12 -->");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<div ng-hide=\"FindID\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<label> Identificador a consultar</label>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<br><br>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<input type=\"number\" ng-model=\"pId\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<br><br>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<button type=\"button\" class=\"btn btn-success\" ng-click=\"consultar()\">Consultar Datos</button>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<br><br>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<div ng-show=\"FindID\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<button type=\"button\" class=\"btn btn-success\" ng-click=\"NuevaConsulta()\">Nueva Consulta</button>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<br><br>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<div class=\"row\" ng-show=\"FindID\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<div class=\"col-lg-12\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<div class=\"panel panel-default\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<div class=\"panel-heading\">");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("Datos de {{principal.name}}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<div class=\"panel-body\">");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<h2> Numero de Identificacion");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("<br><br>");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("<small> {{principal.id}} </small>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("</h2>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<br><br>");
    _builder.newLine();
    {
      EList<Feature> _features = e.getFeatures();
      for(final Feature f : _features) {
        {
          if (((!f.isMany()) && (IterableExtensions.size(IteratorExtensions.<EObject>toIterable(f.getType().eAllContents())) == 0))) {
            {
              if ((f.getType().getName().equals("String") || f.getType().getName().equals("Integer"))) {
                _builder.append("                    ");
                _builder.append("<h2> ");
                String _firstUpper = StringExtensions.toFirstUpper(f.getName());
                _builder.append(_firstUpper, "                    ");
                _builder.newLineIfNotEmpty();
                _builder.append("                    ");
                _builder.append("    ");
                _builder.append("<br><br>");
                _builder.newLine();
                _builder.append("                    ");
                _builder.append("    ");
                _builder.append("<small> {{principal.");
                String _name = f.getName();
                _builder.append(_name, "                        ");
                _builder.append("}} </small>");
                _builder.newLineIfNotEmpty();
                _builder.append("                    ");
                _builder.append("</h2>");
                _builder.newLine();
                _builder.append("                    ");
                _builder.append("<br><br>");
                _builder.newLine();
              } else {
                boolean _equals = f.getType().getName().equals("Date");
                if (_equals) {
                  _builder.append("                    ");
                  _builder.append("<h2> ");
                  String _firstUpper_1 = StringExtensions.toFirstUpper(f.getName());
                  _builder.append(_firstUpper_1, "                    ");
                  _builder.newLineIfNotEmpty();
                  _builder.append("                    ");
                  _builder.append("    ");
                  _builder.append("<br><br>");
                  _builder.newLine();
                  _builder.append("                    ");
                  _builder.append("    ");
                  _builder.append("<small> {{principal.");
                  String _name_1 = f.getName();
                  _builder.append(_name_1, "                        ");
                  _builder.append(" | date:\'yyyy-MM-dd\'}} </small>");
                  _builder.newLineIfNotEmpty();
                  _builder.append("                    ");
                  _builder.append("</h2>");
                  _builder.newLine();
                  _builder.append("                    ");
                  _builder.append("<br><br>");
                  _builder.newLine();
                }
              }
            }
          } else {
            if (((!f.isMany()) && (IterableExtensions.size(IteratorExtensions.<EObject>toIterable(f.getType().eAllContents())) > 0))) {
              _builder.append("                    ");
              _builder.append("<label><h1> Datos de ");
              String _firstUpper_2 = StringExtensions.toFirstUpper(f.getName());
              _builder.append(_firstUpper_2, "                    ");
              _builder.append(" </h1></label>");
              _builder.newLineIfNotEmpty();
              _builder.append("                    ");
              _builder.append("<br><br>");
              _builder.newLine();
              {
                Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(f.getType().eAllContents());
                for(final EObject dat : _iterable) {
                  _builder.append("                                ");
                  Feature feature = ((Feature) dat);
                  _builder.newLineIfNotEmpty();
                  {
                    if ((feature.getType().getName().equals("String") || feature.getType().getName().equals("Integer"))) {
                      _builder.append("                                ");
                      _builder.append("<h2> ");
                      String _name_2 = feature.getName();
                      _builder.append(_name_2, "                                ");
                      _builder.newLineIfNotEmpty();
                      _builder.append("                                ");
                      _builder.append("<br><br>");
                      _builder.newLine();
                      _builder.append("                                ");
                      _builder.append("<small> {{principal.");
                      String _name_3 = f.getName();
                      _builder.append(_name_3, "                                ");
                      _builder.append(".");
                      String _name_4 = feature.getName();
                      _builder.append(_name_4, "                                ");
                      _builder.append("}} </small>");
                      _builder.newLineIfNotEmpty();
                      _builder.append("                                ");
                      _builder.append("</h2>");
                      _builder.newLine();
                      _builder.append("                                ");
                      _builder.append("<br><br>");
                      _builder.newLine();
                    } else {
                      boolean _equals_1 = feature.getType().getName().equals("Date");
                      if (_equals_1) {
                        _builder.append("                                ");
                        _builder.append("<h2> ");
                        String _name_5 = feature.getName();
                        _builder.append(_name_5, "                                ");
                        _builder.newLineIfNotEmpty();
                        _builder.append("                                ");
                        _builder.append("<br><br>");
                        _builder.newLine();
                        _builder.append("                                ");
                        _builder.append("<small> {{principal.");
                        String _name_6 = f.getName();
                        _builder.append(_name_6, "                                ");
                        _builder.append(".");
                        String _name_7 = feature.getName();
                        _builder.append(_name_7, "                                ");
                        _builder.append(" | date:\'yyyy-MM-dd\'}} </small>");
                        _builder.newLineIfNotEmpty();
                        _builder.append("                                ");
                        _builder.append("</h2>");
                        _builder.newLine();
                        _builder.append("                                ");
                        _builder.append("<br><br>");
                        _builder.newLine();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    _builder.append("                ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<!-- /.panel-body -->");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<!-- /.panel -->");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<!-- /.col-lg-12 -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!-- /.row -->");
    _builder.newLine();
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("<!-- /#page-wrapper -->");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileTemplateDoctorViewJS(final ArrayList<Feature> comments) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("angular.module(\'myApp.templateDoctor\', [\'ngRoute\'])");
    _builder.newLine();
    _builder.newLine();
    _builder.append(".controller(\'templateDoctorCtrl\', [\'$rootScope\', \'$scope\', \'");
    String _firstLower = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower);
    _builder.append("\', \'$location\', function ($rootScope, $scope, ");
    String _firstLower_1 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_1);
    _builder.append(", $location) {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("      ");
    _builder.append("$scope.continueLogoutD=function(){");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$location.path(\"view1\");");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("$scope.continueHomeD=function(){");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$location.path(\"HomeDoctor\");");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("};");
    _builder.newLine();
    {
      for(final Feature diag : this.diagnostics) {
        _builder.append("      ");
        _builder.append("$scope.continueRegistersP");
        String _firstUpper = StringExtensions.toFirstUpper(diag.getName());
        _builder.append(_firstUpper, "      ");
        _builder.append("=function(){");
        _builder.newLineIfNotEmpty();
        _builder.append("      ");
        _builder.append("\t\t");
        _builder.append("$location.path(\"RegisterDoctorView");
        String _firstUpper_1 = StringExtensions.toFirstUpper(diag.getName());
        _builder.append(_firstUpper_1, "      \t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("      ");
        _builder.append("};");
        _builder.newLine();
      }
    }
    {
      for(final Feature comm : comments) {
        _builder.append("$scope.continueCommentRegister");
        String _firstUpper_2 = StringExtensions.toFirstUpper(comm.getName());
        _builder.append(_firstUpper_2);
        _builder.append("=function(){");
        _builder.newLineIfNotEmpty();
        _builder.append("        ");
        _builder.append("$location.path(\"CommentRegister");
        String _firstUpper_3 = StringExtensions.toFirstUpper(comm.getName());
        _builder.append(_firstUpper_3, "        ");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("};");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("$scope.continueCommentView");
        String _firstUpper_4 = StringExtensions.toFirstUpper(comm.getName());
        _builder.append(_firstUpper_4, "  ");
        _builder.append("=function(){");
        _builder.newLineIfNotEmpty();
        _builder.append("        ");
        _builder.append("$location.path(\"CommentsDoctorView");
        String _firstUpper_5 = StringExtensions.toFirstUpper(comm.getName());
        _builder.append(_firstUpper_5, "        ");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("};");
        _builder.newLine();
      }
    }
    _builder.append("}]);");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileTemplateDoctorViewHtml(final ArrayList<Feature> comments) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<div ng-controller=\"templateDoctorCtrl\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!-- Navigation -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<nav class=\"navbar navbar-default navbar-static-top\" role=\"navigation\" style=\"margin-bottom: 0\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<div class=\"navbar-header\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\".navbar-collapse\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<span class=\"sr-only\">Toggle navigation</span>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<span class=\"icon-bar\"></span>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<span class=\"icon-bar\"></span>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<span class=\"icon-bar\"></span>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</button>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<a class=\"navbar-brand\" href=\"index.html\">Multiple Client</a>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<!-- /.navbar-header -->");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<ul class=\"nav navbar-top-links navbar-right\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<li><a ng-click=\"continueLogoutD()\"><i class=\"fa fa-sign-out fa-fw\"></i> Cerrar Sesion</a>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</li>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</ul>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<!-- /.navbar-top-links -->");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<div class=\"navbar-default sidebar\" role=\"navigation\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<div class=\"sidebar-nav navbar-collapse\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<ul class=\"nav\" id=\"side-menu\">");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<li>");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("<a ng-click=\"continueHomeD()\"><i class=\"fa fa-dashboard fa-fw\"></i>Inicio</a>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("</li>");
    _builder.newLine();
    {
      for(final Feature diag : this.diagnostics) {
        _builder.append("                    ");
        _builder.append("<li>");
        _builder.newLine();
        _builder.append("                    ");
        _builder.append("    ");
        _builder.append("<a  ng-click=\"continueRegistersP");
        String _firstUpper = StringExtensions.toFirstUpper(diag.getName());
        _builder.append(_firstUpper, "                        ");
        _builder.append("()\"><i class=\"fa fa-bar-chart-o fa-fw\"></i> Registros de ");
        String _firstUpper_1 = StringExtensions.toFirstUpper(diag.getName());
        _builder.append(_firstUpper_1, "                        ");
        _builder.append("</a>");
        _builder.newLineIfNotEmpty();
        _builder.append("                    ");
        _builder.append("</li>");
        _builder.newLine();
      }
    }
    _builder.append("                    ");
    _builder.append("<li>");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("<a><i class=\"fa fa-edit fa-fw\"></i> Recomendaciones</a>");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("<ul class=\"nav nav-second-level\">");
    _builder.newLine();
    {
      for(final Feature comm : comments) {
        _builder.append("                        \t");
        _builder.append("<li>");
        _builder.newLine();
        _builder.append("                        \t");
        _builder.append("\t");
        _builder.append("<a ng-click=\"continueCommentView");
        String _firstUpper_2 = StringExtensions.toFirstUpper(comm.getName());
        _builder.append(_firstUpper_2, "                        \t\t");
        _builder.append("()\">Ver Comentarios ");
        String _firstUpper_3 = StringExtensions.toFirstUpper(comm.getName());
        _builder.append(_firstUpper_3, "                        \t\t");
        _builder.append("</a>");
        _builder.newLineIfNotEmpty();
        _builder.append("                        \t");
        _builder.append("</li>");
        _builder.newLine();
        _builder.append("                        \t");
        _builder.append("<li>");
        _builder.newLine();
        _builder.append("                        \t");
        _builder.append("\t");
        _builder.append("<a ng-click=\"continueCommentRegister");
        String _firstUpper_4 = StringExtensions.toFirstUpper(comm.getName());
        _builder.append(_firstUpper_4, "                        \t\t");
        _builder.append("()\">Registrar Nuevo Comentario ");
        String _firstUpper_5 = StringExtensions.toFirstUpper(comm.getName());
        _builder.append(_firstUpper_5, "                        \t\t");
        _builder.append("</a>");
        _builder.newLineIfNotEmpty();
        _builder.append("                        \t");
        _builder.append("</li>");
        _builder.newLine();
      }
    }
    _builder.append("                        ");
    _builder.append("</ul>");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("<!-- /.nav-second-level -->");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("</li>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("</ul>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<!-- /.sidebar-collapse -->");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<!-- /.navbar-static-side -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</nav>");
    _builder.newLine();
    _builder.append("</div>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileTemplateInvestigatorViewJS(final ArrayList<Feature> diagnostics) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("angular.module(\'myApp.templateInvestigator\', [\'ngRoute\'])");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append(".controller(\'templateInvestigatorCtrl\', [\'$rootScope\', \'$scope\', \'$location\', function ($rootScope, $scope, $location) {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("      ");
    _builder.append("$scope.continueLogoutI=function(){");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$location.path(\"view1\");");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("$scope.continueHomeI=function(){");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$location.path(\"HomeInvestigator\");");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("};");
    _builder.newLine();
    {
      for(final Feature diag : diagnostics) {
        _builder.append("\t");
        _builder.append("$scope.continueRegistersI");
        String _firstUpper = StringExtensions.toFirstUpper(diag.getName());
        _builder.append(_firstUpper, "\t");
        _builder.append("=function(){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("        ");
        _builder.append("$location.path(\"RegistersInvestigatorView");
        String _firstUpper_1 = StringExtensions.toFirstUpper(diag.getName());
        _builder.append(_firstUpper_1, "\t        ");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("  ");
        _builder.append("};");
        _builder.newLine();
      }
    }
    _builder.append("}]);");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileTemplateInvestigatorViewHtml(final ArrayList<Feature> diagnostics) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<meta charset=\"windows-1252\">");
    _builder.newLine();
    _builder.append("<div ng-controller=\"templateInvestigatorCtrl\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!-- Navigation -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<nav class=\"navbar navbar-default navbar-static-top\" role=\"navigation\" style=\"margin-bottom: 0\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<div class=\"navbar-header\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\".navbar-collapse\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<span class=\"sr-only\">Toggle navigation</span>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<span class=\"icon-bar\"></span>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<span class=\"icon-bar\"></span>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<span class=\"icon-bar\"></span>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</button>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<a class=\"navbar-brand\" href=\"index.html\">Multiple Client</a>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<!-- /.navbar-header -->");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<ul class=\"nav navbar-top-links navbar-right\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<li><a ng-click=\"continueLogoutI()\"><i class=\"fa fa-sign-out fa-fw\"></i> Cerrar Sesion</a>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</li>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</ul>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<!-- /.navbar-top-links -->");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<div class=\"navbar-default sidebar\" role=\"navigation\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<div class=\"sidebar-nav navbar-collapse\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<ul class=\"nav\" id=\"side-menu\">");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<li>");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("<a ng-click=\"continueHomeI()\"><i class=\"fa fa-dashboard fa-fw\"></i>Inicio</a>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("</li>");
    _builder.newLine();
    {
      for(final Feature diag : diagnostics) {
        _builder.append("                    ");
        _builder.append("<li>");
        _builder.newLine();
        _builder.append("                    ");
        _builder.append("<a  ng-click=\"continueRegistersI");
        String _firstUpper = StringExtensions.toFirstUpper(diag.getName());
        _builder.append(_firstUpper, "                    ");
        _builder.append("()\"><i class=\"fa fa-bar-chart-o fa-fw\"></i> Registros del Estudio ");
        String _firstUpper_1 = StringExtensions.toFirstUpper(diag.getName());
        _builder.append(_firstUpper_1, "                    ");
        _builder.append(" </a>");
        _builder.newLineIfNotEmpty();
        _builder.append("                    ");
        _builder.append("</li>                ");
        _builder.newLine();
      }
    }
    _builder.append("                ");
    _builder.append("</ul>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<!-- /.sidebar-collapse -->");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<!-- /.navbar-static-side -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</nav>");
    _builder.newLine();
    _builder.append("</div>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileIndexHtml(final ArrayList<JSModuleData> modules) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<!DOCTYPE html>");
    _builder.newLine();
    _builder.append("<!--[if lt IE 7]>      <html lang=\"en\" ng-app=\"myApp\" class=\"no-chart lt-ie9 lt-ie8 lt-ie7\"> <![endif]-->");
    _builder.newLine();
    _builder.append("<!--[if IE 7]>         <html lang=\"en\" ng-app=\"myApp\" class=\"no-chart lt-ie9 lt-ie8\"> <![endif]-->");
    _builder.newLine();
    _builder.append("<!--[if IE 8]>         <html lang=\"en\" ng-app=\"myApp\" class=\"no-chart lt-ie9\"> <![endif]-->");
    _builder.newLine();
    _builder.append("<!--[if gt IE 8]><!--> <html lang=\"en\" ng-app=\"myApp\" class=\"no-js\"> <!--<![endif]-->");
    _builder.newLine();
    _builder.append("<head>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<![endif]-->");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<meta charset=\"utf-8\">");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<title>My AngularJS App</title>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<meta name=\"description\" content=\"\">");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<link rel=\"stylesheet\" href=\"bower_components/html5-boilerplate/dist/css/normalize.css\">");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<link rel=\"stylesheet\" href=\"bower_components/html5-boilerplate/dist/css/main.css\">");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<link rel=\"stylesheet\" href=\"app.css\">");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<!-- Bootstrap Core CSS -->");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<link href=\"/app/vendor/bootstrap/css/bootstrap.min.css\" rel=\"stylesheet\">");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<!-- MetisMenu CSS -->");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<link href=\"/app/vendor/metisMenu/metisMenu.min.css\" rel=\"stylesheet\">");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<!-- Custom CSS -->");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<link href=\"/app/dist/css/sb-admin-2.css\" rel=\"stylesheet\">");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<!-- Custom Fonts -->");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<link href=\"/app/vendor/font-awesome/css/font-awesome.min.css\" rel=\"stylesheet\" type=\"text/css\">");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<script src=\"/app/bower_components/html5-boilerplate/dist/js/vendor/modernizr-2.8.3.min.js\"></script>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<!-- HTML5 Shim and Respond.chart IE8 support of HTML5 elements and media queries -->");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<!-- WARNING: Respond.chart doesn\'t work if you view the page via file:// -->");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<!--[if lt IE 9]>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<script src=\"https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js\"></script>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<script src=\"https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js\"></script>");
    _builder.newLine();
    _builder.append("</head>");
    _builder.newLine();
    _builder.append("<body>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<!--[if lt IE 7]>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<p class=\"browsehappy\">You are using an <strong>outdated</strong> browser. Please <a href=\"http://browsehappy.com/\">upgrade your browser</a> to improve your experience.</p>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<![endif]-->");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<div ng-view></div>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<div>Cliente Multiple app: v<span app-version></span></div>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<!-- In production use:");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/x.x.x/angular.min.chart\"></script>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("-->");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<script src=\"bower_components/angular/angular.js\"></script>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<script src=\"bower_components/angular-route/angular-route.js\"></script>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<script src=\"bower_components/angular-resource/angular-resource.js\"></script>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<script src=\"bower_components/chart.js/dist/Chart.min.js\"></script>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<script src=\"bower_components/angular-chart.js/dist/angular-chart.min.js\"></script>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<script src=\"app.js\"></script>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<script src=\"view1/view1.js\"></script>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<script src=\"LoginView/LoginView.js\"></script>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<script src=\"PatientAutorization/PatientAutorization.js\"></script>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<script src=\"Templates/templateInvestigator.js\"></script>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<script src=\"Templates/templateDoctor.js\"></script>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<script src=\"Templates/templatePatient.js\"></script>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<script src=\"HomeInvestigator/HomeInvestigator.js\"></script>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<script src=\"HomeDoctor/HomeDoctor.js\"></script>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<script src=\"HomePatient/HomePatient.js\"></script>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<script src=\"UpdatePatient/UpdatePatient.js\"></script>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<script src=\"PatientProfile/PatientProfile.js\"></script>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<script src=\"PatientRegister/PatientRegister.js\"></script>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<script src=\"PatientChoiceView/PatientChoiceView.js\"></script>");
    _builder.newLine();
    {
      for(final JSModuleData m : modules) {
        _builder.append("  ");
        _builder.append("<script src=\"");
        String _htmlSRCString = m.getHtmlSRCString();
        _builder.append(_htmlSRCString, "  ");
        _builder.append("\"></script>");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("  ");
    _builder.append("<script src=\"/app/dist/js/sb-admin-2.js\"></script>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<script src=\"services/services.js\"></script>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<script src=\"components/version/version.js\"></script>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<script src=\"components/version/version-directive.js\"></script>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<script src=\"components/version/interpolate-filter.js\"></script><!-- jQuery -->");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<script src=\"/app/vendor/jquery/jquery.min.js\"></script>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<!-- Bootstrap Core JavaScript -->");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<script src=\"/app/vendor/bootstrap/js/bootstrap.min.js\"></script>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<!-- Metis Menu Plugin JavaScript -->");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<script src=\"/app/vendor/metisMenu/metisMenu.min.js\"></script>");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("</body>");
    _builder.newLine();
    _builder.append("</html>");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileAppJS(final ArrayList<JSModuleData> modules) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("angular.module(\'myApp\', [");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("\'ngRoute\',");
    _builder.newLine();
    {
      for(final JSModuleData m : modules) {
        _builder.append("  ");
        _builder.append("\'");
        String _jSAppModuleString = m.getJSAppModuleString();
        _builder.append(_jSAppModuleString, "  ");
        _builder.append("\',");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("  ");
    _builder.append("\'myApp.templateDoctor\',");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("\'myApp.HomePatient\',");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("\'myApp.UpdatePatient\',");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("\'myApp.PatientProfile\',");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("\'myApp.PatientRegister\',");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("\'myApp.templateInvestigator\',");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("\'myApp.templatePatient\',");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("\'myApp.view1\',");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("\'myApp.LoginView\',");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("\'myApp.HomeInvestigator\',");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("\'myApp.PatientAutorization\',");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("\'myApp.PatientChoiceView\',");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("\'myApp.HomeDoctor\',");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("\'myApp.version\',");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("\'services.factory\',");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("\'chart.js\'");
    _builder.newLine();
    _builder.append("]).");
    _builder.newLine();
    _builder.append("config([\'$locationProvider\', \'$routeProvider\', function($locationProvider, $routeProvider) {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("$locationProvider.hashPrefix(\'!\');");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("$routeProvider.otherwise({redirectTo: \'/view1\'});");
    _builder.newLine();
    _builder.append("}]);");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileRegistersInvestigatorViewJS(final Feature f) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("angular.module(\'myApp.RegistersInvestigatorView");
    String _firstUpper = StringExtensions.toFirstUpper(f.getName());
    _builder.append(_firstUpper);
    _builder.append("\', [\'ngRoute\'])");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append(".config([\'$routeProvider\', function($routeProvider) {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("$routeProvider.when(\'/RegistersInvestigatorView");
    String _firstUpper_1 = StringExtensions.toFirstUpper(f.getName());
    _builder.append(_firstUpper_1, "  ");
    _builder.append("\', {");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("templateUrl: \'RegistersInvestigatorView");
    String _firstUpper_2 = StringExtensions.toFirstUpper(f.getName());
    _builder.append(_firstUpper_2, "    ");
    _builder.append("/RegistersInvestigatorView");
    String _firstUpper_3 = StringExtensions.toFirstUpper(f.getName());
    _builder.append(_firstUpper_3, "    ");
    _builder.append(".html\',");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("controller: \'RegistersInvestigatorView");
    String _firstUpper_4 = StringExtensions.toFirstUpper(f.getName());
    _builder.append(_firstUpper_4, "    ");
    _builder.append("Ctrl\'");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("}])");
    _builder.newLine();
    _builder.newLine();
    _builder.append(".controller(\'RegistersInvestigatorView");
    String _firstUpper_5 = StringExtensions.toFirstUpper(f.getName());
    _builder.append(_firstUpper_5);
    _builder.append("Ctrl\', [\'");
    String _firstLower = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower);
    _builder.append("\', \'");
    String _firstLower_1 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_1);
    _builder.append("s\', \'$rootScope\', \'$scope\', function (");
    String _firstLower_2 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_2);
    _builder.append(", ");
    String _firstLower_3 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_3);
    _builder.append("s, $rootScope, $scope) {");
    _builder.newLineIfNotEmpty();
    _builder.append("     ");
    String _firstLower_4 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_4, "     ");
    _builder.append("s.get()");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append(".$promise.then(");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("//success");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("function( value ){");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("$scope.");
    String _firstLower_5 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_5, "                    ");
    _builder.append("sList=value;");
    _builder.newLineIfNotEmpty();
    _builder.append("                    ");
    int intPropCounter = 0;
    _builder.newLineIfNotEmpty();
    {
      Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(f.getType().eAllContents());
      for(final EObject dat : _iterable) {
        _builder.append("\t\t                    ");
        Feature feature = ((Feature) dat);
        _builder.newLineIfNotEmpty();
        {
          if ((((((feature.getType().getName().equals("Byte") || feature.getType().getName().equals("Double")) || feature.getType().getName().equals("Float")) || feature.getType().getName().equals("Integer")) || feature.getType().getName().equals("Long")) || feature.getType().getName().equals("Short"))) {
            _builder.append("$scope.");
            String _lastSegment = this._iQualifiedNameProvider.getFullyQualifiedName(dat).getLastSegment();
            _builder.append(_lastSegment);
            _builder.append("=[];");
            _builder.newLineIfNotEmpty();
            _builder.append("//");
            _builder.append(intPropCounter = (intPropCounter + 1));
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("                    ");
    _builder.append("$scope.labels=[];");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("$scope.diagnostics=[];");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("$scope.series = [\'Datos de Control del estudio ");
    String _firstUpper_6 = StringExtensions.toFirstUpper(f.getName());
    _builder.append(_firstUpper_6, "                    ");
    _builder.append("\'];");
    _builder.newLineIfNotEmpty();
    _builder.append("                    ");
    _builder.append("$scope.principalAndDiagnostic=[];");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("for (var i = 0; i < $scope.");
    String _firstLower_6 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_6, "                    ");
    _builder.append("sList.length; i++) {");
    _builder.newLineIfNotEmpty();
    _builder.append("                        ");
    _builder.append("if($scope.");
    String _firstLower_7 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_7, "                        ");
    _builder.append("sList[i].");
    String _name = f.getName();
    _builder.append(_name, "                        ");
    _builder.append(".length >= 1){");
    _builder.newLineIfNotEmpty();
    _builder.append("                            ");
    _builder.append("$scope.");
    String _firstLower_8 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_8, "                            ");
    _builder.append("Act=$scope.");
    String _firstLower_9 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_9, "                            ");
    _builder.append("sList[i];");
    _builder.newLineIfNotEmpty();
    _builder.append("                            ");
    _builder.append("$scope.labels.push($scope.");
    String _firstLower_10 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_10, "                            ");
    _builder.append("Act.id);");
    _builder.newLineIfNotEmpty();
    {
      Iterable<EObject> _iterable_1 = IteratorExtensions.<EObject>toIterable(f.getType().eAllContents());
      for(final EObject dat_1 : _iterable_1) {
        _builder.append("        \t\t                    ");
        Feature feature_1 = ((Feature) dat_1);
        _builder.newLineIfNotEmpty();
        {
          if ((((((feature_1.getType().getName().equals("Byte") || feature_1.getType().getName().equals("Double")) || feature_1.getType().getName().equals("Float")) || feature_1.getType().getName().equals("Integer")) || feature_1.getType().getName().equals("Long")) || feature_1.getType().getName().equals("Short"))) {
            _builder.append("var ");
            String _lastSegment_1 = this._iQualifiedNameProvider.getFullyQualifiedName(dat_1).getLastSegment();
            _builder.append(_lastSegment_1);
            _builder.append("Initial=0;");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("                            ");
    _builder.append("for(var n=0; n<$scope.");
    String _firstLower_11 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_11, "                            ");
    _builder.append("Act.");
    String _name_1 = f.getName();
    _builder.append(_name_1, "                            ");
    _builder.append(".length; n++){");
    _builder.newLineIfNotEmpty();
    _builder.append("                                ");
    _builder.append("var dd=$scope.");
    String _firstLower_12 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_12, "                                ");
    _builder.append("Act.");
    String _name_2 = f.getName();
    _builder.append(_name_2, "                                ");
    _builder.append("[n];");
    _builder.newLineIfNotEmpty();
    {
      Iterable<EObject> _iterable_2 = IteratorExtensions.<EObject>toIterable(f.getType().eAllContents());
      for(final EObject dat_2 : _iterable_2) {
        _builder.append("            \t\t                    ");
        Feature feature_2 = ((Feature) dat_2);
        _builder.newLineIfNotEmpty();
        {
          if ((((((feature_2.getType().getName().equals("Byte") || feature_2.getType().getName().equals("Double")) || feature_2.getType().getName().equals("Float")) || feature_2.getType().getName().equals("Integer")) || feature_2.getType().getName().equals("Long")) || feature_2.getType().getName().equals("Short"))) {
            String _lastSegment_2 = this._iQualifiedNameProvider.getFullyQualifiedName(dat_2).getLastSegment();
            _builder.append(_lastSegment_2);
            _builder.append("Initial=");
            String _lastSegment_3 = this._iQualifiedNameProvider.getFullyQualifiedName(dat_2).getLastSegment();
            _builder.append(_lastSegment_3);
            _builder.append("Initial+dd.");
            String _lastSegment_4 = this._iQualifiedNameProvider.getFullyQualifiedName(dat_2).getLastSegment();
            _builder.append(_lastSegment_4);
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("$scope.principalAndDiagnostic.push([$scope.");
    String _firstLower_13 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_13);
    _builder.append("Act.id, $scope.");
    String _firstLower_14 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_14);
    _builder.append("Act.name");
    _builder.newLineIfNotEmpty();
    {
      Iterable<EObject> _iterable_3 = IteratorExtensions.<EObject>toIterable(f.getType().eAllContents());
      for(final EObject dat_3 : _iterable_3) {
        _builder.append("        ");
        Feature feature_3 = ((Feature) dat_3);
        _builder.newLineIfNotEmpty();
        {
          if ((((((((feature_3.getType().getName().equals("Date") || feature_3.getType().getName().equals("String")) || feature_3.getType().getName().equals("Byte")) || feature_3.getType().getName().equals("Double")) || feature_3.getType().getName().equals("Float")) || feature_3.getType().getName().equals("Integer")) || feature_3.getType().getName().equals("Long")) || feature_3.getType().getName().equals("Short"))) {
            _builder.append(", dd.");
            String _lastSegment_5 = this._iQualifiedNameProvider.getFullyQualifiedName(dat_3).getLastSegment();
            _builder.append(_lastSegment_5);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("]);");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("}");
    _builder.newLine();
    {
      Iterable<EObject> _iterable_4 = IteratorExtensions.<EObject>toIterable(f.getType().eAllContents());
      for(final EObject dat_4 : _iterable_4) {
        _builder.append("        \t\t                    ");
        Feature feature_4 = ((Feature) dat_4);
        _builder.newLineIfNotEmpty();
        {
          if ((((((feature_4.getType().getName().equals("Byte") || feature_4.getType().getName().equals("Double")) || feature_4.getType().getName().equals("Float")) || feature_4.getType().getName().equals("Integer")) || feature_4.getType().getName().equals("Long")) || feature_4.getType().getName().equals("Short"))) {
            _builder.append("$scope.");
            String _lastSegment_6 = this._iQualifiedNameProvider.getFullyQualifiedName(dat_4).getLastSegment();
            _builder.append(_lastSegment_6);
            _builder.append(".push(");
            String _lastSegment_7 = this._iQualifiedNameProvider.getFullyQualifiedName(dat_4).getLastSegment();
            _builder.append(_lastSegment_7);
            _builder.append("Initial/$scope.");
            String _firstLower_15 = StringExtensions.toFirstLower(this.classToServe.getName());
            _builder.append(_firstLower_15);
            _builder.append("Act.");
            String _name_3 = f.getName();
            _builder.append(_name_3);
            _builder.append(".length);");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("                            ");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("$scope.diagnostics.push($scope.");
    String _firstLower_16 = StringExtensions.toFirstLower(this.classToServe.getName());
    _builder.append(_firstLower_16, "                            ");
    _builder.append("sList[i].");
    String _name_4 = f.getName();
    _builder.append(_name_4, "                            ");
    _builder.append("[0]);");
    _builder.newLineIfNotEmpty();
    _builder.append("                        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}");
    _builder.newLine();
    {
      Iterable<EObject> _iterable_5 = IteratorExtensions.<EObject>toIterable(f.getType().eAllContents());
      for(final EObject dat_5 : _iterable_5) {
        _builder.append("\t\t                    ");
        Feature feature_5 = ((Feature) dat_5);
        _builder.newLineIfNotEmpty();
        {
          if ((((((feature_5.getType().getName().equals("Byte") || feature_5.getType().getName().equals("Double")) || feature_5.getType().getName().equals("Float")) || feature_5.getType().getName().equals("Integer")) || feature_5.getType().getName().equals("Long")) || feature_5.getType().getName().equals("Short"))) {
            String _lastSegment_8 = this._iQualifiedNameProvider.getFullyQualifiedName(dat_5).getLastSegment();
            _builder.append(_lastSegment_8);
            _builder.append("Initial=0;");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("                    ");
    _builder.append("for(var j = 0; j < $scope.");
    String _lastSegment_9 = this._iQualifiedNameProvider.getFullyQualifiedName(((EObject[])Conversions.unwrapArray(IteratorExtensions.<EObject>toIterable(f.getType().eAllContents()), EObject.class))[0]).getLastSegment();
    _builder.append(_lastSegment_9, "                    ");
    _builder.append(".length; j++) {");
    _builder.newLineIfNotEmpty();
    {
      Iterable<EObject> _iterable_6 = IteratorExtensions.<EObject>toIterable(f.getType().eAllContents());
      for(final EObject dat_6 : _iterable_6) {
        _builder.append("\t\t\t                    ");
        Feature feature_6 = ((Feature) dat_6);
        _builder.newLineIfNotEmpty();
        {
          if ((((((feature_6.getType().getName().equals("Byte") || feature_6.getType().getName().equals("Double")) || feature_6.getType().getName().equals("Float")) || feature_6.getType().getName().equals("Integer")) || feature_6.getType().getName().equals("Long")) || feature_6.getType().getName().equals("Short"))) {
            String _lastSegment_10 = this._iQualifiedNameProvider.getFullyQualifiedName(dat_6).getLastSegment();
            _builder.append(_lastSegment_10);
            _builder.append("Initial=");
            String _lastSegment_11 = this._iQualifiedNameProvider.getFullyQualifiedName(dat_6).getLastSegment();
            _builder.append(_lastSegment_11);
            _builder.append("Initial+$scope.");
            String _lastSegment_12 = this._iQualifiedNameProvider.getFullyQualifiedName(dat_6).getLastSegment();
            _builder.append(_lastSegment_12);
            _builder.append("[j];");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("$scope.todoData=[];");
    _builder.newLine();
    {
      Iterable<EObject> _iterable_7 = IteratorExtensions.<EObject>toIterable(f.getType().eAllContents());
      for(final EObject dat_7 : _iterable_7) {
        _builder.append("\t\t                    ");
        Feature feature_7 = ((Feature) dat_7);
        _builder.newLineIfNotEmpty();
        {
          if ((((((feature_7.getType().getName().equals("Byte") || feature_7.getType().getName().equals("Double")) || feature_7.getType().getName().equals("Float")) || feature_7.getType().getName().equals("Integer")) || feature_7.getType().getName().equals("Long")) || feature_7.getType().getName().equals("Short"))) {
            _builder.append("$scope.todoData.push(");
            String _lastSegment_13 = this._iQualifiedNameProvider.getFullyQualifiedName(dat_7).getLastSegment();
            _builder.append(_lastSegment_13);
            _builder.append("Initial/$scope.");
            String _lastSegment_14 = this._iQualifiedNameProvider.getFullyQualifiedName(dat_7).getLastSegment();
            _builder.append(_lastSegment_14);
            _builder.append(".length);");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t\t\t\t\t");
    _builder.append("$scope.todoLabels=[");
    _builder.newLine();
    {
      Iterable<EObject> _iterable_8 = IteratorExtensions.<EObject>toIterable(f.getType().eAllContents());
      for(final EObject dat_8 : _iterable_8) {
        _builder.append("\t\t                    ");
        Feature feature_8 = ((Feature) dat_8);
        _builder.newLineIfNotEmpty();
        {
          if ((((((feature_8.getType().getName().equals("Byte") || feature_8.getType().getName().equals("Double")) || feature_8.getType().getName().equals("Float")) || feature_8.getType().getName().equals("Integer")) || feature_8.getType().getName().equals("Long")) || feature_8.getType().getName().equals("Short"))) {
            _builder.append("\'");
            String _firstUpper_7 = StringExtensions.toFirstUpper(this._iQualifiedNameProvider.getFullyQualifiedName(dat_8).getLastSegment());
            _builder.append(_firstUpper_7);
            _builder.append("\'");
            _builder.newLineIfNotEmpty();
            {
              if ((intPropCounter > 1)) {
                _builder.append(",");
                _builder.newLine();
              }
            }
            _builder.append("//");
            _builder.append(intPropCounter = (intPropCounter - 1));
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("                    ");
    _builder.append("];");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("//error");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("function( error ){");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("alert(\"El paciente no se encuentra registrado\");");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append(");");
    _builder.newLine();
    _builder.append("}]);");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileRegistersInvestigatorViewHtml(final Feature f) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<div ng-include=\"\'/app/Templates/templateInvestigator.html\'\"></div>");
    _builder.newLine();
    _builder.append("<div id=\"page-wrapper\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<div class=\"row\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<div class=\"col-lg-12\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<h1 class=\"page-header\">Datos de control del estudio ");
    String _firstUpper = StringExtensions.toFirstUpper(f.getName());
    _builder.append(_firstUpper, "            ");
    _builder.append("</h1>");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<!-- /.col-lg-12 -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<div class=\"row\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<div class=\"col-lg-4\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<div class=\"panel panel-default\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<div class=\"panel-heading\">");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("Datos Promedio por cada Dato Capturado");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<div class=\"panel-body\">");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<canvas  id=\"todoData\" class=\"chart chart-bar\"");
    _builder.newLine();
    _builder.append("                             ");
    _builder.append("chart-data=\"todoData\" chart-labels=\"todoLabels\" chart-series=\"series\">");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("</canvas>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<!-- /.panel-body -->");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<!-- /.panel -->");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<!-- /.col-lg-4 -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<div class=\"row\">");
    _builder.newLine();
    {
      Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(f.getType().eAllContents());
      for(final EObject dat : _iterable) {
        _builder.append("\t\t");
        Feature feature = ((Feature) dat);
        _builder.newLineIfNotEmpty();
        {
          if ((((((feature.getType().getName().equals("Byte") || feature.getType().getName().equals("Double")) || feature.getType().getName().equals("Float")) || feature.getType().getName().equals("Integer")) || feature.getType().getName().equals("Long")) || feature.getType().getName().equals("Short"))) {
            _builder.append("\t\t");
            _builder.append("<div class=\"col-lg-4\">");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("<div class=\"panel panel-default\">");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("<div class=\"panel-heading\">");
            _builder.newLine();
            _builder.append("\t\t                    ");
            String _firstUpper_1 = StringExtensions.toFirstUpper(this._iQualifiedNameProvider.getFullyQualifiedName(dat).getLastSegment());
            _builder.append(_firstUpper_1, "\t\t                    ");
            _builder.append(" (Promedio de cada participante)");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("</div>");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("<div class=\"panel-body\">");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("<canvas  id=\"");
            String _lastSegment = this._iQualifiedNameProvider.getFullyQualifiedName(dat).getLastSegment();
            _builder.append(_lastSegment, "\t\t");
            _builder.append("\" class=\"chart chart-bar\"");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("chart-data=\"");
            String _lastSegment_1 = this._iQualifiedNameProvider.getFullyQualifiedName(dat).getLastSegment();
            _builder.append(_lastSegment_1, "\t\t");
            _builder.append("\" chart-labels=\"labels\" chart-series=\"series\">");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("</canvas>");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("</div>");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("<!-- /.panel-body -->");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("</div>");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("<!-- /.panel -->");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("</div>");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("<!-- /.col-lg-4 -->");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("<div class=\"row\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<div class=\"col-lg-12\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<div class=\"panel panel-default\">");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<div class=\"panel-heading\">");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("Datos totales de cada control de los participantes del estudio.");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<!-- /.panel-heading -->");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<div class=\"panel-body\">");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("<table width=\"100%\" class=\"table table-striped table-bordered table-hover\" id=\"dataTables-example\">");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("<thead>");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("<tr>");
    _builder.newLine();
    _builder.append("                            \t");
    _builder.append("<th>Identificador</th>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("<th>Nombre</th>");
    _builder.newLine();
    {
      Iterable<EObject> _iterable_1 = IteratorExtensions.<EObject>toIterable(f.getType().eAllContents());
      for(final EObject dat_1 : _iterable_1) {
        Feature feature_1 = ((Feature) dat_1);
        _builder.newLineIfNotEmpty();
        {
          if ((((((((feature_1.getType().getName().equals("Date") || feature_1.getType().getName().equals("String")) || feature_1.getType().getName().equals("Byte")) || feature_1.getType().getName().equals("Double")) || feature_1.getType().getName().equals("Float")) || feature_1.getType().getName().equals("Integer")) || feature_1.getType().getName().equals("Long")) || feature_1.getType().getName().equals("Short"))) {
            _builder.append("<th>");
            String _firstUpper_2 = StringExtensions.toFirstUpper(this._iQualifiedNameProvider.getFullyQualifiedName(dat_1).getLastSegment());
            _builder.append(_firstUpper_2);
            _builder.append("</th>");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("                            ");
    _builder.append("</tr>");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("</thead>");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("<tbody>");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("<tr ng-repeat=\"d in principalAndDiagnostic\" >");
    _builder.newLine();
    _builder.append("                            \t");
    _builder.append("<td>{{d[0]}}</td>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("<td>{{d[1]}}</td>");
    _builder.newLine();
    _builder.append("                                ");
    int nf = 2;
    _builder.newLineIfNotEmpty();
    {
      Iterable<EObject> _iterable_2 = IteratorExtensions.<EObject>toIterable(f.getType().eAllContents());
      for(final EObject dat_2 : _iterable_2) {
        Feature feature_2 = ((Feature) dat_2);
        _builder.newLineIfNotEmpty();
        {
          if (((((((feature_2.getType().getName().equals("String") || feature_2.getType().getName().equals("Byte")) || feature_2.getType().getName().equals("Double")) || feature_2.getType().getName().equals("Float")) || feature_2.getType().getName().equals("Integer")) || feature_2.getType().getName().equals("Long")) || feature_2.getType().getName().equals("Short"))) {
            _builder.append("<td>{{d[");
            int _plusPlus = nf++;
            _builder.append(_plusPlus);
            _builder.append("]}}</td>");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          boolean _equals = feature_2.getType().getName().equals("Date");
          if (_equals) {
            _builder.append("<td>{{d[");
            int _plusPlus_1 = nf++;
            _builder.append(_plusPlus_1);
            _builder.append("] | date:\"dd/MMMM/yyyy\"}}</td>");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("                            ");
    _builder.append("</tr>");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("</tbody>");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("</table>");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("<!-- /.table-responsive -->");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<!-- /.panel-body -->");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<!-- /.panel -->");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<!-- /.col-lg-12 -->");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("<!-- /#page-wrapper -->");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileJSServices(final Entity e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("angular.module(\'services.factory\', [\'ngRoute\', \'ngResource\'])");
    _builder.newLine();
    _builder.append(".factory(\'");
    String _firstLower = StringExtensions.toFirstLower(e.getName());
    _builder.append(_firstLower);
    _builder.append("\', function($resource){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("return $resource(\'/");
    String _firstLower_1 = StringExtensions.toFirstLower(e.getName());
    _builder.append(_firstLower_1, "\t");
    _builder.append("/:");
    String _firstLower_2 = StringExtensions.toFirstLower(e.getName());
    _builder.append(_firstLower_2, "\t");
    _builder.append("Id\',{id:\"@_");
    String _firstLower_3 = StringExtensions.toFirstLower(e.getName());
    _builder.append(_firstLower_3, "\t");
    _builder.append("Id\"},{get: { method: \'GET\'}});");
    _builder.newLineIfNotEmpty();
    _builder.append("})");
    _builder.newLine();
    _builder.append(".factory(\'");
    String _firstLower_4 = StringExtensions.toFirstLower(e.getName());
    _builder.append(_firstLower_4);
    _builder.append("s\', function($resource) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("return $resource(\'/");
    String _firstLower_5 = StringExtensions.toFirstLower(e.getName());
    _builder.append(_firstLower_5, "\t");
    _builder.append("\',{},{ \'get\': { method: \'GET\', isArray: true}, \'update\': { method: \'PUT\', isArray: false}});");
    _builder.newLineIfNotEmpty();
    _builder.append("})");
    _builder.newLine();
    _builder.append(";");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileRESTControllers(final Entity e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _string = this._iQualifiedNameProvider.getFullyQualifiedName(e).toString(".");
    String _name = e.getName();
    String _plus = (".model." + _name);
    String _replace = _string.replace(_plus, "");
    String _plus_1 = (_replace + ".controller;");
    _builder.append(_plus_1);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import ");
    String _string_1 = this._iQualifiedNameProvider.getFullyQualifiedName(e).toString(".");
    _builder.append(_string_1);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("import ");
    String _string_2 = this._iQualifiedNameProvider.getFullyQualifiedName(e).toString(".");
    String _name_1 = e.getName();
    String _plus_2 = (".model." + _name_1);
    String _replace_1 = _string_2.replace(_plus_2, "");
    String _plus_3 = (_replace_1 + ".services");
    _builder.append(_plus_3);
    _builder.append(".");
    String _name_2 = e.getName();
    _builder.append(_name_2);
    _builder.append("Services;");
    _builder.newLineIfNotEmpty();
    _builder.append("import org.springframework.beans.factory.annotation.Autowired;");
    _builder.newLine();
    _builder.append("import org.springframework.http.HttpStatus;");
    _builder.newLine();
    _builder.append("import org.springframework.http.ResponseEntity;");
    _builder.newLine();
    _builder.append("import org.springframework.web.bind.annotation.*;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@RestController");
    _builder.newLine();
    _builder.append("@RequestMapping(value = \"/");
    String _firstLower = StringExtensions.toFirstLower(e.getName());
    _builder.append(_firstLower);
    _builder.append("\")");
    _builder.newLineIfNotEmpty();
    _builder.append("public class ");
    String _name_3 = e.getName();
    _builder.append(_name_3);
    _builder.append("Controller {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Autowired");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private ");
    String _name_4 = e.getName();
    _builder.append(_name_4, "    ");
    _builder.append("Services ps;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@RequestMapping(method = RequestMethod.GET)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public ResponseEntity<?> get");
    String _name_5 = e.getName();
    _builder.append(_name_5, "    ");
    _builder.append("s(){");
    _builder.newLineIfNotEmpty();
    _builder.append("    \t");
    _builder.append("List<");
    String _name_6 = e.getName();
    _builder.append(_name_6, "    \t");
    _builder.append("> ans=ps.get");
    String _name_7 = e.getName();
    _builder.append(_name_7, "    \t");
    _builder.append("s();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("if(ans!=null){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return new ResponseEntity<>(ans , HttpStatus.ACCEPTED);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}else{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return new ResponseEntity<>(HttpStatus.NOT_FOUND);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@RequestMapping(method = RequestMethod.GET, path = \"/{");
    String _firstLower_1 = StringExtensions.toFirstLower(e.getName());
    _builder.append(_firstLower_1, "    ");
    _builder.append("Id}\")");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("public ResponseEntity<?> get");
    String _name_8 = e.getName();
    _builder.append(_name_8, "    ");
    _builder.append("(@PathVariable Integer ");
    String _firstLower_2 = StringExtensions.toFirstLower(e.getName());
    _builder.append(_firstLower_2, "    ");
    _builder.append("Id) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    String _name_9 = e.getName();
    _builder.append(_name_9, "\t\t");
    _builder.append(" ans=ps.get");
    String _name_10 = e.getName();
    _builder.append(_name_10, "\t\t");
    _builder.append("(");
    String _firstLower_3 = StringExtensions.toFirstLower(e.getName());
    _builder.append(_firstLower_3, "\t\t");
    _builder.append("Id);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("if(ans!=null){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return new ResponseEntity<>(ans , HttpStatus.ACCEPTED);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}else{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return new ResponseEntity<>(HttpStatus.NOT_FOUND);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@RequestMapping(method = RequestMethod.POST)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public ResponseEntity<?> post");
    String _name_11 = e.getName();
    _builder.append(_name_11, "    ");
    _builder.append("(@RequestBody ");
    String _name_12 = e.getName();
    _builder.append(_name_12, "    ");
    _builder.append(" p) {");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("ps.save");
    String _name_13 = e.getName();
    _builder.append(_name_13, "        ");
    _builder.append("(p);");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("return new ResponseEntity<>(HttpStatus.ACCEPTED);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@RequestMapping(method = RequestMethod.PUT)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public ResponseEntity<?> update");
    String _name_14 = e.getName();
    _builder.append(_name_14, "    ");
    _builder.append("(@RequestBody ");
    String _name_15 = e.getName();
    _builder.append(_name_15, "    ");
    _builder.append(" p) {");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("ps.update");
    String _name_16 = e.getName();
    _builder.append(_name_16, "        ");
    _builder.append("(p);");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("return new ResponseEntity<>(HttpStatus.ACCEPTED);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileServiceImplementation(final Entity e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package  ");
    String _string = this._iQualifiedNameProvider.getFullyQualifiedName(e).toString(".");
    String _name = e.getName();
    String _plus = (".model." + _name);
    String _replace = _string.replace(_plus, "");
    String _plus_1 = (_replace + ".services;");
    _builder.append(_plus_1);
    _builder.newLineIfNotEmpty();
    _builder.append("import ");
    String _string_1 = this._iQualifiedNameProvider.getFullyQualifiedName(e).toString(".");
    _builder.append(_string_1);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("import org.springframework.stereotype.Service;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@Service");
    _builder.newLine();
    _builder.append("public class ");
    String _name_1 = e.getName();
    _builder.append(_name_1);
    _builder.append("ServicesImpl1 implements ");
    String _name_2 = e.getName();
    _builder.append(_name_2);
    _builder.append("Services{");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("List<");
    String _name_3 = e.getName();
    _builder.append(_name_3, "    ");
    _builder.append("> ");
    String _firstLower = StringExtensions.toFirstLower(e.getName());
    _builder.append(_firstLower, "    ");
    _builder.append("List=new ArrayList<>();");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void save");
    String _name_4 = e.getName();
    _builder.append(_name_4, "    ");
    _builder.append("(");
    String _name_5 = e.getName();
    _builder.append(_name_5, "    ");
    _builder.append(" p) {");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    String _firstLower_1 = StringExtensions.toFirstLower(e.getName());
    _builder.append(_firstLower_1, "        ");
    _builder.append("List.add(p);");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<");
    String _name_6 = e.getName();
    _builder.append(_name_6, "    ");
    _builder.append("> get");
    String _name_7 = e.getName();
    _builder.append(_name_7, "    ");
    _builder.append("s() {");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("return ");
    String _firstLower_2 = StringExtensions.toFirstLower(e.getName());
    _builder.append(_firstLower_2, "        ");
    _builder.append("List;");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void update");
    String _name_8 = e.getName();
    _builder.append(_name_8, "    ");
    _builder.append("(");
    String _name_9 = e.getName();
    _builder.append(_name_9, "    ");
    _builder.append(" p) {");
    _builder.newLineIfNotEmpty();
    _builder.append("    \t");
    _builder.append("for (int i = 0; i < ");
    String _firstLower_3 = StringExtensions.toFirstLower(e.getName());
    _builder.append(_firstLower_3, "    \t");
    _builder.append("List.size(); i++) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("if(p.getId().equals(");
    String _firstLower_4 = StringExtensions.toFirstLower(e.getName());
    _builder.append(_firstLower_4, "\t\t\t");
    _builder.append("List.get(i).getId())){");
    _builder.newLineIfNotEmpty();
    _builder.append("    \t                ");
    String _firstLower_5 = StringExtensions.toFirstLower(e.getName());
    _builder.append(_firstLower_5, "    \t                ");
    _builder.append("List.set(i, p);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public ");
    String _name_10 = e.getName();
    _builder.append(_name_10, "    ");
    _builder.append(" get");
    String _name_11 = e.getName();
    _builder.append(_name_11, "    ");
    _builder.append("(Integer pId) {");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    String _name_12 = e.getName();
    _builder.append(_name_12, "        ");
    _builder.append(" ans=null;");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("for (");
    String _name_13 = e.getName();
    _builder.append(_name_13, "        ");
    _builder.append(" pe :");
    _builder.newLineIfNotEmpty();
    _builder.append("                ");
    String _firstLower_6 = StringExtensions.toFirstLower(e.getName());
    _builder.append(_firstLower_6, "                ");
    _builder.append("List) {");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("if(pe.getId().equals(pId)){");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("ans=pe;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return ans;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileServiceInterface(final Entity e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package  ");
    String _string = this._iQualifiedNameProvider.getFullyQualifiedName(e).toString(".");
    String _name = e.getName();
    String _plus = (".model." + _name);
    String _replace = _string.replace(_plus, "");
    String _plus_1 = (_replace + ".services;");
    _builder.append(_plus_1);
    _builder.newLineIfNotEmpty();
    _builder.append("import ");
    String _string_1 = this._iQualifiedNameProvider.getFullyQualifiedName(e).toString(".");
    _builder.append(_string_1);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public interface ");
    String _name_1 = e.getName();
    _builder.append(_name_1);
    _builder.append("Services {");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("public void save");
    String _name_2 = e.getName();
    _builder.append(_name_2, "    ");
    _builder.append("(");
    String _name_3 = e.getName();
    _builder.append(_name_3, "    ");
    _builder.append(" p);");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("public List<");
    String _name_4 = e.getName();
    _builder.append(_name_4, "    ");
    _builder.append("> get");
    String _name_5 = e.getName();
    _builder.append(_name_5, "    ");
    _builder.append("s();");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("public void update");
    String _name_6 = e.getName();
    _builder.append(_name_6, "    ");
    _builder.append("(");
    String _name_7 = e.getName();
    _builder.append(_name_7, "    ");
    _builder.append(" p);");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("public ");
    String _name_8 = e.getName();
    _builder.append(_name_8, "    ");
    _builder.append(" get");
    String _name_9 = e.getName();
    _builder.append(_name_9, "    ");
    _builder.append("(Integer pId);");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Entity e) {
    StringConcatenation _builder = new StringConcatenation();
    {
      QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(e.eContainer());
      boolean _tripleNotEquals = (_fullyQualifiedName != null);
      if (_tripleNotEquals) {
        _builder.append("package ");
        _builder.newLine();
        _builder.append("\t\t");
        QualifiedName _fullyQualifiedName_1 = this._iQualifiedNameProvider.getFullyQualifiedName(e.eContainer());
        _builder.append(_fullyQualifiedName_1, "\t\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t    ");
    _builder.newLine();
    {
      EList<Import> _imports = e.getImports();
      for(final Import i : _imports) {
        _builder.append("import ");
        String _importedNamespace = i.getImportedNamespace();
        _builder.append(_importedNamespace);
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t    ");
    _builder.append("import java.util.Date;");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.newLine();
    _builder.append("public class ");
    String _name = e.getName();
    _builder.append(_name);
    _builder.append(" ");
    {
      Entity _superType = e.getSuperType();
      boolean _tripleNotEquals_1 = (_superType != null);
      if (_tripleNotEquals_1) {
        _builder.append("extends ");
        QualifiedName _fullyQualifiedName_2 = this._iQualifiedNameProvider.getFullyQualifiedName(e.getSuperType());
        _builder.append(_fullyQualifiedName_2);
        _builder.append(" ");
      }
    }
    _builder.append("{");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("public ");
    String _name_1 = e.getName();
    _builder.append(_name_1, "\t");
    _builder.append("(){}");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("private Integer id;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Integer getId() {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return id;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setId(Integer id) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("this.id = id;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    {
      EList<Feature> _features = e.getFeatures();
      for(final Feature f : _features) {
        {
          boolean _equals = f.getName().equals("id");
          boolean _not = (!_equals);
          if (_not) {
            CharSequence _compile = this.compile(f);
            _builder.append(_compile);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Feature f) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _isMany = f.isMany();
      if (_isMany) {
        _builder.append("private java.util.ArrayList<");
        QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(f.getType());
        _builder.append(_fullyQualifiedName);
        _builder.append("> ");
        String _name = f.getName();
        _builder.append(_name);
        _builder.append(" =new java.util.ArrayList<");
        QualifiedName _fullyQualifiedName_1 = this._iQualifiedNameProvider.getFullyQualifiedName(f.getType());
        _builder.append(_fullyQualifiedName_1);
        _builder.append(">();");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("public java.util.ArrayList<");
        QualifiedName _fullyQualifiedName_2 = this._iQualifiedNameProvider.getFullyQualifiedName(f.getType());
        _builder.append(_fullyQualifiedName_2);
        _builder.append("> get");
        String _firstUpper = StringExtensions.toFirstUpper(f.getName());
        _builder.append(_firstUpper);
        _builder.append("() {");
        _builder.newLineIfNotEmpty();
        _builder.append("return ");
        String _name_1 = f.getName();
        _builder.append(_name_1);
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.newLine();
        _builder.append("public void set");
        String _firstUpper_1 = StringExtensions.toFirstUpper(f.getName());
        _builder.append(_firstUpper_1);
        _builder.append("(java.util.ArrayList<");
        QualifiedName _fullyQualifiedName_3 = this._iQualifiedNameProvider.getFullyQualifiedName(f.getType());
        _builder.append(_fullyQualifiedName_3);
        _builder.append("> ");
        String _name_2 = f.getName();
        _builder.append(_name_2);
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("this.");
        String _name_3 = f.getName();
        _builder.append(_name_3);
        _builder.append(" = ");
        String _name_4 = f.getName();
        _builder.append(_name_4);
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
      } else {
        _builder.append("private ");
        QualifiedName _fullyQualifiedName_4 = this._iQualifiedNameProvider.getFullyQualifiedName(f.getType());
        _builder.append(_fullyQualifiedName_4);
        _builder.append(" ");
        String _name_5 = f.getName();
        _builder.append(_name_5);
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("public ");
        QualifiedName _fullyQualifiedName_5 = this._iQualifiedNameProvider.getFullyQualifiedName(f.getType());
        _builder.append(_fullyQualifiedName_5);
        _builder.append(" get");
        String _firstUpper_2 = StringExtensions.toFirstUpper(f.getName());
        _builder.append(_firstUpper_2);
        _builder.append("() {");
        _builder.newLineIfNotEmpty();
        _builder.append("return ");
        String _name_6 = f.getName();
        _builder.append(_name_6);
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("public void set");
        String _firstUpper_3 = StringExtensions.toFirstUpper(f.getName());
        _builder.append(_firstUpper_3);
        _builder.append("(");
        QualifiedName _fullyQualifiedName_6 = this._iQualifiedNameProvider.getFullyQualifiedName(f.getType());
        _builder.append(_fullyQualifiedName_6);
        _builder.append(" ");
        String _name_7 = f.getName();
        _builder.append(_name_7);
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("this.");
        String _name_8 = f.getName();
        _builder.append(_name_8);
        _builder.append(" = ");
        String _name_9 = f.getName();
        _builder.append(_name_9);
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
      }
    }
    return _builder;
  }
}
