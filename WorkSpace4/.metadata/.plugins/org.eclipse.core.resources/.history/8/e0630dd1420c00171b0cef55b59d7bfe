/*
 * generated by Xtext 2.11.0
 */
package edu.eci.prot.dsl2.generator

import com.google.inject.Inject
import edu.eci.prot.dsl2.dsl2.Entity
import edu.eci.prot.dsl2.dsl2.Feature
import edu.eci.prot.dsl2.generator.collections.JSModuleData
import java.util.ArrayList
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.naming.IQualifiedNameProvider

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class Dsl2Generator extends AbstractGenerator {
	@Inject extension IQualifiedNameProvider
	Entity classToServe;
	ArrayList<JSModuleData> appJSModules=new ArrayList<JSModuleData>();
	ArrayList<Feature> diagnostics=new ArrayList<Feature>();
	ArrayList<Feature> comments=new ArrayList<Feature>();
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		//Create POJO entities
		for (e : resource.allContents.toIterable.filter(Entity)) {
			if(e.principal){
				classToServe=e;
				
				
			}
		}
		for (e : resource.allContents.toIterable.filter(Entity)) {
			
			fsa.generateFile(
                e.fullyQualifiedName.toString("/") + ".java",
                e.compile)
			//Create Register Investigators Views
	        for (Feature fea : e.features) {
	        	//Finding diagnostics
	        	if(fea.diagnostic){
	        		diagnostics.add(fea);
	        		
	        		//Add InvestigatorView Path
	        		
	        		appJSModules.add(new JSModuleData("/static/app/RegistersInvestigatorView"+fea.name.toFirstUpper+"/RegistersInvestigatorView"+fea.name.toFirstUpper+".js",
	        			"myApp."+"RegistersInvestigatorView"+fea.name.toFirstUpper,
	        			"RegistersInvestigatorView"+fea.name.toFirstUpper+"/"+"RegistersInvestigatorView"+fea.name.toFirstUpper+".js"))
        			
        			//Create InvestigatorRegister View
        			
	        		fsa.generateFile("/static/app/RegistersInvestigatorView"+fea.name.toFirstUpper+"/"+"RegistersInvestigatorView"+fea.name.toFirstUpper+".html",
                	fea.compileRegistersInvestigatorViewHtml);
                	fsa.generateFile("/static/app/RegistersInvestigatorView"+fea.name.toFirstUpper+"/"+"RegistersInvestigatorView"+fea.name.toFirstUpper+".js",
                	fea.compileRegistersInvestigatorViewJS);
                	
                	//Add RegisterDoctorView Path
                	
	        		
	        		appJSModules.add(new JSModuleData("/static/app/RegisterDoctorView"+fea.name.toFirstUpper+"/RegisterDoctorView"+fea.name.toFirstUpper+".js",
	        			"myApp.RegisterDoctorView"+fea.name.toFirstUpper,
	        			"RegisterDoctorView"+fea.name.toFirstUpper+"/RegisterDoctorView"+fea.name.toFirstUpper+".js"))
                	
                	//Create RegisterDoctorView
                	
                	fsa.generateFile("/static/app/RegisterDoctorView"+fea.name.toFirstUpper+"/"+"RegisterDoctorView"+fea.name.toFirstUpper+".html",
                	fea.compileRegisterDoctorViewHtml);
                	fsa.generateFile("/static/app/RegisterDoctorView"+fea.name.toFirstUpper+"/"+"RegisterDoctorView"+fea.name.toFirstUpper+".js",
                	fea.compileRegisterDoctorViewJS);
                	
                	//println(cr.fullyQualifiedName.lastSegment.toFirstUpper)
                	
                	//fsa.generateFile("/static/app/RegistersInvestigatorView"+fea.name.toFirstUpper+"/"+"RegistersInvestigatorView"+fea.name.toFirstUpper+".js",fea.compileRegistersInvestigatorViewJS);
	        	}else if(!fea.diagnostic&&fea.many){
	        		
	        		//Finding Comments
	        		comments.add(fea);
	        		
	        		
	        		
	        	}
	        }
        }
        //Create services classes
        if(classToServe!==null){
        	fsa.generateFile(
	            ((classToServe.fullyQualifiedName.toString("/").replace("/model/"+classToServe.name, "")) + "/services/"+ classToServe.name + "Services.java"),
	            classToServe.compileServiceInterface);
	        fsa.generateFile(
	            ((classToServe.fullyQualifiedName.toString("/").replace("/model/"+classToServe.name, "")) + "/services/"+ classToServe.name + "ServicesImpl1.java"),
	            classToServe.compileServiceImplementation);
	        fsa.generateFile(
	            ((classToServe.fullyQualifiedName.toString("/").replace("/model/"+classToServe.name, "")) + "/controller/"+ classToServe.name + "Controller.java"),
	            classToServe.compileRESTControllers);
	        //Create JS Services
	        fsa.generateFile("/static/app/services/services.js", classToServe.compileJSServices);
	        
	        //Create HomeDoctor View
		
			fsa.generateFile("/static/app/HomeDoctor/HomeDoctor.html",
	    	classToServe.compileHomeDoctorHtml);
	    	fsa.generateFile("/static/app/HomeDoctor/HomeDoctor.js",
	    	classToServe.compileHomeDoctorJS);
	    	
	    	//Create Investigator Template
	        fsa.generateFile("/static/app/Templates/templateInvestigator.js",
	    	diagnostics.compileTemplateInvestigatorViewJS);
	    	fsa.generateFile("/static/app/Templates/templateInvestigator.html",
	    	diagnostics.compileTemplateInvestigatorViewHtml);
	    	
	    	//CreateDoctorTemplate
	    	fsa.generateFile("/static/app/Templates/templateDoctor.js",
	    	comments.compileTemplateDoctorViewJS);
	    	fsa.generateFile("/static/app/Templates/templateDoctor.html",
	    	comments.compileTemplateDoctorViewHtml);
        }
	   	
        
    	
    	//create app.js & index.html
	   	fsa.generateFile(
	            "/static/app/app.js",
	            appJSModules.compileAppJS);
        fsa.generateFile(
	            "/static/app/index.html",
	            appJSModules.compileIndexHtml);
    	//Clear actual collections
    	comments.clear;
	   	appJSModules.clear;
	   	diagnostics.clear;
	}
	
	//Create RegisterDoctorView
	
	def compileRegisterDoctorViewJS(Feature diagnostic)
	'''
	'use strict';
	
	angular.module('myApp.RegisterDoctorView«diagnostic.name.toFirstUpper»', ['ngRoute'])
	
	.config(['$routeProvider', function($routeProvider) {
	  $routeProvider.when('/RegisterDoctorView«diagnostic.name.toFirstUpper»', {
	    templateUrl: 'RegisterDoctorView«diagnostic.name.toFirstUpper»/RegisterDoctorView«diagnostic.name.toFirstUpper».html',
	    controller: 'RegisterDoctorView«diagnostic.name.toFirstUpper»Ctrl'
	  });
	}])
	
	.controller('RegisterDoctorView«diagnostic.name.toFirstUpper»Ctrl', ['$rootScope', '$scope', '«classToServe.name.toFirstLower»', '«classToServe.name.toFirstLower»s', function ($rootScope, $scope, «classToServe.name.toFirstLower», «classToServe.name.toFirstLower»s) {
	
	    $scope.foundRD=$rootScope.FindID;
	    «classToServe.name».get({«classToServe.name»Id:""+$rootScope.patientId})
	    .$promise.then(
	            //success
	            function( value ){
	                $scope.principal=value;
	                $scope.diagnostics=$scope.principal.diagnostics;
	                «FOR dat: diagnostic.type.eAllContents.toIterable»
                    «var feature =dat as Feature»
    				«IF((feature.type.name.equals("Byte"))||(feature.type.name.equals("Double"))||(feature.type.name.equals("Float"))||(feature.type.name.equals("Integer"))||(feature.type.name.equals("Long"))||(feature.type.name.equals("Short")))»
    				$scope.«feature.name»=[];
                    «ENDIF»
                    «ENDFOR»
	                $scope.labels=[];
	                $scope.series = ['Datos de Control «diagnostic.name.toFirstUpper»'];
	                for(var n=0; n<$scope.diagnostics.length; n++){
	                    var dd=$scope.diagnostics[n];
	                    «FOR dat: diagnostic.type.eAllContents.toIterable»
                        «var feature =dat as Feature»
        				«IF((feature.type.name.equals("Byte"))||(feature.type.name.equals("Double"))||(feature.type.name.equals("Float"))||(feature.type.name.equals("Integer"))||(feature.type.name.equals("Long"))||(feature.type.name.equals("Short")))»
        				$scope.«feature.name».push(dd.«feature.name»);
                        «ENDIF»
                        «ENDFOR»
	                    var datee=new Date(dd.date);
	                    var dia = datee.getDate();
	                    var mes = parseInt(datee.getMonth()) + 1;
	                    var year = datee.getFullYear();
	                    var dated=dia+"/"+mes+"/"+year;
	                    $scope.labels.push(dated);
	                }
	            },
	            //error
	            function( error ){
	                console.log("Error");
	            }
	    );
	
	}]);
	'''
	
	def compileRegisterDoctorViewHtml(Feature diagnostic)
	'''
	<div ng-include="'/app/Templates/templateDoctor.html'"></div>
	<div id="page-wrapper" ng-show="foundRD">
	    <div class="row">
	        <div class="col-lg-12">
	            <h1 class="page-header">Datos de control de {{principal.name}}</h1>
	        </div>
	        <!-- /.col-lg-12 -->
	    </div>
	
	    <div class="row">
	        <div class="col-lg-12">
	            <div class="panel panel-default">
	                <div class="panel-heading">
	                </div>
	                <!-- /.panel-heading -->
	                <div class="panel-body">
	                    <table width="100%" class="table table-striped table-bordered table-hover" id="dataTables-example">
	                        <thead>
	                        <tr>
	                        	«FOR dat: diagnostic.type.eAllContents.toIterable»
			                    «var feature =dat as Feature»
	            				«IF((feature.type.name.equals("Date"))||(feature.type.name.equals("String"))||(feature.type.name.equals("Byte"))||(feature.type.name.equals("Double"))||(feature.type.name.equals("Float"))||(feature.type.name.equals("Integer"))||(feature.type.name.equals("Long"))||(feature.type.name.equals("Short")))»
	            				<th>«dat.fullyQualifiedName.lastSegment.toFirstUpper»</th>
			                    «ENDIF»
			                    «ENDFOR»
	                        </tr>
	                        </thead>
	                        <tbody>
	                        <tr ng-repeat="d in diagnostics" >
	                        	«FOR dat: diagnostic.type.eAllContents.toIterable»
                				«var feature =dat as Feature»
                				«IF((feature.type.name.equals("String"))||(feature.type.name.equals("Byte"))||(feature.type.name.equals("Double"))||(feature.type.name.equals("Float"))||(feature.type.name.equals("Integer"))||(feature.type.name.equals("Long"))||(feature.type.name.equals("Short")))»
                				<td>{{d.«feature.name»}}</td>
                				«ENDIF»
                				«IF(feature.type.name.equals("Date"))»
                				<td>{{d.«feature.name» | date:"dd/MMMM/yyyy"}}</td>
                				«ENDIF»
                				«ENDFOR»
	                        </tr>
	                        </tbody>
	                    </table>
	                    <!-- /.table-responsive -->
	                </div>
	                <!-- /.panel-body -->
	            </div>
	            <!-- /.panel -->
	        </div>
	        <!-- /.col-lg-12 -->
	    </div>
	    <div class="row">
	    	«FOR dat: diagnostic.type.eAllContents.toIterable»
			«var feature =dat as Feature»
			«IF((feature.type.name.equals("Byte"))||(feature.type.name.equals("Double"))||(feature.type.name.equals("Float"))||(feature.type.name.equals("Integer"))||(feature.type.name.equals("Long"))||(feature.type.name.equals("Short")))»
			<div class="col-lg-4">
				<div class="panel panel-default">
					<div class="panel-heading">
						«feature.name.toFirstUpper»
					</div>
					<div class="panel-body">
						<canvas  id="«feature.name»" class="chart chart-bar"
							chart-data="«feature.name»" chart-labels="labels" chart-series="series">
						</canvas>
					</div>
				<!-- /.panel-body -->
				</div>
			<!-- /.panel -->
			</div>
			<!-- /.col-lg-4 -->
			«ENDIF»
			«ENDFOR»
	    </div>
	    <!-- /.row -->
	</div>
	<!-- /#page-wrapper -->
	'''
	
	
	//Create HomeDoctor View
	
	def compileHomeDoctorJS(Entity e)
	'''
	'use strict';
	
	angular.module('myApp.HomeDoctor', ['ngRoute'])
	
	.config(['$routeProvider', function($routeProvider) {
	  $routeProvider.when('/HomeDoctor', {
	    templateUrl: 'HomeDoctor/HomeDoctor.html',
	    controller: 'HomeDoctorCtrl'
	  });
	}])
	
	.controller('HomeDoctorCtrl', ['$rootScope', '$scope', '«e.name.toFirstLower»','$location', function ($rootScope, $scope, «e.name.toFirstLower»,$location) {
	
	    $rootScope.FindID=false;
	    $rootScope.patientId=null;
	    $scope.found=false;
	    $scope.pId=null;
	    $rootScope.patientId=$scope.pId;
	    $scope.consultar=function(){
	        $rootScope.patientId=$scope.pId;
	        «classToServe.name.toFirstLower».get({«e.name.toFirstLower»Id:""+$rootScope.patientId})
	        .$promise.then(
	                //success
	                function( value ){
	                    $rootScope.FindID=true;
	                    $scope.principal=value;
	                },
	                //error
	                function( error ){
	                    alert("Identificador no se encuentra registrado");
	                }
	        );
	
	    };
	    $scope.NuevaConsulta=function(){
	        $rootScope.FindID=false;
	    };
	
	}]);
	'''
	
	def compileHomeDoctorHtml(Entity e)
	'''
	<div ng-include="'/app/Templates/templateDoctor.html'"></div>
	<div id="page-wrapper">
	    <div class="row">
	        <div class="col-lg-12">
	            <h1 class="page-header">Consulta los datos de control</h1>
	        </div>
	        <!-- /.col-lg-12 -->
	        <div ng-hide="FindID">
	            <label> Identificador a consultar</label>
	            <br><br>
	            <input type="number" ng-model="pId">
	            <br><br>
	
	            <button type="button" class="btn btn-success" ng-click="consultar()">Consultar Datos</button>
	            <br><br>
	        </div>
	        <div ng-show="FindID">
	            <button type="button" class="btn btn-success" ng-click="NuevaConsulta()">Nueva Consulta</button>
	            <br><br>
	        </div>
	    </div>
	
	    <div class="row" ng-show="FindID">
	        <div class="col-lg-12">
	            <div class="panel panel-default">
	                <div class="panel-heading">
	                    Datos de {{principal.name}}
	                </div>
	                <div class="panel-body">
	                    <h2> Número de Identificación
	                        <br><br>
	                        <small> {{principal.id}} </small>
	                    </h2>
	                    <br><br>
	                    «FOR feature : e.features»
	                    «IF(!feature.many)»
	                    <h2> «feature.name.toFirstUpper»
	                        <br><br>
	                        <small> {{principal.«feature.name»}} </small>
	                    </h2>
	                    <br><br>
	                    «ENDIF»
	                    «ENDFOR»
	                </div>
	                <!-- /.panel-body -->
	            </div>
	            <!-- /.panel -->
	        </div>
	        <!-- /.col-lg-12 -->
	    </div>
	    <!-- /.row -->
	</div>
	<!-- /#page-wrapper -->
	'''
	
	//Create TemplateDoctorView
	
	def compileTemplateDoctorViewJS(ArrayList<Feature> comments)
	'''
	'use strict';
	
	angular.module('myApp.templateDoctor', ['ngRoute'])
	
	.controller('templateDoctorCtrl', ['$rootScope', '$scope', '«classToServe.name.toFirstLower»', '$location', function ($rootScope, $scope, «classToServe.name.toFirstLower», $location) {
	
	      $scope.continueLogoutD=function(){
	            $location.path("view1");
	      };
	      $scope.continueHomeD=function(){
	            $location.path("HomeDoctor");
	      };
	      «FOR diag : diagnostics»
	      $scope.continueRegistersP«diag.name.toFirstUpper»=function(){
	      		$location.path("RegisterDoctorView«diag.name.toFirstUpper»");
	      };
	      «ENDFOR»
			«FOR comm: comments»
$scope.continueCommentRegister«comm.name.toFirstUpper»=function(){
        $location.path("CommentRegister«comm.name.toFirstUpper»");
  };
  $scope.continueCommentView«comm.name.toFirstUpper»=function(){
        $location.path("CommentsDoctorView«comm.name.toFirstUpper»");
  };
			«ENDFOR»
	}]);
	'''
	
	
	def compileTemplateDoctorViewHtml(ArrayList<Feature> comments)
	'''
	<div ng-controller="templateDoctorCtrl">
	    <!-- Navigation -->
	    <nav class="navbar navbar-default navbar-static-top" role="navigation" style="margin-bottom: 0">
	        <div class="navbar-header">
	            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
	                <span class="sr-only">Toggle navigation</span>
	                <span class="icon-bar"></span>
	                <span class="icon-bar"></span>
	                <span class="icon-bar"></span>
	            </button>
	            <a class="navbar-brand" href="index.html">SB Admin v2.0</a>
	        </div>
	        <!-- /.navbar-header -->
	
	        <ul class="nav navbar-top-links navbar-right">
	            <li><a ng-click="continueLogoutD()"><i class="fa fa-sign-out fa-fw"></i> Cerrar Sesión</a>
	            </li>
	        </ul>
	        <!-- /.navbar-top-links -->
	
	        <div class="navbar-default sidebar" role="navigation">
	            <div class="sidebar-nav navbar-collapse">
	                <ul class="nav" id="side-menu">
	                    <li>
	                        <a ng-click="continueHomeD()"><i class="fa fa-dashboard fa-fw"></i>Inicio</a>
	                    </li>
	                    «FOR diag: diagnostics»
	                    <li>
	                        <a  ng-click="continueRegistersP«diag.name.toFirstUpper»()"><i class="fa fa-bar-chart-o fa-fw"></i> Registros de «diag.name.toFirstUpper»</a>
	                    </li>
                		«ENDFOR»
	                    <li>
	                        <a><i class="fa fa-edit fa-fw"></i> Recomendaciones</a>
	                        <ul class="nav nav-second-level">
	                        	«FOR comm: comments»
	                        	<li>
	                        		<a ng-click="continueCommentView«comm.name.toFirstUpper»()">Ver Comentarios «comm.name.toFirstUpper»</a>
	                        	</li>
	                        	<li>
	                        		<a ng-click="continueCommentRegister«comm.name.toFirstUpper»()">Registrar Nuevo Comentario «comm.name.toFirstUpper»</a>
	                        	</li>
	                        	«ENDFOR»
	                        </ul>
	                        <!-- /.nav-second-level -->
	                    </li>
	                </ul>
	            </div>
	            <!-- /.sidebar-collapse -->
	        </div>
	        <!-- /.navbar-static-side -->
	    </nav>
	</div>
	'''
	
	//Create TemplateInvestigatorView
	
	def compileTemplateInvestigatorViewJS(ArrayList<Feature> diagnostics)
	'''
	'use strict';
	
	angular.module('myApp.templateInvestigator', ['ngRoute'])
	
	
	.controller('templateInvestigatorCtrl', ['$rootScope', '$scope', '$location', function ($rootScope, $scope, $location) {
	
	      $scope.continueLogoutI=function(){
	            $location.path("view1");
	      };
	      $scope.continueHomeI=function(){
	            $location.path("HomeInvestigator");
	      };
		«FOR diag: diagnostics»
		$scope.continueRegistersI«diag.name.toFirstUpper»=function(){
		        $location.path("RegistersInvestigatorView«diag.name.toFirstUpper»");
		  };
		«ENDFOR»
	}]);
	'''
	
	
	def compileTemplateInvestigatorViewHtml(ArrayList<Feature> diagnostics)
	'''
	<meta charset="windows-1252">
	<div ng-controller="templateInvestigatorCtrl">
	    <!-- Navigation -->
	    <nav class="navbar navbar-default navbar-static-top" role="navigation" style="margin-bottom: 0">
	        <div class="navbar-header">
	            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
	                <span class="sr-only">Toggle navigation</span>
	                <span class="icon-bar"></span>
	                <span class="icon-bar"></span>
	                <span class="icon-bar"></span>
	            </button>
	            <a class="navbar-brand" href="index.html">SB Admin v2.0</a>
	        </div>
	        <!-- /.navbar-header -->
	
	        <ul class="nav navbar-top-links navbar-right">
	            <li><a ng-click="continueLogoutI()"><i class="fa fa-sign-out fa-fw"></i> Cerrar Sesión</a>
	            </li>
	        </ul>
	        <!-- /.navbar-top-links -->
	
	        <div class="navbar-default sidebar" role="navigation">
	            <div class="sidebar-nav navbar-collapse">
	                <ul class="nav" id="side-menu">
	                    <li>
	                        <a ng-click="continueHomeI()"><i class="fa fa-dashboard fa-fw"></i>Inicio</a>
	                    </li>
	                    «FOR diag: diagnostics»
	                    <li>
	                    <a  ng-click="continueRegistersI«diag.name.toFirstUpper»()"><i class="fa fa-bar-chart-o fa-fw"></i> Registros del Estudio «diag.name.toFirstUpper» </a>
	                    </li>                
	                    «ENDFOR»
	                </ul>
	            </div>
	            <!-- /.sidebar-collapse -->
	        </div>
	        <!-- /.navbar-static-side -->
	    </nav>
	</div>
	'''
	
	//Create index.html
	def compileIndexHtml(ArrayList<JSModuleData> modules)
		'''
		<!DOCTYPE html>
		<!--[if lt IE 7]>      <html lang="en" ng-app="myApp" class="no-chart lt-ie9 lt-ie8 lt-ie7"> <![endif]-->
		<!--[if IE 7]>         <html lang="en" ng-app="myApp" class="no-chart lt-ie9 lt-ie8"> <![endif]-->
		<!--[if IE 8]>         <html lang="en" ng-app="myApp" class="no-chart lt-ie9"> <![endif]-->
		<!--[if gt IE 8]><!--> <html lang="en" ng-app="myApp" class="no-js"> <!--<![endif]-->
		<head>
		
		  <![endif]-->
		  <meta charset="utf-8">
		  <meta http-equiv="X-UA-Compatible" content="IE=edge">
		  <title>My AngularJS App</title>
		  <meta name="description" content="">
		  <meta name="viewport" content="width=device-width, initial-scale=1">
		  <link rel="stylesheet" href="bower_components/html5-boilerplate/dist/css/normalize.css">
		  <link rel="stylesheet" href="bower_components/html5-boilerplate/dist/css/main.css">
		  <link rel="stylesheet" href="app.css">
		  <!-- Bootstrap Core CSS -->
		  <link href="/app/vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet">
		
		  <!-- MetisMenu CSS -->
		  <link href="/app/vendor/metisMenu/metisMenu.min.css" rel="stylesheet">
		
		  <!-- Custom CSS -->
		  <link href="/app/dist/css/sb-admin-2.css" rel="stylesheet">
		
		  <!-- Custom Fonts -->
		  <link href="/app/vendor/font-awesome/css/font-awesome.min.css" rel="stylesheet" type="text/css">
		  <script src="/app/bower_components/html5-boilerplate/dist/js/vendor/modernizr-2.8.3.min.js"></script>
		
		  <!-- HTML5 Shim and Respond.chart IE8 support of HTML5 elements and media queries -->
		  <!-- WARNING: Respond.chart doesn't work if you view the page via file:// -->
		  <!--[if lt IE 9]>
		  <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
		  <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
		</head>
		<body>
		  <!--[if lt IE 7]>
		      <p class="browsehappy">You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience.</p>
		  <![endif]-->
		
		  <div ng-view></div>
		
		  <div>Cliente Multiple app: v<span app-version></span></div>
		
		  <!-- In production use:
		  <script src="//ajax.googleapis.com/ajax/libs/angularjs/x.x.x/angular.min.chart"></script>
		  -->
		  <script src="bower_components/angular/angular.js"></script>
		  <script src="bower_components/angular-route/angular-route.js"></script>
		  <script src="bower_components/angular-resource/angular-resource.js"></script>
		  <script src="bower_components/chart.js/dist/Chart.min.js"></script>
		  <script src="bower_components/angular-chart.js/dist/angular-chart.min.js"></script>
		  <script src="app.js"></script>
		  <script src="view1/view1.js"></script>
		  <script src="PatientAutorization/PatientAutorization.js"></script>
		  <script src="Templates/templateInvestigator.js"></script>
		  <script src="Templates/templateDoctor.js"></script>
		  <script src="HomeInvestigator/HomeInvestigator.js"></script>
		  <script src="HomeDoctor/HomeDoctor.js"></script>
		  <script src="PatientChoiceView/PatientChoiceView.js"></script>
		  «FOR m: modules»
		  <script src="«m.htmlSRCString»"></script>
		  «ENDFOR»
		  <script src="/app/dist/js/sb-admin-2.js"></script>
		  <script src="services/services.js"></script>
		  <script src="components/version/version.js"></script>
		  <script src="components/version/version-directive.js"></script>
		  <script src="components/version/interpolate-filter.js"></script><!-- jQuery -->
		  <script src="/app/vendor/jquery/jquery.min.js"></script>
		
		  <!-- Bootstrap Core JavaScript -->
		  <script src="/app/vendor/bootstrap/js/bootstrap.min.js"></script>
		
		  <!-- Metis Menu Plugin JavaScript -->
		  <script src="/app/vendor/metisMenu/metisMenu.min.js"></script>
		
		
		</body>
		</html>
		
		'''
	
	//Create app.js
	def compileAppJS(ArrayList<JSModuleData> modules)
		'''
		'use strict';
		
		angular.module('myApp', [
		  'ngRoute',
		  «FOR m : modules»
		  '«m.JSAppModuleString»',
		  «ENDFOR»
		  'myApp.templateDoctor',
		  'myApp.templateInvestigator',
		  'myApp.view1',
		  'myApp.HomeInvestigator',
		  'myApp.PatientAutorization',
		  'myApp.PatientChoiceView',
		  'myApp.HomeDoctor',
		  'myApp.version',
		  'services.factory',
		  'chart.js'
		]).
		config(['$locationProvider', '$routeProvider', function($locationProvider, $routeProvider) {
		  $locationProvider.hashPrefix('!');
		
		  $routeProvider.otherwise({redirectTo: '/view1'});
		}]);
		
		'''
	
	//Feature must be diagnostic
	def compileRegistersInvestigatorViewJS(Feature f)
		'''
		'use strict';
		
		angular.module('myApp.RegistersInvestigatorView«f.name.toFirstUpper»', ['ngRoute'])
		
		.config(['$routeProvider', function($routeProvider) {
		  $routeProvider.when('/RegistersInvestigatorView«f.name.toFirstUpper»', {
		    templateUrl: 'RegistersInvestigatorView«f.name.toFirstUpper»/RegistersInvestigatorView«f.name.toFirstUpper».html',
		    controller: 'RegistersInvestigatorView«f.name.toFirstUpper»Ctrl'
		  });
		}])
		
		.controller('RegistersInvestigatorView«f.name.toFirstUpper»Ctrl', ['«classToServe.name.toFirstLower»', '«classToServe.name.toFirstLower»s', '$rootScope', '$scope', function («classToServe.name.toFirstLower», «classToServe.name.toFirstLower»s, $rootScope, $scope) {
		     «classToServe.name.toFirstLower»s.get()
		        .$promise.then(
		                //success
		                function( value ){
		                    $scope.«classToServe.name.toFirstLower»sList=value;
		                    «var intPropCounter=0»
		                    «FOR dat: f.type.eAllContents.toIterable»
		                    «var feature =dat as Feature»
            				«IF((feature.type.name.equals("Byte"))||(feature.type.name.equals("Double"))||(feature.type.name.equals("Float"))||(feature.type.name.equals("Integer"))||(feature.type.name.equals("Long"))||(feature.type.name.equals("Short")))»
            				$scope.«dat.fullyQualifiedName.lastSegment»=[];
            				//«intPropCounter=intPropCounter+1»
		                    «ENDIF»
		                    «ENDFOR»
		                    $scope.labels=[];
		                    $scope.diagnostics=[];
		                    $scope.series = ['Datos de Control del estudio «f.name.toFirstUpper»'];
		                    $scope.principalAndDiagnostic=[];
		                    for (var i = 0; i < $scope.«classToServe.name.toFirstLower»sList.length; i++) {
		                        if($scope.«classToServe.name.toFirstLower»sList[i].«f.name».length >= 1){
		                            $scope.«classToServe.name.toFirstLower»=$scope.«classToServe.name.toFirstLower»sList[i];
		                            $scope.labels.push($scope.«classToServe.name.toFirstLower»Act.id);
		                            «FOR dat: f.type.eAllContents.toIterable»
        		                    «var feature =dat as Feature»
                    				«IF((feature.type.name.equals("Byte"))||(feature.type.name.equals("Double"))||(feature.type.name.equals("Float"))||(feature.type.name.equals("Integer"))||(feature.type.name.equals("Long"))||(feature.type.name.equals("Short")))»
                    				var «dat.fullyQualifiedName.lastSegment»Initial=0;
        		                    «ENDIF»
        		                    «ENDFOR»
		                            for(var n=0; n<$scope.«classToServe.name.toFirstLower»Act.«f.name».length; n++){
		                                var dd=$scope.«classToServe.name.toFirstLower»Act.«f.name»[n];
		                                «FOR dat: f.type.eAllContents.toIterable»
            		                    «var feature =dat as Feature»
                        				«IF((feature.type.name.equals("Byte"))||(feature.type.name.equals("Double"))||(feature.type.name.equals("Float"))||(feature.type.name.equals("Integer"))||(feature.type.name.equals("Long"))||(feature.type.name.equals("Short")))»
                        				«dat.fullyQualifiedName.lastSegment»Initial=«dat.fullyQualifiedName.lastSegment»Initial+dd.«dat.fullyQualifiedName.lastSegment»;
            		                    «ENDIF»
            		                    «ENDFOR»
		$scope.principalAndDiagnostic.push([$scope.«classToServe.name.toFirstLower»Act.id, $scope.«classToServe.name.toFirstLower»Act.name
		«FOR dat: f.type.eAllContents.toIterable»
        «var feature =dat as Feature»
		«IF((feature.type.name.equals("Date"))||(feature.type.name.equals("String"))||(feature.type.name.equals("Byte"))||(feature.type.name.equals("Double"))||(feature.type.name.equals("Float"))||(feature.type.name.equals("Integer"))||(feature.type.name.equals("Long"))||(feature.type.name.equals("Short")))»
		, dd.«dat.fullyQualifiedName.lastSegment»
        «ENDIF»
        «ENDFOR» 
		]);
		                            }
		                            «FOR dat: f.type.eAllContents.toIterable»
        		                    «var feature =dat as Feature»
                    				«IF((feature.type.name.equals("Byte"))||(feature.type.name.equals("Double"))||(feature.type.name.equals("Float"))||(feature.type.name.equals("Integer"))||(feature.type.name.equals("Long"))||(feature.type.name.equals("Short")))»
                    				$scope.«dat.fullyQualifiedName.lastSegment».push(«dat.fullyQualifiedName.lastSegment»Initial/$scope.«classToServe.name.toFirstLower»Act.«f.name».length);
        		                    «ENDIF»
        		                    «ENDFOR»
		                            $scope.diagnostics.push($scope.«classToServe.name.toFirstLower»sList[i].diagnostics[0]);
		                        }
		                    }
		                    «FOR dat: f.type.eAllContents.toIterable»
		                    «var feature =dat as Feature»
            				«IF((feature.type.name.equals("Byte"))||(feature.type.name.equals("Double"))||(feature.type.name.equals("Float"))||(feature.type.name.equals("Integer"))||(feature.type.name.equals("Long"))||(feature.type.name.equals("Short")))»
            				«dat.fullyQualifiedName.lastSegment»Initial=0;
		                    «ENDIF»
		                    «ENDFOR»
		                    for(var j = 0; j < $scope.«(f.type.eAllContents.toIterable).get(0).fullyQualifiedName.lastSegment»; j++) {
		                    	«FOR dat: f.type.eAllContents.toIterable»
			                    «var feature =dat as Feature»
	            				«IF((feature.type.name.equals("Byte"))||(feature.type.name.equals("Double"))||(feature.type.name.equals("Float"))||(feature.type.name.equals("Integer"))||(feature.type.name.equals("Long"))||(feature.type.name.equals("Short")))»
	            				«dat.fullyQualifiedName.lastSegment»Initial=«dat.fullyQualifiedName.lastSegment»Initial+$scope.«dat.fullyQualifiedName.lastSegment»[j];
			                    «ENDIF»
			                    «ENDFOR»
		                    }
		                    $scope.todoData=[];
		                    «FOR dat: f.type.eAllContents.toIterable»
		                    «var feature =dat as Feature»
            				«IF((feature.type.name.equals("Byte"))||(feature.type.name.equals("Double"))||(feature.type.name.equals("Float"))||(feature.type.name.equals("Integer"))||(feature.type.name.equals("Long"))||(feature.type.name.equals("Short")))»
            				$scope.todoData.push(«dat.fullyQualifiedName.lastSegment»Initial/$scope.«dat.fullyQualifiedName.lastSegment».length);
		                    «ENDIF»
		                    «ENDFOR»
							$scope.todoLabels=[
		                    «FOR dat: f.type.eAllContents.toIterable»
		                    «var feature =dat as Feature»
            				«IF((feature.type.name.equals("Byte"))||(feature.type.name.equals("Double"))||(feature.type.name.equals("Float"))||(feature.type.name.equals("Integer"))||(feature.type.name.equals("Long"))||(feature.type.name.equals("Short")))»
            				'«dat.fullyQualifiedName.lastSegment.toFirstUpper»'
            				«IF(intPropCounter>1)»
            				,
            				«ENDIF»
            				//«intPropCounter=intPropCounter-1»
		                    «ENDIF»
		                    «ENDFOR»
		                    ];
		                },
		                //error
		                function( error ){
		                    alert("El paciente no se encuentra registrado");
		                }
		        );
		}]);
		'''
	def compileRegistersInvestigatorViewHtml(Feature f)
		'''
		<div ng-include="'/app/Templates/templateInvestigator.html'"></div>
		<div id="page-wrapper">
		    <div class="row">
		        <div class="col-lg-12">
		            <h1 class="page-header">Datos de control del estudio «f.name.toFirstUpper»</h1>
		        </div>
		        <!-- /.col-lg-12 -->
		    </div>
		    <div class="row">
		        <div class="col-lg-4">
		            <div class="panel panel-default">
		                <div class="panel-heading">
		                    Datos Promedio por cada Dato Capturado
		                </div>
		                <div class="panel-body">
		                    <canvas  id="todoData" class="chart chart-bar"
		                             chart-data="todoData" chart-labels="todoLabels" chart-series="series">
		                    </canvas>
		                </div>
		                <!-- /.panel-body -->
		            </div>
		            <!-- /.panel -->
		        </div>
		        <!-- /.col-lg-4 -->
		    </div>
		    <div class="row">
				«FOR dat: f.type.eAllContents.toIterable»
				«var feature =dat as Feature»
				«IF((feature.type.name.equals("Byte"))||(feature.type.name.equals("Double"))||(feature.type.name.equals("Float"))||(feature.type.name.equals("Integer"))||(feature.type.name.equals("Long"))||(feature.type.name.equals("Short")))»
				<div class="col-lg-4">
				<div class="panel panel-default">
				<div class="panel-heading">
		                    «dat.fullyQualifiedName.lastSegment.toFirstUpper» (Promedio de cada participante)
				</div>
				<div class="panel-body">
				<canvas  id="«dat.fullyQualifiedName.lastSegment»" class="chart chart-bar"
				chart-data="«dat.fullyQualifiedName.lastSegment»" chart-labels="labels" chart-series="series">
				</canvas>
				</div>
				<!-- /.panel-body -->
				</div>
				<!-- /.panel -->
				</div>
				<!-- /.col-lg-4 -->
		        «ENDIF»
		        «ENDFOR»
		    </div>
		    	<div class="row">
		            <div class="col-lg-12">
		                <div class="panel panel-default">
		                    <div class="panel-heading">
		                        Datos totales de cada control de los participantes del estudio.
		                    </div>
		                    <!-- /.panel-heading -->
		                    <div class="panel-body">
		                        <table width="100%" class="table table-striped table-bordered table-hover" id="dataTables-example">
		                            <thead>
		                            <tr>
		                            	<th>Identificador</th>
										<th>Nombre</th>
		                                «FOR dat: f.type.eAllContents.toIterable»
                        				«var feature =dat as Feature»
                        				«IF((feature.type.name.equals("Date"))||(feature.type.name.equals("String"))||(feature.type.name.equals("Byte"))||(feature.type.name.equals("Double"))||(feature.type.name.equals("Float"))||(feature.type.name.equals("Integer"))||(feature.type.name.equals("Long"))||(feature.type.name.equals("Short")))»
                        				<th>«dat.fullyQualifiedName.lastSegment.toFirstUpper»</th>
                        				«ENDIF»
                        				«ENDFOR»
		                            </tr>
		                            </thead>
		                            <tbody>
		                            <tr ng-repeat="d in principalAndDiagnostic" >
		                            	<td>{{d[0]}}</td>
										<td>{{d[1]}}</td>
		                                «var nf=2»
		                                «FOR dat: f.type.eAllContents.toIterable»
                        				«var feature =dat as Feature»
                        				«IF((feature.type.name.equals("String"))||(feature.type.name.equals("Byte"))||(feature.type.name.equals("Double"))||(feature.type.name.equals("Float"))||(feature.type.name.equals("Integer"))||(feature.type.name.equals("Long"))||(feature.type.name.equals("Short")))»
                        				<td>{{d[«nf++»]}}</td>
                        				«ENDIF»
                        				«IF(feature.type.name.equals("Date"))»
                        				<td>{{d[«nf++»] | date:"dd/MMMM/yyyy"}}</td>
                        				«ENDIF»
                        				«ENDFOR»
		                            </tr>
		                            </tbody>
		                        </table>
		                        <!-- /.table-responsive -->
		                    </div>
		                    <!-- /.panel-body -->
		                </div>
		                <!-- /.panel -->
		            </div>
		            <!-- /.col-lg-12 -->
		        </div>
		</div>
		<!-- /#page-wrapper -->
		'''
	
	def compileJSServices(Entity e)
		'''
		'use strict';
		
		angular.module('services.factory', ['ngRoute', 'ngResource'])
		.factory('«e.name.toFirstLower»', function($resource){
			return $resource('/«e.name.toFirstLower»/:«e.name.toFirstLower»Id',{id:"@_«e.name.toFirstLower»Id"},{get: { method: 'GET'}});
		})
		.factory('«e.name.toFirstLower»s', function($resource) {
			return $resource('/«e.name.toFirstLower»',{},{ 'get': { method: 'GET', isArray: true}, 'update': { method: 'PUT', isArray: false}});
		})
		;
		'''
	
	def compileRESTControllers(Entity e)
		'''
		package «((e.fullyQualifiedName.toString(".").replace(".model."+e.name, "")) + ".controller;")»
		
		import «e.fullyQualifiedName.toString(".")»;
		import «((e.fullyQualifiedName.toString(".").replace(".model."+e.name, "")) + ".services")».«e.name»Services;
		import org.springframework.beans.factory.annotation.Autowired;
		import org.springframework.http.HttpStatus;
		import org.springframework.http.ResponseEntity;
		import org.springframework.web.bind.annotation.*;
		
		@RestController
		@RequestMapping(value = "/«e.name.toFirstLower»")
		public class «e.name»Controller {
		
		    @Autowired
		    private «e.name»Services ps;
		
		    @RequestMapping(method = RequestMethod.GET)
		    public ResponseEntity<?> get«e.name»s(){
		        return new ResponseEntity<>(ps.get«e.name»s(), HttpStatus.ACCEPTED);
		    }
		
		    @RequestMapping(method = RequestMethod.GET, path = "/{«e.name.toFirstLower»Id}")
		    public ResponseEntity<?> get«e.name»(@PathVariable Integer «e.name.toFirstLower»Id) {
		        return new ResponseEntity<>(ps.get«e.name»(«e.name.toFirstLower»Id), HttpStatus.ACCEPTED);
		    }
		
		    @RequestMapping(method = RequestMethod.POST)
		    public ResponseEntity<?> post«e.name»(@RequestBody «e.name» p) {
		        ps.save«e.name»(p);
		        return new ResponseEntity<>(HttpStatus.ACCEPTED);
		    }
		
		    @RequestMapping(method = RequestMethod.PUT)
		    public ResponseEntity<?> update«e.name»(@RequestBody «e.name» p) {
		        ps.update«e.name»(p);
		        return new ResponseEntity<>(HttpStatus.ACCEPTED);
		    }
		}
		'''
	
	def compileServiceImplementation(Entity e)
		'''
		package  «((e.fullyQualifiedName.toString(".").replace(".model."+e.name, "")) + ".services;")»
		import «e.fullyQualifiedName.toString(".")»;
		import org.springframework.stereotype.Service;
		
		import java.util.ArrayList;
		import java.util.List;

		@Service
		public class «e.name»ServicesImpl1 implements «e.name»Services{
		
		    List<«e.name»> «e.name.toFirstLower»List=new ArrayList<>();
		
		    @Override
		    public void save«e.name»(«e.name» p) {
		        «e.name.toFirstLower»List.add(p);
		    }
		
		    @Override
		    public List<«e.name»> get«e.name»s() {
		        return «e.name.toFirstLower»List;
		    }
		
		    @Override
		    public void update«e.name»(«e.name» p) {
		        for («e.name» pe :
		                «e.name.toFirstLower»List) {
		            if (p.getId()==pe.getId()) {
		                «e.name.toFirstLower»List.add(«e.name.toFirstLower»List.indexOf(pe), p);
		            }
		        }
		    }
		
		
		    @Override
		    public «e.name» get«e.name»(Integer pId) {
		        «e.name» ans=null;
		        for («e.name» pe :
		                «e.name.toFirstLower»List) {
		            if(pe.getId()==pId){
		                ans=pe;
		                break;
		            }
		        }
		        return ans;
		    }
		}
		'''
	
	def compileServiceInterface(Entity e)
		'''
		package  «((e.fullyQualifiedName.toString(".").replace(".model."+e.name, "")) + ".services;")»
		import «e.fullyQualifiedName.toString(".")»;
		import java.util.List;
		
		public interface «e.name»Services {
		    public void save«e.name»(«e.name» p);
		    public List<«e.name»> get«e.name»s();
		    public void update«e.name»(«e.name» p);
		    public «e.name» get«e.name»(Integer pId);
		}
		'''
	
	def compile(Entity e) 
	''' 
        «IF e.eContainer.fullyQualifiedName !== null»
package 
		«e.eContainer.fullyQualifiedName»;
        «ENDIF»
	    
        «FOR i : e.imports»
import «i.importedNamespace»;
	    «ENDFOR»
	    import java.util.Date;
	    
public class «e.name» «IF e.superType !== null»extends «e.superType.fullyQualifiedName» «ENDIF»{
	public «e.name»(){}
	private Integer id;
	
	public Integer getId() {
	return id;
	}
	
	public void setId(Integer id) {
	this.id = id;
	}
            «FOR f : e.features»
            	«IF !f.name.equals("id")»
                	«f.compile»
            	«ENDIF»
            «ENDFOR»
        }
    '''
 
    def compile(Feature f) '''
    	«IF f.many»
    		private java.util.ArrayList<«f.type.fullyQualifiedName»> «f.name» =new java.util.ArrayList<«f.type.fullyQualifiedName»>();
    		
    		public java.util.ArrayList<«f.type.fullyQualifiedName»> get«f.name.toFirstUpper»() {
    		return «f.name»;
    		}
    		
    		
    		public void set«f.name.toFirstUpper»(java.util.ArrayList<«f.type.fullyQualifiedName»> «f.name») {
    		this.«f.name» = «f.name»;
    		}
    	«ELSE»
    		private «f.type.fullyQualifiedName» «f.name»;
    		
    		public «f.type.fullyQualifiedName» get«f.name.toFirstUpper»() {
    		return «f.name»;
    		}
    		
    		public void set«f.name.toFirstUpper»(«f.type.fullyQualifiedName» «f.name») {
    		this.«f.name» = «f.name»;
    		}
    	«ENDIF»
    '''
}
