/*
 * generated by Xtext 2.11.0
 */
package edu.eci.prot.dsl2.generator

import com.google.inject.Inject
import edu.eci.prot.dsl2.dsl2.Entity
import edu.eci.prot.dsl2.dsl2.Feature
import edu.eci.prot.dsl2.generator.collections.JSModuleData
import java.util.ArrayList
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.naming.IQualifiedNameProvider

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class Dsl2Generator extends AbstractGenerator {
	@Inject extension IQualifiedNameProvider
	ArrayList<Entity> classesToServe=new ArrayList<Entity>();
	ArrayList<JSModuleData> appJSModules=new ArrayList<JSModuleData>();
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		//Create POJO entities
		for (e : resource.allContents.toIterable.filter(Entity)) {
			if(e.principal){
				classesToServe.add(e);
			}
			fsa.generateFile(
                e.fullyQualifiedName.toString("/") + ".java",
                e.compile)
			//Create Register Investigators Views
	        for (Feature fea : e.features) {
	        	if(fea.diagnostic){
	        		appJSModules.add(new JSModuleData("/static/app/RegistersInvestigatorView"+fea.name.toFirstUpper+"/RegistersInvestigatorView"+fea.name.toFirstUpper+".js",
	        			"myApp."+"RegistersInvestigatorView"+fea.name.toFirstUpper,
	        			"RegistersInvestigatorView"+fea.name.toFirstUpper+"/"+"RegistersInvestigatorView"+fea.name.toFirstUpper+".js"))
	        		fsa.generateFile("/static/app/RegistersInvestigatorView"+fea.name.toFirstUpper+"/"+"RegistersInvestigatorView"+fea.name.toFirstUpper+".html",
                	fea.compileRegistersInvestigatorViewHtml);
                	//println(cr.fullyQualifiedName.lastSegment.toFirstUpper)
                	
                	//fsa.generateFile("/static/app/RegistersInvestigatorView"+fea.name.toFirstUpper+"/"+"RegistersInvestigatorView"+fea.name.toFirstUpper+".js",fea.compileRegistersInvestigatorViewJS);
	        	}
	        }
        }
        //Create services classes
        for(e:classesToServe){
        	fsa.generateFile(
                ((e.fullyQualifiedName.toString("/").replace("/model/"+e.name, "")) + "/services/"+ e.name + "Services.java"),
                e.compileServiceInterface);
            fsa.generateFile(
                ((e.fullyQualifiedName.toString("/").replace("/model/"+e.name, "")) + "/services/"+ e.name + "ServicesImpl1.java"),
                e.compileServiceImplementation);
            fsa.generateFile(
                ((e.fullyQualifiedName.toString("/").replace("/model/"+e.name, "")) + "/controller/"+ e.name + "Controller.java"),
                e.compileRESTControllers);
        }
        //Create JS Services
        fsa.generateFile("/static/app/services/services.js", classesToServe.compileJSServices);
        classesToServe.clear;
	}
	
	//Feature must be diagnostic
	def compileRegistersInvestigatorViewJS(Feature f)
		'''
		'use strict';
		
		angular.module('myApp.RegistersInvestigatorView«f.name.toFirstUpper»', ['ngRoute'])
		
		.config(['$routeProvider', function($routeProvider) {
		  $routeProvider.when('/RegistersInvestigatorView', {
		    templateUrl: 'RegistersInvestigatorView«f.name.toFirstUpper»/RegistersInvestigatorView«f.name.toFirstUpper».html',
		    controller: 'RegistersInvestigatorViewCtrl'
		  });
		}])
		
		.controller('RegistersInvestigatorViewCtrl', ['$rootScope', '$scope', 'persons', function ($rootScope, $scope, persons) {
		     persons.get()
		        .$promise.then(
		                //success
		                function( value ){
		                    $scope.personsList=value;
		                    $scope.sisPressure=[];
		                    $scope.disPressure=[];
		                    $scope.cholesterol=[];
		                    $scope.cardiacRythm=[];
		                    $scope.labels=[];
		                    $scope.diagnostics=[];
		                    $scope.series = ['Datos de Control del estudio'];
		                    for (var i = 0; i < $scope.personsList.length; i++) {
		                        if($scope.personsList[i].diagnostics.length >= 1){
		                            $scope.personAct=$scope.personsList[i];
		                            $scope.labels.push($scope.personAct.id);
		                            var sisP=0;
		                            var disP=0;
		                            var chol=0;
		                            var cRyt=0;
		                            for(var n=0; n<$scope.personAct.diagnostics.length; n++){
		                                var dd=$scope.personAct.diagnostics[n];
		                                sisP=sisP+dd.systolicPressure;
		                                disP=disP+dd.diastolicPressure;
		                                chol=chol+dd.bloodCholesterol;
		                                cRyt=cRyt+dd.heartRate;
		                            }
		                            $scope.sisPressure.push(sisP/$scope.personAct.diagnostics.length);
		                            $scope.disPressure.push(disP/$scope.personAct.diagnostics.length);
		                            $scope.cholesterol.push(chol/$scope.personAct.diagnostics.length);
		                            $scope.cardiacRythm.push(cRyt/$scope.personAct.diagnostics.length);
		                            $scope.diagnostics.push($scope.personsList[i].diagnostics[0]);
		                        }
		                    }
		                    sisP=0;
		                    disP=0;
		                    chol=0;
		                    cRyt=0;
		                    for(var j = 0; j < $scope.sisPressure.length; j++) {
		                        sisP=sisP+$scope.sisPressure[j];
		                        disP=disP+$scope.disPressure[j];
		                        chol=chol+$scope.cholesterol[j];
		                        cRyt=cRyt+$scope.cardiacRythm[j];
		                    }
		                    $scope.todoData=[];
		                    $scope.todoData.push(sisP/$scope.sisPressure.length);
		                    $scope.todoData.push(disP/$scope.sisPressure.length);
		                    $scope.todoData.push(chol/$scope.sisPressure.length);
		                    $scope.todoData.push(cRyt/$scope.sisPressure.length);
		                    $scope.todoLabels=['Presión S.','Presión D.','Colesterol','Ritmo Cardiaco'];
		                },
		                //error
		                function( error ){
		                    alert("El paciente no se encuentra registrado");
		                }
		        );
		}]);
		'''
	def compileRegistersInvestigatorViewHtml(Feature f)
		'''
		<div ng-include="'/app/Templates/templateInvestigator.html'"></div>
		<div id="page-wrapper">
		    <div class="row">
		        <div class="col-lg-12">
		            <h1 class="page-header">Datos de control del estudio</h1>
		        </div>
		        <!-- /.col-lg-12 -->
		    </div>
		    <div class="row">
		        <div class="col-lg-4">
		            <div class="panel panel-default">
		                <div class="panel-heading">
		                    Datos Promedio por cada Dato Capturado
		                </div>
		                <div class="panel-body">
		                    <canvas  id="todoData" class="chart chart-bar"
		                             chart-data="todoData" chart-labels="todoLabels" chart-series="series">
		                    </canvas>
		                </div>
		                <!-- /.panel-body -->
		            </div>
		            <!-- /.panel -->
		        </div>
		        <!-- /.col-lg-4 -->
		    </div>
		    <div class="row">
				«FOR dat: f.type.eAllContents.toIterable»
				«var feature =dat as Feature»
				«IF(feature.type.name.equals("Integer"))»
	        	<div class="col-lg-4">
		            <div class="panel panel-default">
		                <div class="panel-heading">
		                    «dat.fullyQualifiedName.lastSegment.toFirstUpper» (Promedio de cada participante)
		                </div>
		                <div class="panel-body">
		                    <canvas  id="dat.fullyQualifiedName.lastSegment" class="chart chart-bar"
		                             chart-data="«dat.fullyQualifiedName.lastSegment»" chart-labels="labels" chart-series="series">
		                    </canvas>
		                </div>
		                <!-- /.panel-body -->
		            </div>
		            <!-- /.panel -->
		        </div>
		        <!-- /.col-lg-4 -->
		        «ENDIF»
		        «ENDFOR»
		    </div>
		</div>
		<!-- /#page-wrapper -->
		'''
	
	def compileJSServices(ArrayList<Entity> ents)
		'''
		'use strict';
		
		angular.module('services.factory', ['ngRoute', 'ngResource'])
		«FOR e : ents»
		.factory('«e.name»', function($resource){
			return $resource('/«e.name»/:«e.name»Id',{id:"@_«e.name»Id"},{get: { method: 'GET'}});
		})
		.factory('«e.name»s', function($resource) {
			return $resource('/«e.name»',{},{ 'get': { method: 'GET', isArray: true}, 'update': { method: 'PUT', isArray: false}});
		})
	    «ENDFOR»
		;
		'''
	
	def compileRESTControllers(Entity e)
		'''
		package «((e.fullyQualifiedName.toString(".").replace(".model."+e.name, "")) + ".controller;")»
		
		import «e.fullyQualifiedName.toString(".")»;
		import «((e.fullyQualifiedName.toString(".").replace(".model."+e.name, "")) + ".services")».«e.name»Services;
		import org.springframework.beans.factory.annotation.Autowired;
		import org.springframework.http.HttpStatus;
		import org.springframework.http.ResponseEntity;
		import org.springframework.web.bind.annotation.*;
		
		@RestController
		@RequestMapping(value = "/«e.name.toFirstLower»")
		public class «e.name»Controller {
		
		    @Autowired
		    private «e.name»Services ps;
		
		    @RequestMapping(method = RequestMethod.GET)
		    public ResponseEntity<?> get«e.name»s(){
		        return new ResponseEntity<>(ps.get«e.name»s(), HttpStatus.ACCEPTED);
		    }
		
		    @RequestMapping(method = RequestMethod.GET, path = "/{«e.name.toFirstLower»Id}")
		    public ResponseEntity<?> get«e.name»(@PathVariable Integer «e.name.toFirstLower»Id) {
		        return new ResponseEntity<>(ps.get«e.name»(«e.name.toFirstLower»Id), HttpStatus.ACCEPTED);
		    }
		
		    @RequestMapping(method = RequestMethod.POST)
		    public ResponseEntity<?> post«e.name»(@RequestBody «e.name» p) {
		        ps.save«e.name»(p);
		        return new ResponseEntity<>(HttpStatus.ACCEPTED);
		    }
		
		    @RequestMapping(method = RequestMethod.PUT)
		    public ResponseEntity<?> update«e.name»(@RequestBody «e.name» p) {
		        ps.update«e.name»(p);
		        return new ResponseEntity<>(HttpStatus.ACCEPTED);
		    }
		}
		'''
	
	def compileServiceImplementation(Entity e)
		'''
		package  «((e.fullyQualifiedName.toString(".").replace(".model."+e.name, "")) + ".services;")»
		import «e.fullyQualifiedName.toString(".")»;
		import org.springframework.stereotype.Service;
		
		import java.util.ArrayList;
		import java.util.List;

		@Service
		public class «e.name»ServicesImpl1 implements «e.name»Services{
		
		    List<«e.name»> «e.name.toFirstLower»List=new ArrayList<>();
		
		    @Override
		    public void save«e.name»(«e.name» p) {
		        «e.name.toFirstLower»List.add(p);
		    }
		
		    @Override
		    public List<«e.name»> get«e.name»s() {
		        return «e.name.toFirstLower»List;
		    }
		
		    @Override
		    public void update«e.name»(«e.name» p) {
		        for («e.name» pe :
		                «e.name.toFirstLower»List) {
		            if (p.getId()==pe.getId()) {
		                «e.name.toFirstLower»List.add(«e.name.toFirstLower»List.indexOf(pe), p);
		            }
		        }
		    }
		
		
		    @Override
		    public «e.name» get«e.name»(Integer pId) {
		        «e.name» ans=null;
		        for («e.name» pe :
		                «e.name.toFirstLower»List) {
		            if(pe.getId()==pId){
		                ans=pe;
		                break;
		            }
		        }
		        return ans;
		    }
		}
		'''
	
	def compileServiceInterface(Entity e)
		'''
		package  «((e.fullyQualifiedName.toString(".").replace(".model."+e.name, "")) + ".services;")»
		import «e.fullyQualifiedName.toString(".")»;
		import java.util.List;
		
		public interface «e.name»Services {
		    public void save«e.name»(«e.name» p);
		    public List<«e.name»> get«e.name»s();
		    public void update«e.name»(«e.name» p);
		    public «e.name» get«e.name»(Integer pId);
		}
		'''
	
	def compile(Entity e) 
	''' 
        «IF e.eContainer.fullyQualifiedName !== null»
package 
		«e.eContainer.fullyQualifiedName»;
        «ENDIF»
	    
        «FOR i : e.imports»
import «i.importedNamespace»;
	    «ENDFOR»
	    import java.util.Date;
	    
public class «e.name» «IF e.superType !== null»extends «e.superType.fullyQualifiedName» «ENDIF»{
	public «e.name»(){}
	private Integer id;
	
	public Integer getId() {
	return id;
	}
	
	public void setId(Integer id) {
	this.id = id;
	}
            «FOR f : e.features»
            	«IF !f.name.equals("id")»
                	«f.compile»
            	«ENDIF»
            «ENDFOR»
        }
    '''
 
    def compile(Feature f) '''
    	«IF f.many»
    		private java.util.ArrayList<«f.type.fullyQualifiedName»> «f.name» =new java.util.ArrayList<«f.type.fullyQualifiedName»>();
    		
    		public java.util.ArrayList<«f.type.fullyQualifiedName»> get«f.name.toFirstUpper»() {
    		return «f.name»;
    		}
    		
    		
    		public void set«f.name.toFirstUpper»(java.util.ArrayList<«f.type.fullyQualifiedName»> «f.name») {
    		this.«f.name» = «f.name»;
    		}
    	«ELSE»
    		private «f.type.fullyQualifiedName» «f.name»;
    		
    		public «f.type.fullyQualifiedName» get«f.name.toFirstUpper»() {
    		return «f.name»;
    		}
    		
    		public void set«f.name.toFirstUpper»(«f.type.fullyQualifiedName» «f.name») {
    		this.«f.name» = «f.name»;
    		}
    	«ENDIF»
    '''
}
